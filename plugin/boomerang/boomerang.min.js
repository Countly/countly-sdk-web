/*
 * Copyright (c) 2011, Yahoo! Inc.  All rights reserved.
 * Copyright (c) 2011-2012, Log-Normal, Inc.  All rights reserved.
 * Copyright (c) 2012-2017, SOASTA, Inc. All rights reserved.
 * Copyright (c) 2017, Akamai Technologies, Inc. All rights reserved.
 * Copyrights licensed under the BSD License. See the accompanying LICENSE.txt file for terms.
 */
/* Boomerang Version: 1.0.0 7dcaaef8353cdf4e09a1fc74ad2de97bf60e24b2 */

BOOMR_start = (new Date()).getTime(); function BOOMR_check_doc_domain(e) {
    if (window) {
        if (!e) {
            if (window.parent === window || !document.getElementById("boomr-if-as")) {
                return;
            } if (window.BOOMR && BOOMR.boomerang_frame && BOOMR.window) {
                try {
                    BOOMR.boomerang_frame.document.domain !== BOOMR.window.document.domain && (BOOMR.boomerang_frame.document.domain = BOOMR.window.document.domain);
                }
                catch (t) {
                    BOOMR.isCrossOriginError(t) || BOOMR.addError(t, "BOOMR_check_doc_domain.domainFix");
                }
            }e = document.domain;
        } if (e && e.indexOf(".") !== -1 && window.parent) {
            try {
                window.parent.document; return;
            }
            catch (t) {
                try {
                    document.domain = e;
                }
                catch (n) {
                    return;
                }
            } try {
                window.parent.document; return;
            }
            catch (t) {
                e = e.replace(/^[\w\-]+\./, "");
            }BOOMR_check_doc_domain(e);
        }
    }
}BOOMR_check_doc_domain(); !(function(l) {
    var u; var t; var a; var o; var s; var e; var c; var n = l; l.parent !== l && document.getElementById("boomr-if-as") && document.getElementById("boomr-if-as").nodeName.toLowerCase() === "script" && (l = l.parent); a = l.document; l.BOOMR || (l.BOOMR = {}); BOOMR = l.BOOMR; if (!BOOMR.version) {
        BOOMR.version = "1.0.0"; BOOMR.window = l; BOOMR.boomerang_frame = n; BOOMR.plugins || (BOOMR.plugins = {}); !(function() {
            try {
                new l.CustomEvent("CustomEvent") !== undefined && (o = function(e, t) {
                    return new l.CustomEvent(e, t);
                });
            }
            catch (e) {} try {
                !o && a.createEvent && a.createEvent("CustomEvent") && (o = function(e, t) {
                    var n = a.createEvent("CustomEvent"); n.initCustomEvent(e, (t = t || { cancelable: !1, bubbles: !1 }).bubbles, t.cancelable, t.detail); return n;
                });
            }
            catch (e) {}o = (o = !o && a.createEventObject ? function(e, t) {
                var n = a.createEventObject(); n.type = n.propertyName = e; n.detail = t.detail; return n;
            } : o) || function() {
                return undefined;
            };
        }()); s = function(e, t, n) {
            var r = o(e, { detail: t }); r && (n ? BOOMR.setImmediate(i) : i()); function i() {
                try {
                    a.dispatchEvent ? a.dispatchEvent(r) : a.fireEvent && a.fireEvent("onpropertychange", r);
                }
                catch (e) {}
            }
        }; if (typeof a.hidden !== "undefined") {
            e = "visibilityState"; c = "visibilitychange";
        }
        else if (typeof a.mozHidden !== "undefined") {
            e = "mozVisibilityState"; c = "mozvisibilitychange";
        }
        else if (typeof a.msHidden !== "undefined") {
            e = "msVisibilityState"; c = "msvisibilitychange";
        }
        else if (typeof a.webkitHidden !== "undefined") {
            e = "webkitVisibilityState"; c = "webkitvisibilitychange";
        }u = {
            beacon_url: "",
            beacon_url_force_https: !0,
            beacon_urls_allowed: [],
            beacon_type: "AUTO",
            beacon_auth_key: "Authorization",
            beacon_auth_token: undefined,
            beacon_with_credentials: !1,
            beacon_disable_sendbeacon: !1,
            site_domain: l.location.hostname.replace(/.*?([^.]+\.[^.]+)\.?$/, "$1").toLowerCase(),
            user_ip: "",
            autorun: !0,
            hasSentPageLoadBeacon: !1,
            r: undefined,
            same_site_cookie: "Lax",
            secure_cookie: !1,
            forced_same_site_cookie_none: !1,
            events: { page_ready: [], page_unload: [], before_unload: [], dom_loaded: [], visibility_changed: [], prerender_to_visible: [], before_beacon: [], beacon: [], page_load_beacon: [], xhr_load: [], click: [], form_submit: [], config: [], xhr_init: [], spa_init: [], spa_navigation: [], spa_cancel: [], xhr_send: [], xhr_error: [], error: [], netinfo: [], rage_click: [], before_early_beacon: [] },
            public_events: { before_beacon: "onBeforeBoomerangBeacon", beacon: "onBoomerangBeacon", onboomerangloaded: "onBoomerangLoaded" },
            translate_events: { onbeacon: "beacon", onconfig: "config", onerror: "error", onxhrerror: "xhr_error" },
            unloadEventsCount: 0,
            unloadEventCalled: 0,
            listenerCallbacks: {},
            vars: {},
            singleBeaconVars: {},
            varPriority: { "-1": {}, 1: {} },
            errors: {},
            disabled_plugins: {},
            localStorageSupported: !1,
            LOCAL_STORAGE_PREFIX: "_boomr_",
            nativeOverwrites: [],
            xb_handler: function(n) {
                return function(e) {
                    var t; (e = e || l.event).target ? t = e.target : e.srcElement && (t = e.srcElement); (t = t.nodeType === 3 ? t.parentNode : t) && t.nodeName && t.nodeName.toUpperCase() === "OBJECT" && t.type === "application/x-shockwave-flash" || u.fireEvent(n, t);
                };
            },
            clearEvents: function() {
                for (var e in this.events) {
                    this.events.hasOwnProperty(e) && (this.events[e] = []);
                }
            },
            clearListeners: function() {
                for (var e in u.listenerCallbacks) {
                    if (u.listenerCallbacks.hasOwnProperty(e)) {
                        for (;u.listenerCallbacks[e].length;) {
                            BOOMR.utils.removeListener(u.listenerCallbacks[e][0].el, e, u.listenerCallbacks[e][0].fn);
                        }
                    }
                }u.listenerCallbacks = {};
            },
            fireEvent: function(e, t) {
                var n; var r; var i; var o; e = e.toLowerCase(); this.translate_events[e] && (e = this.translate_events[e]); if (this.events.hasOwnProperty(e)) {
                    this.public_events.hasOwnProperty(e) && s(this.public_events[e], t); i = this.events[e]; e !== "before_beacon" && e !== "beacon" && e !== "before_early_beacon" && BOOMR.real_sendBeacon(); o = i.length; for (n = 0; n < o; n++) {
                        try {
                            (r = i[n]).fn.call(r.scope, t, r.cb_data);
                        }
                        catch (a) {
                            BOOMR.addError(a, "fireEvent." + e + "<" + n + ">");
                        }
                    } for (n = 0; n < o; n++) {
                        if (i[n].once) {
                            i.splice(n, 1); o--; n--;
                        }
                    }
                }
            },
            spaNavigation: function() {
                u.onloadfired = !0;
            },
            beaconUrlAllowed: function(e) {
                if (!u.beacon_urls_allowed || u.beacon_urls_allowed.length === 0) {
                    return !0;
                } for (var t = 0; t < u.beacon_urls_allowed.length; t++) {
                    if (new RegExp(u.beacon_urls_allowed[t]).exec(e)) {
                        return !0;
                    }
                } return !1;
            },
            checkLocalStorageSupport: function() {
                var e = u.LOCAL_STORAGE_PREFIX + "clss"; u.localStorageSupported = !1; try {
                    if (!l.JSON || !l.localStorage) {
                        return;
                    } l.localStorage.setItem(e, e); u.localStorageSupported = l.localStorage.getItem(e) === e; l.localStorage.removeItem(e);
                }
                catch (t) {
                    u.localStorageSupported = !1;
                }
            },
            onFrameUnloaded: function() {
                var e; var t; BOOMR.isUnloaded = !0; for (e = 0; e < u.nativeOverwrites.length; e++) {
                    (t = u.nativeOverwrites[e]).obj[t.functionName] = t.origFn;
                }u.nativeOverwrites = [];
            }
        }; t = {
            t_start: BOOMR_start,
            t_end: undefined,
            url: "",
            config_url: null,
            loadedLate: !1,
            beaconsSent: 0,
            isUnloaded: !1,
            beaconInQueue: !1,
            cookies: {},
            testedCookies: !1,
            constants: { BEACON_TYPE_SPAS: ["spa", "spa_hard"], MAX_GET_LENGTH: 2e3 },
            session: { domain: u.site_domain, ID: undefined, start: undefined, length: 0, enabled: !0 },
            utils: {
                hasPostMessageSupport: function() {
                    return !(!l.postMessage || typeof l.postMessage !== "function" && typeof l.postMessage !== "object");
                },
                objectToString: function(e, t, n) {
                    var r; var i = []; if (!e || typeof e !== "object") {
                        return e;
                    } t === undefined && (t = "\n\t"); n = n || 0; if (BOOMR.utils.isArray(e)) {
                        for (r = 0; r < e.length; r++) {
                            n > 0 && e[r] !== null && typeof e[r] === "object" ? i.push(this.objectToString(e[r], t + (t === "\n\t" ? "\t" : ""), n - 1)) : t === "&" ? i.push(encodeURIComponent(e[r])) : i.push(e[r]);
                        } t = ",";
                    }
                    else {
                        for (r in e) {
                            Object.prototype.hasOwnProperty.call(e, r) && (n > 0 && e[r] !== null && typeof e[r] === "object" ? i.push(encodeURIComponent(r) + "=" + this.objectToString(e[r], t + (t === "\n\t" ? "\t" : ""), n - 1)) : t === "&" ? i.push(encodeURIComponent(r) + "=" + encodeURIComponent(e[r])) : i.push(r + "=" + e[r]));
                        }
                    } return i.join(t);
                },
                getCookie: function(e) {
                    var t; if (!e) {
                        return null;
                    } if (typeof BOOMR.cookies[e] !== "undefined") {
                        return !1 === BOOMR.cookies[e] ? undefined : BOOMR.cookies[e];
                    } if (void 0 === (t = this.getRawCookie(e))) {
                        BOOMR.cookies[e] = !1; return undefined;
                    }BOOMR.cookies[e] = t; return BOOMR.cookies[e];
                },
                getRawCookie: function(e) {
                    if (!e) {
                        return null;
                    } var t; var n = " " + a.cookie + ";"; if ((t = n.indexOf(e = " " + e + "=")) >= 0) {
                        t += e.length; return n.substring(t, n.indexOf(";", t)).replace(/^"/, "").replace(/"$/, "");
                    }
                },
                setCookie: function(e, t, n) {
                    var r; var i; if (!e || !BOOMR.session.domain || void 0 === t) {
                        BOOMR.addVar("nocookie", 1); return !1;
                    } if ((r = this.objectToString(t, "&")) === BOOMR.cookies[e]) {
                        return !0;
                    } if ((i = e + "=\"" + r + "\"").length < 500) {
                        t = [i, "path=/", "domain=" + BOOMR.session.domain]; if (typeof n === "number") {
                            (o = new Date()).setTime(o.getTime() + 1e3 * n); o = o.toGMTString(); t.push("expires=" + o);
                        } var o = this.getSameSiteAttributeParts(); location.protocol === "https:" && !0 === u.secure_cookie && o.indexOf("Secure") === -1 && o.push("Secure"); t = t.concat(o); a.cookie = t.join("; "); if (BOOMR.testedCookies) {
                            BOOMR.cookies[e] = typeof n !== "number" || n > 0 ? r : undefined; return !0;
                        }BOOMR.cookies[e] = undefined; if (r === (t = this.getRawCookie(e)) || void 0 === t && typeof n === "number" && n <= 0) {
                            BOOMR.cookies[e] = r; BOOMR.testedCookies = !0; BOOMR.removeVar("nocookie"); return !0;
                        }BOOMR.warn("Saved cookie value doesn't match what we tried to set:\n" + r + "\n" + t);
                    }
                    else {
                        BOOMR.warn("Cookie too long: " + i.length + " " + i);
                    }BOOMR.addVar("nocookie", 1); return !1;
                },
                getSubCookies: function(e) {
                    var t; var n; var r; var i; var o = !1; var a = {}; if (!e) {
                        return null;
                    } if (typeof e !== "string") {
                        return null;
                    } for (n = 0, r = (t = e.split("&")).length; n < r; n++) {
                        if ((i = t[n].split("="))[0]) {
                            i.push(""); a[decodeURIComponent(i[0])] = decodeURIComponent(i[1]); o = !0;
                        }
                    } return o ? a : null;
                },
                removeCookie: function(e) {
                    return this.setCookie(e, {}, -86400);
                },
                getSameSiteAttributeParts: function() {
                    var e = u.same_site_cookie.toUpperCase(); return (e = u.forced_same_site_cookie_none ? "NONE" : e) === "LAX" ? ["SameSite=Lax"] : e === "NONE" ? location.protocol === "https:" && this.isCurrentUASameSiteNoneCompatible() ? ["SameSite=None", "Secure"] : [] : e === "STRICT" ? ["SameSite=Strict"] : ["SameSite=Lax"];
                },
                getLocalStorage: function(e) {
                    var t; var n; if (!e || !u.localStorageSupported) {
                        return null;
                    } try {
                        if ((t = l.localStorage.getItem(u.LOCAL_STORAGE_PREFIX + e)) === null) {
                            return undefined;
                        } n = l.JSON.parse(t);
                    }
                    catch (r) {
                        BOOMR.warn(r); return null;
                    } if (!n || typeof n.items !== "object") {
                        this.removeLocalStorage(e); return null;
                    } if (typeof n.expires === "number" && BOOMR.now() >= n.expires) {
                        this.removeLocalStorage(e); return undefined;
                    } return n.items;
                },
                setLocalStorage: function(e, t, n) {
                    var r; if (!e || !u.localStorageSupported || typeof t !== "object") {
                        return !1;
                    } t = { items: t }; typeof n === "number" && (t.expires = BOOMR.now() + 1e3 * n); if ((t = l.JSON.stringify(t)).length < 5e4) {
                        try {
                            l.localStorage.setItem(u.LOCAL_STORAGE_PREFIX + e, t); if (t === (r = l.localStorage.getItem(u.LOCAL_STORAGE_PREFIX + e))) {
                                return !0;
                            }
                        }
                        catch (i) {}BOOMR.warn("Saved storage value doesn't match what we tried to set:\n" + t + "\n" + r);
                    }
                    else {
                        BOOMR.warn("Storage items too large: " + t.length + " " + t);
                    } return !1;
                },
                removeLocalStorage: function(e) {
                    if (!e || !u.localStorageSupported) {
                        return !1;
                    } try {
                        l.localStorage.removeItem(u.LOCAL_STORAGE_PREFIX + e); return !0;
                    }
                    catch (t) {} return !1;
                },
                cleanupURL: function(e, t) {
                    if (!e || BOOMR.utils.isArray(e)) {
                        return "";
                    } u.strip_query_string && (e = e.replace(/\?.*/, "?qs-redacted")); if (void 0 !== t && e && e.length > t) {
                        var n = e.indexOf("?"); e = n !== -1 && n < t ? e.substr(0, n) + "?..." : e.substr(0, t - 3) + "...";
                    } return e;
                },
                hashQueryString: function(e, t) {
                    if (!e) {
                        return e;
                    } if (!e.match) {
                        BOOMR.addError("TypeError: Not a string", "hashQueryString", typeof e); return "";
                    } if ((e = e.match(/^\/\//) ? location.protocol + e : e).match(/^(https?|file):/)) {
                        return (e = t ? e.replace(/#.*/, "") : e).replace(/\?([^#]*)/, function(e, t) {
                            return "?" + (t.length > 10 ? BOOMR.utils.hashString(t) : t);
                        });
                    } BOOMR.error("Passed in URL is invalid: " + e); return "";
                },
                pluginConfig: function(e, t, n, r) {
                    var i; var o = 0; if (!t || !t[n]) {
                        return !1;
                    } for (i = 0; i < r.length; i++) {
                        if (t[n][r[i]] !== undefined) {
                            e[r[i]] = t[n][r[i]]; o++;
                        }
                    } return o > 0;
                },
                arrayFilter: function(e, t) {
                    var n = []; if (!(this.isArray(e) || e && typeof e.length === "number") || typeof t !== "function") {
                        return n;
                    } if (typeof e.filter === "function") {
                        n = e.filter(t);
                    }
                    else {
                        for (var r, i = -1, o = e.length; ++i < o;) {
                            t(r = e[i], i, e) && (n[n.length] = r);
                        }
                    } return n;
                },
                arrayFind: function(e, t) {
                    if (!(this.isArray(e) || e && typeof e.length === "number") || typeof t !== "function") {
                        return undefined;
                    } if (typeof e.find === "function") {
                        return e.find(t);
                    } for (var n, r = -1, i = e.length; ++r < i;) {
                        if (t(n = e[r], r, e)) {
                            return n;
                        }
                    } return undefined;
                },
                isMutationObserverSupported: function() {
                    return !(l && l.navigator && l.navigator.userAgent && l.navigator.userAgent.match(/Trident.*rv[ :]*11\./)) && l && l.MutationObserver && typeof l.MutationObserver === "function";
                },
                addObserver: function(e, t, n, r, i, o) {
                    var a; var s; var u = { observer: null, timer: null }; if (!this.isMutationObserverSupported() || !r || !e) {
                        return null;
                    } function c(e) {
                        var t = !1; if (u.timer) {
                            clearTimeout(u.timer); u.timer = null;
                        }r && ((t = r.call(o, e, i)) || (r = null)); if (!t && u.observer) {
                            u.observer.disconnect(); u.observer = null;
                        } typeof t === "number" && t > 0 && (u.timer = setTimeout(c, t));
                    }a = l.MutationObserver; l.Zone && typeof l.Zone.__symbol__ === "function" && (s = l.Zone.__symbol__("MutationObserver")) && typeof s === "string" && l.hasOwnProperty(s) && typeof l[s] === "function" && (a = l[s]); u.observer = new a(c); n && (u.timer = setTimeout(c, u.timeout)); u.observer.observe(e, t); return u;
                },
                addListener: function(e, t, n, r) {
                    var i = !1; if (e.addEventListener) {
                        typeof r === "object" ? i = r : typeof r === "boolean" && r && BOOMR.browser.supportsPassive() && (i = { capture: !1, passive: !0 }); e.addEventListener(t, n, i);
                    }
                    else {
                        e.attachEvent && e.attachEvent("on" + t, n);
                    }u.listenerCallbacks[t] = u.listenerCallbacks[t] || []; u.listenerCallbacks[t].push({ el: e, fn: n });
                },
                removeListener: function(e, t, n) {
                    e.removeEventListener ? e.removeEventListener(t, n, !1) : e.detachEvent && e.detachEvent("on" + t, n); if (u.listenerCallbacks.hasOwnProperty(t)) {
                        for (var r = 0; r < u.listenerCallbacks[t].length; r++) {
                            if (n === u.listenerCallbacks[t][r].fn && e === u.listenerCallbacks[t][r].el) {
                                u.listenerCallbacks[t].splice(r, 1); return;
                            }
                        }
                    }
                },
                isArray: function(e) {
                    return Object.prototype.toString.call(e) === "[object Array]";
                },
                inArray: function(e, t) {
                    var n; if (void 0 === e || void 0 === t || !t.length) {
                        return !1;
                    } for (n = 0; n < t.length; n++) {
                        if (t[n] === e) {
                            return !0;
                        }
                    } return !1;
                },
                getQueryParamValue: function(e, t) {
                    var n; var r; var i; var o; if (!e) {
                        return null;
                    } typeof t === "string" ? (n = BOOMR.window.document.createElement("a")).href = t : n = typeof t === "object" && typeof t.search === "string" ? t : BOOMR.window.location; r = n.search.slice(1).split(/&/); for (i = 0; i < r.length; i++) {
                        if (r[i] && (o = r[i].split("=")).length && o[0] === e) {
                            try {
                                return o.length > 1 ? decodeURIComponent(o.splice(1).join("=").replace(/\+/g, " ")) : "";
                            }
                            catch (a) {
                                if (!a || typeof a.name !== "string" || a.name.indexOf("URIError") === -1) {
                                    throw a;
                                }
                            }
                        }
                    } return null;
                },
                generateUUID: function() {
                    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                        var t = 16 * Math.random() | 0; return (e === "x" ? t : 3 & t | 8).toString(16);
                    });
                },
                generateId: function(e) {
                    return "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".substr(0, e || 40).replace(/x/g, function(e) {
                        return (e = (Math.random() || 0.01).toString(36)) === "0" ? "0" : e.substr(2, 1);
                    });
                },
                serializeForUrl: function(e) {
                    return BOOMR.utils.Compression && BOOMR.utils.Compression.jsUrl ? BOOMR.utils.Compression.jsUrl(e) : window.JSON ? JSON.stringify(e) : "";
                },
                getMyURL: function() {
                    var e; var t = document.currentScript || document.getElementById("boomr-if-as") || document.getElementById("boomr-scr-as"); if (t) {
                        return t.src;
                    } for (var n = document.getElementsByTagName("script"), r = n.length; r--;) {
                        if (n[r].readyState === "interactive") {
                            return n[r].src;
                        }
                    } try {
                        throw new Error();
                    }
                    catch (i) {
                        if ("stack" in i && (e = this.arrayFilter(i.stack.split(/\n/), function(e) {
                            return e.match(/https?:\/\//);
                        })) && e.length) {
                            return e[0].replace(/.*(https?:\/\/.+?)(:\d+)+\D*$/m, "$1");
                        }
                    } return "";
                },
                scroll: function() {
                    var e = l.pageXOffset !== undefined; var t = (l.document.compatMode || "") === "CSS1Compat"; var n = { x: 0, y: 0 }; if (e) {
                        if (typeof l.pageXOffset === "function") {
                            n.x = l.pageXOffset(); n.y = l.pageYOffset();
                        }
                        else {
                            n.x = l.pageXOffset; n.y = l.pageYOffset;
                        }
                    }
                    else if (t) {
                        n.x = l.document.documentElement.scrollLeft; n.y = l.document.documentElement.scrollTop;
                    }
                    else {
                        n.x = l.document.body.scrollLeft; n.y = l.document.body.scrollTop;
                    } typeof n.sx === "number" && (n.sx = Math.round(n.sx)); typeof n.sy === "number" && (n.sy = Math.round(n.sy)); return n;
                },
                windowHeight: function() {
                    return l.innerHeight || l.document.documentElement.clientHeight || l.document.body.clientHeight;
                },
                windowWidth: function() {
                    return l.innerWidth || l.document.documentElement.clientWidth || l.document.body.clientWidth;
                },
                isNative: function(e) {
                    return !!e && e.toString && !e.hasOwnProperty("toString") && /\[native code\]/.test(String(e));
                },
                overwriteNative: function(e, t, n) {
                    if (e && n) {
                        BOOMR.boomerang_frame !== BOOMR.window && u.nativeOverwrites.push({ obj: e, functionName: t, origFn: e[t] }); e[t] = n;
                    }
                },
                isInteger: function(e) {
                    return (Number.isInteger || function(e) {
                        return typeof e === "number" && isFinite(e) && Math.floor(e) === e;
                    })(e);
                },
                isObjectEmpty: function(e) {
                    for (var t in e) {
                        if (e.hasOwnProperty(t)) {
                            return !1;
                        }
                    } return !0;
                },
                hashString: function(e) {
                    e = encodeURIComponent(e); for (var t = 2166136261, n = 0; n < e.length; n++) {
                        t ^= e.charCodeAt(n); t += (t << 1) + (t << 4) + (t << 7) + (t << 8) + (t << 24);
                    } var r = (t >>> 0).toString() + e.length; return parseInt(r).toString(36);
                },
                isCurrentUASameSiteNoneCompatible: function() {
                    return !(l && l.navigator && l.navigator.userAgent && typeof l.navigator.userAgent === "string") || this.isUASameSiteNoneCompatible(l.navigator.userAgent);
                },
                isUASameSiteNoneCompatible: function(e) {
                    var t = e.match(/(UCBrowser)\/(\d+\.\d+)\.(\d+)/); if (t) {
                        var n = parseFloat(t[2]); var r = t[3]; return n === 12.13 ? !(r <= 2) : !(n < 12.13);
                    } if (t = e.match(/(Chrome)\/(\d+)\.(\d+)\.(\d+)\.(\d+)/)) {
                        n = t[2]; return n >= 51 && n <= 66 ? !1 : !0;
                    } return (t = e.match(/(Macintosh;.*Mac OS X 10_14[_\d]*.*) AppleWebKit\//)) ? (!(t = e.match(/Version\/.* Safari\//)) || (t = e.match(/Chrom(?:e|ium)/)) !== null) && !(t = e.match(/^Mozilla\/\d+(?:\.\d+)* \(Macintosh;.*Mac OS X \d+(?:_\d+)*\) AppleWebKit\/\d+(?:\.\d+)* \(KHTML, like Gecko\)$/)) : !(t = e.match(/(iP.+; CPU .*OS 12(?:_\d+)*.*)/));
                }
            },
            browser: {
                results: {},
                supportsPassive: function() {
                    if (typeof BOOMR.browser.results.supportsPassive === "undefined") {
                        BOOMR.browser.results.supportsPassive = !1; if (!Object.defineProperty) {
                            return !1;
                        } try {
                            var e = Object.defineProperty({}, "passive", {
                                get: function() {
                                    BOOMR.browser.results.supportsPassive = !0;
                                }
                            }); window.addEventListener("test", null, e);
                        }
                        catch (t) {}
                    } return BOOMR.browser.results.supportsPassive;
                }
            },
            init: function(e) {
                var t; var n; var r = ["autorun", "beacon_auth_key", "beacon_auth_token", "beacon_with_credentials", "beacon_disable_sendbeacon", "beacon_url", "beacon_url_force_https", "beacon_type", "site_domain", "strip_query_string", "user_ip", "same_site_cookie", "secure_cookie"]; BOOMR_check_doc_domain(); (e = e || {}).log !== undefined && (this.log = e.log); this.log || (this.log = function() {}); this.pageId || (this.pageId = BOOMR.utils.generateId(8)); if (e.primary && u.handlers_attached) {
                    return this;
                } if (typeof e.site_domain !== "undefined") {
                    /:/.test(e.site_domain) && (e.site_domain = l.location.hostname.toLowerCase()); this.session.domain = e.site_domain;
                }BOOMR.session.enabled && typeof BOOMR.session.ID === "undefined" && (BOOMR.session.ID = BOOMR.utils.generateUUID()); typeof e.autorun !== "undefined" && (u.autorun = e.autorun); for (n in this.plugins) {
                    if (this.plugins.hasOwnProperty(n)) {
                        if (e[n] && e[n].hasOwnProperty("enabled") && !1 === e[n].enabled) {
                            u.disabled_plugins[n] = 1; typeof this.plugins[n].disable === "function" && this.plugins[n].disable();
                        }
                        else {
                            if (u.disabled_plugins[n]) {
                                if (!e[n] || !e[n].hasOwnProperty("enabled") || !0 !== e[n].enabled) {
                                    continue;
                                } typeof this.plugins[n].enable === "function" && this.plugins[n].enable(); delete u.disabled_plugins[n];
                            } if (typeof this.plugins[n].init === "function") {
                                try {
                                    this.plugins[n].init(e);
                                }
                                catch (i) {
                                    BOOMR.addError(i, n + ".init");
                                }
                            }
                        }
                    }
                } for (t = 0; t < r.length; t++) {
                    e[r[t]] !== undefined && (u[r[t]] = e[r[t]]);
                } if (!u.handlers_attached && !e.wait || u.handlers_attached && u.waiting_for_config) {
                    if (!u.onloadfired && (u.autorun === undefined || !1 !== u.autorun)) {
                        BOOMR.hasBrowserOnloadFired() && (BOOMR.loadedLate = !0); BOOMR.attach_page_ready(BOOMR.page_ready_autorun);
                    }u.waiting_for_config = !1;
                } if (u.handlers_attached) {
                    return this;
                } e.wait && (u.waiting_for_config = !0); BOOMR.attach_page_ready(function() {
                    BOOMR.t_onload || (BOOMR.t_onload = BOOMR.now());
                }); BOOMR.utils.addListener(l, "DOMContentLoaded", function() {
                    u.fireEvent("dom_loaded");
                }); BOOMR.fireEvent("config", e); BOOMR.subscribe("config", function(e) {
                    e.beacon_url && (u.beacon_url = e.beacon_url);
                }); BOOMR.subscribe("spa_navigation", u.spaNavigation, null, u); !(function() {
                    var e; var t; if (c !== undefined) {
                        BOOMR.utils.addListener(a, c, function() {
                            u.fireEvent("visibility_changed");
                        }); u.lastVisibilityState = BOOMR.visibilityState(); BOOMR.subscribe("visibility_changed", function() {
                            var e = BOOMR.visibilityState(); BOOMR.lastVisibilityEvent[e] = BOOMR.now(); if (u.lastVisibilityState === "prerender" && e !== "prerender") {
                                BOOMR.addVar("vis.pre", "1"); u.fireEvent("prerender_to_visible");
                            }u.lastVisibilityState = e;
                        });
                    }BOOMR.utils.addListener(a, "mouseup", u.xb_handler("click")); e = a.getElementsByTagName("form"); for (t = 0; t < e.length; t++) {
                        BOOMR.utils.addListener(e[t], "submit", u.xb_handler("form_submit"));
                    }l.onpagehide || l.onpagehide === null || BOOMR.utils.addListener(l, "unload", function() {
                        BOOMR.window = l = null;
                    }); BOOMR.boomerang_frame !== BOOMR.window && BOOMR.utils.addListener(BOOMR.boomerang_frame, "unload", u.onFrameUnloaded);
                }()); u.handlers_attached = !0; return this;
            },
            attach_page_ready: function(e) {
                BOOMR.hasBrowserOnloadFired() ? this.setImmediate(e, null, null, BOOMR) : l.onpagehide || l.onpagehide === null ? BOOMR.utils.addListener(l, "pageshow", e) : BOOMR.utils.addListener(l, "load", e);
            },
            page_ready_autorun: function(e) {
                u.autorun && BOOMR.page_ready(e, !0);
            },
            page_ready: function(e, t) {
                var n; if (!t && typeof e === "number") {
                    n = e; e = null;
                }e = (e = e || l.event) || { name: "load" }; if (t) {
                    if (typeof l.BOOMR_page_ready === "number") {
                        e.timing = e.timing || {}; e.timing.loadEventEnd = l.BOOMR_page_ready; BOOMR.addVar("pr", 1, !0);
                    }
                }
                else {
                    e.timing = e.timing || {}; n ? e.timing.loadEventEnd = n : typeof l.BOOMR_page_ready === "number" ? e.timing.loadEventEnd = l.BOOMR_page_ready : e.timing.loadEventEnd = BOOMR.now(); BOOMR.addVar("pr", 1, !0);
                } if (u.onloadfired) {
                    return this;
                } u.fireEvent("page_ready", e); u.onloadfired = !0; return this;
            },
            hasBrowserOnloadFired: function() {
                var e = BOOMR.getPerformance(); return a.readyState && a.readyState === "complete" || e && e.timing && e.timing.loadEventStart > 0 || l.BOOMR_onload > 0;
            },
            onloadFired: function() {
                return u.onloadfired;
            },
            setImmediate: function(e, t, n, r) {
                var i = function() {
                    e.call(r || null, t, n || {}, void 0); i = null;
                }; l.requestIdleCallback ? l.requestIdleCallback(i, { timeout: 1e3 }) : l.setImmediate ? l.setImmediate(i) : setTimeout(i, 10);
            },
            now: Date.now || function() {
                return (new Date()).getTime();
            },
            getPerformance: function() {
                try {
                    if (BOOMR.window) {
                        return "performance" in BOOMR.window && BOOMR.window.performance ? BOOMR.window.performance : BOOMR.window.msPerformance || BOOMR.window.webkitPerformance || BOOMR.window.mozPerformance;
                    }
                }
                catch (e) {}
            },
            forceSameSiteCookieNone: function() {
                u.forced_same_site_cookie_none = !0;
            },
            hrNow: function() {
                var e; var t = BOOMR.getPerformance(); if (t && t.now) {
                    e = t.now();
                }
                else {
                    t = BOOMR.plugins.RT && BOOMR.plugins.RT.navigationStart && BOOMR.plugins.RT.navigationStart() || BOOMR.t_lstart || BOOMR.t_start; e = BOOMR.now() - t;
                } return e;
            },
            visibilityState: e === undefined ? function() {
                return "visible";
            } : function() {
                return a[e];
            },
            lastVisibilityEvent: {},
            registerEvent: function(e) {
                if (u.events.hasOwnProperty(e)) {
                    return this;
                } u.events[e] = []; return this;
            },
            disable: function() {
                u.clearEvents(); u.clearListeners();
            },
            fireEvent: function(e, t) {
                return u.fireEvent(e, t);
            },
            subscribe: function(t, n, r, i, e) {
                var o; var a; var s; t = t.toLowerCase(); u.translate_events[t] && (t = u.translate_events[t]); u.events.hasOwnProperty(t) || (u.events[t] = []); s = u.events[t]; for (o = 0; o < s.length; o++) {
                    if ((a = s[o]) && a.fn === n && a.cb_data === r && a.scope === i) {
                        return this;
                    }
                } s.push({ fn: n, cb_data: r || {}, scope: i || null, once: e || !1 }); t === "page_ready" && u.onloadfired && u.autorun && this.setImmediate(n, null, r, i); if (t === "page_unload" || t === "before_unload") {
                    u.unloadEventsCount++; !(function() {
                        s.length; var e = function(e) {
                            n && n.call(i, e || l.event, r); ++u.unloadEventCalled === u.unloadEventsCount && BOOMR.real_sendBeacon();
                        }; t === "page_unload" && (l.onpagehide || l.onpagehide === null ? BOOMR.utils.addListener(l, "pagehide", e) : BOOMR.utils.addListener(l, "unload", e)); BOOMR.utils.addListener(l, "beforeunload", e);
                    }());
                } return this;
            },
            addError: function BOOMR_addError(e, t, n) {
                var r = BOOMR.plugins.Errors; BOOMR.error("Boomerang caught error: " + e + ", src: " + t + ", extra: " + n); if (r && r.is_supported()) {
                    if (typeof e === "string") {
                        r.send({ message: e, extra: n, functionName: t, noStack: !0 }, r.VIA_APP, r.SOURCE_BOOMERANG);
                    }
                    else {
                        typeof t === "string" && (e.functionName = t); void 0 !== n && (e.extra = n); r.send(e, r.VIA_APP, r.SOURCE_BOOMERANG);
                    }
                }
                else {
                    typeof e !== "string" && (e = r = (r = String(e)).match(/^\[object/) ? e.name + ": " + (e.description || e.message).replace(/\r\n$/, "") : r); t !== undefined && (e = "[" + t + ":" + BOOMR.now() + "] " + e); n && (e += ":: " + n); u.errors[e] ? u.errors[e]++ : u.errors[e] = 1;
                }
            },
            isCrossOriginError: function(e) {
                return e.name === "SecurityError" || e.name === "TypeError" && e.message === "Permission denied" || e.name === "Error" && e.message && e.message.match(/^(Permission|Access is) denied/) || e.number === -2146828218;
            },
            addVar: function(e, t, n) {
                if (typeof e === "string") {
                    u.vars[e] = t; n && (u.singleBeaconVars[e] = 1);
                }
                else if (typeof e === "object") {
                    var r; var i = e; for (r in i) {
                        if (i.hasOwnProperty(r)) {
                            u.vars[r] = i[r]; n && (u.singleBeaconVars[r] = 1);
                        }
                    }
                } return this;
            },
            appendVar: function(e, t) {
                var n = BOOMR.getVar(e) || ""; n && (n += ","); BOOMR.addVar(e, n + t); return this;
            },
            removeVar: function(e) {
                var t; var n; if (!arguments.length) {
                    return this;
                } n = arguments.length === 1 && BOOMR.utils.isArray(e) ? e : arguments; for (t = 0; t < n.length; t++) {
                    u.vars.hasOwnProperty(n[t]) && delete u.vars[n[t]];
                } return this;
            },
            hasVar: function(e) {
                return u.vars.hasOwnProperty(e);
            },
            getVar: function(e) {
                return u.vars[e];
            },
            setVarPriority: function(e, t) {
                if (typeof t !== "number" || Math.abs(t) !== 1) {
                    return this;
                } u.varPriority[t][e] = 1; return this;
            },
            setReferrer: function(e) {
                u.r = e;
            },
            requestStart: function(t) {
                var n = BOOMR.now(); BOOMR.plugins.RT.startTimer("xhr_" + t, n); return {
                    loaded: function(e) {
                        BOOMR.responseEnd(t, n, e);
                    }
                };
            },
            readyToSend: function() {
                for (var e in this.plugins) {
                    if (this.plugins.hasOwnProperty(e) && !u.disabled_plugins[e] && typeof this.plugins[e].readyToSend === "function" && !1 === this.plugins[e].readyToSend()) {
                        return !1;
                    }
                } return !0;
            },
            responseEnd: function(e, t, n, r) {
                t = typeof t === "number" ? t : BOOMR.now(); r = typeof r === "number" ? r : BOOMR.now(); if (BOOMR.readyToSend()) {
                    if (BOOMR.hasSentPageLoadBeacon() || BOOMR.utils.inArray(e.initiator, BOOMR.constants.BEACON_TYPE_SPAS)) {
                        if (u.beaconInQueue) {
                            BOOMR.subscribe("beacon", function() {
                                BOOMR.responseEnd(e, t, n, r);
                            }, null, BOOMR, !0);
                        }
                        else {
                            u.beaconInQueue = !0; if (typeof e === "object") {
                                e.url && u.fireEvent("xhr_load", e);
                            }
                            else {
                                BOOMR.real_sendBeacon(); BOOMR.addVar("xhr.pg", e, !0); BOOMR.plugins.RT.startTimer("xhr_" + e, t); u.fireEvent("xhr_load", { name: "xhr_" + e, data: n, timing: { loadEventEnd: r } });
                            }
                        }
                    }
                    else {
                        BOOMR.subscribe("page_load_beacon", function() {
                            BOOMR.responseEnd(e, t, n, r);
                        }, null, BOOMR, !0);
                    }
                }
                else {
                    setTimeout(function() {
                        BOOMR.responseEnd(e, t, n, r);
                    }, 1e3);
                }
            },
            uninstrumentXHR: function() {},
            instrumentXHR: function() {},
            uninstrumentFetch: function() {},
            instrumentFetch: function() {},
            sendBeacon: function(e) {
                e && (u.beacon_url_override = e); if (!u.beaconQueued) {
                    u.beaconQueued = !0; BOOMR.setImmediate(BOOMR.real_sendBeacon, null, null, BOOMR);
                } return !0;
            },
            sendBeaconWhenReady: function(e, t, n) {
                if (u.beaconInQueue) {
                    BOOMR.subscribe("beacon", function() {
                        BOOMR.sendBeaconWhenReady(e, t, n);
                    }, null, BOOMR, !0);
                }
                else {
                    u.beaconInQueue = !0; for (var r in e) {
                        e.hasOwnProperty(r) && BOOMR.addVar(r, e[r], !0);
                    } typeof t === "function" && void 0 !== n && t.apply(n); BOOMR.sendBeacon();
                }
            },
            real_sendBeacon: function() {
                var e; var t = []; var n = {}; if (!u.beaconQueued) {
                    return !1;
                } u.beaconQueued = !1; for (e in this.plugins) {
                    if (this.plugins.hasOwnProperty(e) && !u.disabled_plugins[e] && !this.plugins[e].is_complete(u.vars)) {
                        delete u.vars.early; return !1;
                    }
                } if (!(window && window.Image && window.navigator && BOOMR.window)) {
                    return !1;
                } var r = BOOMR.utils.inArray(u.vars["http.initiator"], BOOMR.constants.BEACON_TYPE_SPAS); var i = typeof u.vars["http.initiator"] === "undefined" || r; u.vars.pgu || (u.vars.pgu = r ? a.URL : a.URL.replace(/#.*/, "")); u.vars.pgu = BOOMR.utils.cleanupURL(u.vars.pgu); u.vars.u && !r || (u.vars.u = u.vars.pgu); u.vars.pgu === u.vars.u && delete u.vars.pgu; u.r ? u.vars.r = BOOMR.utils.cleanupURL(u.r) : delete u.vars.r; u.vars.v = BOOMR.version; BOOMR.snippetVersion && (u.vars.sv = BOOMR.snippetVersion); u.vars.sm = BOOMR.snippetMethod || "i"; if (BOOMR.session.enabled) {
                    u.vars["rt.si"] = BOOMR.session.ID + "-" + Math.round(BOOMR.session.start / 1e3).toString(36); u.vars["rt.ss"] = BOOMR.session.start; typeof u.vars.early === "undefined" ? u.vars["rt.sl"] = BOOMR.session.length >= 1 ? BOOMR.session.length : 1 : u.vars["rt.sl"] = BOOMR.session.length;
                }
                else {
                    BOOMR.removeVar("rt.si", "rt.ss", "rt.sl");
                } if (BOOMR.visibilityState()) {
                    u.vars["vis.st"] = BOOMR.visibilityState(); BOOMR.lastVisibilityEvent.visible && (u.vars["vis.lv"] = BOOMR.now() - BOOMR.lastVisibilityEvent.visible); BOOMR.lastVisibilityEvent.hidden && (u.vars["vis.lh"] = BOOMR.now() - BOOMR.lastVisibilityEvent.hidden);
                }u.vars["ua.plt"] = navigator.platform; u.vars["ua.vnd"] = navigator.vendor; this.pageId && (u.vars.pid = this.pageId); u.vars.n = ++this.beaconsSent; l !== window && (u.vars.if = ""); for (e in u.errors) {
                    u.errors.hasOwnProperty(e) && t.push(e + (u.errors[e] > 1 ? " (*" + u.errors[e] + ")" : ""));
                }t.length > 0 && (u.vars.errors = t.join("\n")); u.errors = {}; u.fireEvent("before_beacon", u.vars); for (e in u.vars) {
                    u.vars.hasOwnProperty(e) && (n[e] = u.vars[e]);
                }BOOMR.removeVar(["qt", "pgu"]); if (typeof u.vars.early === "undefined") {
                    for (var o in u.singleBeaconVars) {
                        u.singleBeaconVars.hasOwnProperty(o) && BOOMR.removeVar(o);
                    }u.singleBeaconVars = {}; if (!u.hasSentPageLoadBeacon && i) {
                        u.hasSentPageLoadBeacon = !0; BOOMR.setImmediate(function() {
                            u.fireEvent("page_load_beacon", n);
                        });
                    }
                } if (BOOMR.session.rate_limited) {
                    return !1;
                } u.beaconInQueue = !1; BOOMR.sendBeaconData(n); return !0;
            },
            sendBeaconData: function(e) {
                var t; var n = []; var r = !0; u.beacon_url = u.beacon_url_override || u.beacon_url; if (!u.beacon_url) {
                    return !1;
                } if (!u.beaconUrlAllowed(u.beacon_url)) {
                    return !1;
                } if (BOOMR.utils.isObjectEmpty(e)) {
                    return !1;
                } u.fireEvent("beacon", e); n = this.getVarsOfPriority(e, -1); i = this.getVarsOfPriority(e, 1); n = n.concat(this.getVarsOfPriority(e, 0), i).join("&"); u.beacon_url_force_https && u.beacon_url.match(/^\/\//) && (u.beacon_url = "https:" + u.beacon_url); e = u.beacon_url + (u.beacon_url.indexOf("?") > -1 ? "&" : "?") + n; if (u.beacon_type === "GET") {
                    r = !0; e.length > BOOMR.constants.MAX_GET_LENGTH && (window.console && (console.warn || console.log) || function() {})("Boomerang: Warning: Beacon may not be sent via GET due to payload size > 2000 bytes");
                }
                else {
                    (u.beacon_type === "POST" || e.length > BOOMR.constants.MAX_GET_LENGTH) && (r = !1);
                } if (l && l.navigator && typeof l.navigator.sendBeacon === "function" && BOOMR.utils.isNative(l.navigator.sendBeacon) && typeof l.Blob === "function" && u.beacon_type !== "GET" && typeof u.beacon_auth_token === "undefined" && !u.beacon_disable_sendbeacon) {
                    var i = new l.Blob([n + "&sb=1"], { type: "application/x-www-form-urlencoded" }); if (l.navigator.sendBeacon(u.beacon_url, i)) {
                        return !0;
                    }
                } if (r = !(BOOMR.orig_XMLHttpRequest || l && l.XMLHttpRequest) ? !0 : r) {
                    try {
                        t = new Image();
                    }
                    catch (o) {
                        return !1;
                    }t.src = e;
                }
                else {
                    e = new (BOOMR.window.orig_XMLHttpRequest || BOOMR.orig_XMLHttpRequest || BOOMR.window.XMLHttpRequest)(); try {
                        this.sendXhrPostBeacon(e, n);
                    }
                    catch (o) {
                        e = new BOOMR.boomerang_frame.XMLHttpRequest(); this.sendXhrPostBeacon(e, n);
                    }
                } return !0;
            },
            hasSentPageLoadBeacon: function() {
                return u.hasSentPageLoadBeacon;
            },
            sendXhrPostBeacon: function(e, t) {
                e.open("POST", u.beacon_url); e.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); if (typeof u.beacon_auth_token !== "undefined") {
                    typeof u.beacon_auth_key === "undefined" && (u.beacon_auth_key = "Authorization"); e.setRequestHeader(u.beacon_auth_key, u.beacon_auth_token);
                }u.beacon_with_credentials && (e.withCredentials = !0); e.send(t);
            },
            getVarsOfPriority: function(e, t) {
                var n; var r = []; var i = t !== 0 ? u.varPriority[t] : e; for (n in i) {
                    if (i.hasOwnProperty(n) && e.hasOwnProperty(n)) {
                        r.push(this.getUriEncodedVar(n, typeof e[n] === "undefined" ? "" : e[n])); t !== 0 && delete e[n];
                    }
                } return r;
            },
            getUriEncodedVar: function(e, t) {
                typeof (t = t === undefined || t === null ? "" : t) === "object" && (t = BOOMR.utils.serializeForUrl(t)); return encodeURIComponent(e) + "=" + encodeURIComponent(t);
            },
            getResourceTiming: function(e, t, n) {
                var r; var i = BOOMR.getPerformance(); try {
                    if (i && typeof i.getEntriesByName === "function") {
                        if (!(r = i.getEntriesByName(e)) || !r.length) {
                            return;
                        } if (!(typeof n !== "function" || (r = BOOMR.utils.arrayFilter(r, n)) && r.length)) {
                            return;
                        } r.length > 1 && typeof t === "function" && r.sort(t); return r[r.length - 1];
                    }
                }
                catch (o) {
                    BOOMR.warn("getResourceTiming:" + o);
                }
            }
        }; if (BOOMR.url) {
            n = BOOMR.window.document.createElement("a"); n.href = BOOMR.url; t.url = n.href;
        }
        else {
            t.url = t.utils.getMyURL();
        } delete BOOMR_start; if (typeof BOOMR_lstart === "number") {
            t.t_lstart = BOOMR_lstart; delete BOOMR_lstart;
        }
        else {
            typeof BOOMR.window.BOOMR_lstart === "number" && (t.t_lstart = BOOMR.window.BOOMR_lstart);
        } typeof BOOMR.window.BOOMR_onload === "number" && (t.t_onload = BOOMR.window.BOOMR_onload); !(function() {
            var e; typeof console === "object" && console.log !== undefined ? t.log = function(e, t, n) {
                console.log("(" + BOOMR.now() + ") {" + BOOMR.pageId + "}: " + n + ": [" + t + "] " + e);
            } : t.log = function() {}; t.debug = (e = function(n) {
                return function(e, t) {
                    this.log(e, n, "boomerang" + (t ? "." + t : "")); return this;
                };
            })("debug"); t.info = e("info"); t.warn = e("warn"); t.error = e("error");
        }()); try {
            var r = t.getPerformance(); r && typeof r.now === "function" && /\[native code\]/.test(String(r.now)) && r.timing && r.timing.navigationStart && (t.now = function() {
                return Math.round(r.now() + r.timing.navigationStart);
            });
        }
        catch (i) {}u.checkLocalStorageSupport(); !(function() {
            for (var e in t) {
                t.hasOwnProperty(e) && (BOOMR[e] = t[e]);
            }BOOMR.xhr_excludes || (BOOMR.xhr_excludes = {});
        }()); s("onBoomerangLoaded", { BOOMR: BOOMR }, !0);
    }
}(window)); !(function() {
    if (!BOOMR.plugins.Continuity) {
        var v = 100; var b = 0; var M = 1; var _ = 2; var B = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"; var y = "."; var w = { passive: !0, capture: !0 }; var E = BOOMR.getPerformance(); var S = {}; var T = E && E.timing && E.timing.navigationStart ? E.timing.navigationStart : BOOMR.now(); var t = function(c) {
            var l = {}; var r = {}; var a = []; var s = 0; var u = 0; var n = 0; var d = !0; BOOMR.fpsLog && BOOMR.fpsLog.length && (c = BOOMR.fpsLog[0] + T); function O() {
                return Math.floor((BOOMR.now() - c) / v);
            } function f() {
                var e = 0; if (x.ttiWaitForFrameworkReady) {
                    if (!x.frameworkReady) {
                        return;
                    } e = x.frameworkReady;
                } if (BOOMR.plugins.PaintTiming && BOOMR.plugins.PaintTiming.is_supported() && E && E.timeOrigin) {
                    var t = BOOMR.plugins.PaintTiming.getTimingFor("largest-contentful-paint"); (t = (t = t || BOOMR.plugins.PaintTiming.getTimingFor("first-contentful-paint")) || BOOMR.plugins.PaintTiming.getTimingFor("first-paint")) && (e = Math.max(e, Math.round(t + E.timeOrigin)));
                }
                else if (E && E.timing && E.timing.msFirstPaint) {
                    e = Math.max(e, E.timing.msFirstPaint);
                }
                else if (BOOMR.window && BOOMR.window.chrome && typeof BOOMR.window.chrome.loadTimes === "function") {
                    t = BOOMR.window.chrome.loadTimes(); t && t.firstPaintTime && (e = Math.max(e, 1e3 * t.firstPaintTime));
                }E && E.timing && E.timing.domContentLoadedEventEnd && (e = Math.max(e, E.timing.domContentLoadedEventEnd)); return e = x.ttiWaitForHeroImages && (n = (function u(e) {
                    var t; var n; var r; var i; var o; var a = 0; if (!BOOMR.window || !BOOMR.window.document || typeof BOOMR.window.document.querySelectorAll !== "function") {
                        return 0;
                    } if (!E || typeof E.getEntriesByType !== "function") {
                        return 0;
                    } if ((t = BOOMR.window.document.querySelectorAll(e + ", " + e + " * img, " + e + " * image")) && t.length) {
                        for (n = 0; n < t.length; n++) {
                            i = t[n].currentSrc || t[n].src || typeof t[n].getAttribute === "function" && t[n].getAttribute("xlink:href"); if (!i && typeof BOOMR.window.getComputedStyle === "function") {
                                var s = BOOMR.window.getComputedStyle(t[n]) && BOOMR.window.getComputedStyle(t[n]).getPropertyValue("background"); if (s) {
                                    s = s.match(/url\(["']?([^"']*)["']?\)/); s && s.length > 0 && (i = s[1]);
                                }
                            } if (i && (o = E.getEntriesByName(i)) && o.length) {
                                for (r = 0; r < o.length; r++) {
                                    a = Math.max(a, o[r].responseEnd);
                                }
                            }
                        }
                    } return a ? Math.floor(a + T) : 0;
                }(x.ttiWaitForHeroImages))) ? Math.max(e, n) : e;
            } function p(e, t) {
                return (function f(e, t, n, r, i) {
                    var o; var a; var s; var u; var c; var l = ""; var d = 0; if (!n) {
                        return "";
                    } if (n.length === 0) {
                        return "";
                    } if (t) {
                        typeof n[r] === "undefined" && (n[r] = 0); for (o = r + 1; o <= i; o++) {
                            typeof n[o] === "undefined" && (n[o] = n[o - 1]);
                        }
                    } for (o = r; o <= i; o++) {
                        d = typeof n[o] !== "number" || isNaN(n[o]) ? 0 : n[o]; e === b ? s = d <= 63 ? B.charAt(d) : y + d.toString(36) + y : e === M ? s = d.toString(36) : e === _ && (s = d < 99 ? d <= 9 ? "0" + Math.max(d, 0) : d : "__"); if (o + 3 <= i && (n[o + 1] === d || d === 0 && n[o + 1] === undefined) && (n[o + 2] === d || d === 0 && n[o + 2] === undefined) && (n[o + 3] === d || d === 0 && n[o + 3] === undefined)) {
                            a = 1; for (;o < i && (n[o + 1] === d || d === 0 && n[o + 1] === undefined);) {
                                a++; o++;
                            }u = "*" + a.toString(36) + "*" + s;
                        }
                        else {
                            u = s;
                        } if (d !== 0 || o !== i) {
                            e === M && c && (l += ","); c = !0; l += u;
                        }
                    } return c ? e.toString() + l : "";
                }(r[e].compressMode, r[e].backfillLast, l[e], t !== 0 ? Math.floor((t - c) / v) : 0, O()));
            }S.timeToInteractive = function() {
                if (s) {
                    return s - T;
                }
            }; S.timeToVisuallyReady = function() {
                if (u) {
                    return u - T;
                }
            }; S.timeToHeroImagesReady = function() {
                if (x.ttiWaitForHeroImages && n) {
                    return n - T;
                }
            }; S.timeToFrameworkReady = function() {
                if (x.ttiWaitForFrameworkReady && x.frameworkReady) {
                    return x.frameworkReady - T;
                }
            }; S.log = function() {
                return a;
            }; return {
                register: function i(e, t, n) {
                    l[e] || (l[e] = []); r[e] = { compressMode: t || b, backfillLast: n };
                },
                set: function o(e, t, n) {
                    void 0 === n && (n = O()); l[e] && (l[e][n] = t);
                },
                log: function m(e, t, n) {
                    void 0 === t && (t = O()); a.push({ type: e, time: t, val: n }); a.length > x.logMaxEntries && Array.prototype.splice.call(a, 0, a.length - x.logMaxEntries);
                },
                increment: function g(e, t, n) {
                    void 0 === n && (n = O()); void 0 === t && (t = 1); if (l[e]) {
                        l[e][n] || (l[e][n] = 0); l[e][n] += t;
                    }
                },
                getTimeBucket: O,
                getStats: function h(e, t) {
                    var n; var r; var i = 0; var o = 0; var a = Infinity; var s = 0; var u = Math.floor((t - c) / v); if (!l[e]) {
                        return 0;
                    } for (r in l[e]) {
                        r = parseInt(r, 10); if (u <= r && l[e].hasOwnProperty(r)) {
                            i++; o += n = l[e][r]; a = Math.min(a, n); s = Math.max(s, n);
                        }
                    } return { total: o, count: i, min: a, max: s };
                },
                analyze: function R(e) {
                    var t = O(); var n = 0; var r = 0; x.sendLog && void 0 !== e && (function i() {
                        for (var e = "", t = 0; t < a.length; t++) {
                            var n; var r = a[t]; t !== 0 && (e += "|"); e += r.type; e += Math.round(r.time - T).toString(36); for (n in r.val) {
                                if (r.val.hasOwnProperty(n)) {
                                    e += "," + n; typeof r.val[n] === "number" ? e += r.val[n].toString(36) : e += r.val[n];
                                }
                            }
                        }e !== "" && x.addToBeacon("c.l", e);
                    }()); x.sendTimeline && void 0 !== e && (function o(e) {
                        var t; var n; for (t in l) {
                            l.hasOwnProperty(t) && (n = p(t, e)) !== "" && x.addToBeacon("c.t." + t, n);
                        }
                    }(e)); if (!s && (u = u || f())) {
                        if (d) {
                            x.addToBeacon("c.tti.vr", S.timeToVisuallyReady()); x.addToBeacon("c.tti.fr", S.timeToFrameworkReady()); x.addToBeacon("c.tti.hi", S.timeToHeroImagesReady()); d = !1;
                        } if (l.longtask || l.fps || l.busy) {
                            for (n = Math.floor((u - c) / v); n <= t; n++) {
                                if (l.longtask && l.longtask[n]) {
                                    r = 0;
                                }
                                else if (l.fps && (!l.fps[n] || l.fps[n] < 2)) {
                                    r = 0;
                                }
                                else if (l.busy && l.busy[n] > 50) {
                                    r = 0;
                                }
                                else if (l.interdly && l.interdly[n]) {
                                    r = 0;
                                }
                                else if (++r >= 5) {
                                    s = c + (n - 5) * v; s = Math.max(s, u); break;
                                }
                            }s > 0 && x.addToBeacon("c.tti", S.timeToInteractive());
                        }
                    }
                },
                stop: function e() {
                    l = {}; a = [];
                },
                onBeacon: function t() {
                    for (var e in l) {
                        l.hasOwnProperty(e) && (l[e] = []);
                    }d = !(a = []);
                }
            };
        }; var n = function(e) {
            if (e.PerformanceObserver && e.LayoutShift) {
                var r = !0; var i = 0; var t = new e.PerformanceObserver(function o(e) {
                    var t; var n; if (r) {
                        t = e.getEntries(); for (n = 0; n < t.length; n++) {
                            t[n].hadRecentInput || (i += t[n].value);
                        }
                    }
                }); try {
                    t.observe({ type: "layout-shift", buffered: !0 });
                }
                catch (a) {
                    return;
                }S.clsScore = function() {
                    return i;
                }; return {
                    clearClsScore: n,
                    analyze: function s(e) {
                        x.addToBeacon("c.cls", S.clsScore());
                    },
                    stop: function u() {
                        r = !1; t.disconnect(); n();
                    },
                    onBeacon: function c() {
                        n();
                    }
                };
            } function n() {
                i = 0;
            }
        }; var r = function(e, r) {
            if (e.PerformanceObserver && e.PerformanceLongTaskTiming) {
                var f = { unknown: 0, self: 1, "same-origin-ancestor": 2, "same-origin-descendant": 3, "same-origin": 4, "cross-origin-ancestor": 5, "cross-origin-descendant": 6, "cross-origin-unreachable": 7, "multiple-contexts": 8 }; var O = { unknown: 0, script: 1, layout: 2 }; var p = { unknown: 0, iframe: 1, embed: 2, object: 3 }; var t = new e.PerformanceObserver(function a(e) {
                    var t; var n; if (i) {
                        t = e.getEntries(); Array.prototype.push.apply(m, t); for (n = 0; n < t.length; n++) {
                            o += t[n].duration;
                        }r.increment("longtask", t.length);
                    }
                }); try {
                    t.observe({ entryTypes: ["longtask"] });
                }
                catch (s) {
                    return;
                }r.register("longtask", b); var m = []; var i = !0; var o = 0; S.longTasksTime = function() {
                    return o;
                }; S.longTasksCount = function() {
                    return m.length;
                }; return {
                    getTasks: function u() {
                        return m;
                    },
                    clearTasks: n,
                    analyze: function g(e) {
                        var t; var n; var r; var i; var o; var a = []; var s = []; if (m.length !== 0) {
                            for (t = 0; t < m.length; t++) {
                                r = m[t]; i = { s: Math.round(r.startTime).toString(36), d: Math.ceil(r.duration).toString(36), n: f[r.name] || 0 }; s = []; for (n = 0; n < r.attribution.length; n++) {
                                    if ((o = r.attribution[n]).name !== "script" || o.containerType !== "iframe" || o.containerName || o.containerId || o.containerSrc) {
                                        var u = o.containerName || undefined; var c = o.containerId || undefined; u === c && (u = undefined); var l = c === undefined ? o.containerSrc : undefined; s.push({ a: O[o.name] || 0, t: p[o.containerType] || 0, n: u, i: c, s: l });
                                    }
                                }s.length > 0 && (i.a = s); a.push(i);
                            }x.addToBeacon("c.lt.n", S.longTasksCount(), !0); x.addToBeacon("c.lt.tt", S.longTasksTime()); x.addToBeacon("c.lt", (function d(e) {
                                var t = BOOMR.utils.Compression && BOOMR.utils.Compression.jsUrl || window.UserTimingCompression && window.UserTimingCompression.jsUrl || BOOMR.window.UserTimingCompression && BOOMR.window.UserTimingCompression.jsUrl; return t ? t(e) : window.JSON ? JSON.stringify(e) : "";
                            }(a)));
                        }
                    },
                    stop: function c() {
                        i = !1; t.disconnect(); n();
                    },
                    onBeacon: function l() {
                        n();
                    }
                };
            } function n() {
                m = []; o = 0;
            }
        }; var i = function(e, r) {
            r.register("busy", _); var i = Math.floor(3.125); var n = BOOMR.now(); var o = 0; var a = 0; var s = 0; var u = 0; var t = !1; var c = !1; S.pageBusy = function() {
                return s === 0 ? 0 : Math.ceil(u / s * 100);
            }; t = setInterval(function l() {
                var e = BOOMR.now(); var t = e - n; n = e; if (t > 68) {
                    e = Math.floor((t - 32) / 32); o += e; a += e; t -= 32 * e;
                }o++; t > 36 && a++;
            }, 32); c = setInterval(function d() {
                var e = r.getTimeBucket(); var t = e; var n = 0; if (o !== 0) {
                    for (;i + 1 < o && n <= 100;) {
                        r.set("busy", 100, --t); o -= i; a = Math.max(a - i, 0); s += i; u += i; n++;
                    }s += o; u += a; r.set("busy", Math.ceil(a / o * 100), e); a = o = 0;
                }
            }, 100); return {
                analyze: function f(e) {
                    x.addToBeacon("c.b", S.pageBusy());
                },
                stop: function O() {
                    if (t) {
                        clearInterval(t); t = !1;
                    } if (c) {
                        clearInterval(c); c = !1;
                    }
                },
                onBeacon: function p() {
                    u = s = 0;
                }
            };
        }; var o = function(t, n) {
            n.register("fps", b); var r; var i = 50; var o = 0; var a = 0; var s = !0; if (BOOMR.fpsLog && BOOMR.fpsLog.length) {
                for (var u = r = BOOMR.fpsLog[0] + T, e = 0; e < BOOMR.fpsLog.length; e++) {
                    var c = T + BOOMR.fpsLog[e]; n.increment("fps", 1, Math.floor((c - r) / v)); i <= c - u && a++; u = c;
                }o = BOOMR.fpsLog.length; delete BOOMR.fpsLog;
            }
            else {
                r = BOOMR.now();
            }t.requestAnimationFrame(function l(e) {
                if (s) {
                    i <= e - u && a++; u = e; o++; n.increment("fps"); t.requestAnimationFrame(l);
                }
            }); S.fps = function() {
                var e = S.fpsDuration(); if (e) {
                    return Math.floor(o / (e / 1e3));
                }
            }; S.fpsDuration = function() {
                if (r) {
                    return BOOMR.now() - r;
                }
            }; S.fpsMinimum = function() {
                if (S.fpsDuration()) {
                    var e = n.getStats("fps", r).min; return e !== Infinity ? e : undefined;
                }
            }; S.fpsLongFrames = function() {
                return a;
            }; S.fpsStart = function() {
                return r ? r.toString(36) : 0;
            }; return {
                analyze: function d(e) {
                    x.addToBeacon("c.f", S.fps()); x.addToBeacon("c.f.d", S.fpsDuration()); x.addToBeacon("c.f.m", S.fpsMinimum()); x.addToBeacon("c.f.l", S.fpsLongFrames()); x.addToBeacon("c.f.s", S.fpsStart());
                },
                stop: function f() {
                    s = !1; r = 0;
                },
                onBeacon: function O() {
                    s && (r = BOOMR.now()); a = o = 0;
                }
            };
        }; var a = function(e, i, t) {
            if (e && e.document && e.document.body && e.document.documentElement) {
                var o = 2e3; var a = 20; var s = 0; var u = 0; var c = 0; var l = 0; var d = 0; var f = 0; var O = 0; var p = 0; var n = !1; var r = e.document.body; var m = e.document.documentElement; i.register("scroll", b); i.register("scrollpct", _); var g = Math.max(r.scrollHeight, r.offsetHeight, m.clientHeight, m.scrollHeight, m.offsetHeight) - BOOMR.utils.windowHeight(); S.scrollPct = function() {
                    return l;
                }; S.scrollCount = function() {
                    return d;
                }; S.scrollDistinct = function() {
                    return O;
                }; S.scrollPixels = function() {
                    return f;
                }; BOOMR.utils.addListener(e, "scroll", h, w); n = setInterval(function R() {
                    var e = Math.min(c, 100); e !== 0 && i.set("scrollpct", e); c = 0;
                }, v); return {
                    analyze: function M(e) {
                        x.addToBeacon("c.s", S.scrollCount()); x.addToBeacon("c.s.p", S.scrollPct()); x.addToBeacon("c.s.y", S.scrollPixels()); x.addToBeacon("c.s.d", S.scrollDistinct());
                    },
                    stop: function B() {
                        if (n) {
                            clearInterval(n); n = !1;
                        }BOOMR.utils.removeListener(e, "scroll", h);
                    },
                    onBeacon: function y() {
                        O = f = d = l = 0;
                    }
                };
            } function h(e) {
                var t = BOOMR.now(); d++; o < t - p && O++; p = t; var n = Math.ceil(BOOMR.utils.scroll().y); var r = Math.abs(s - n); f += r; i.increment("scroll", r); if (u === 0 || Math.abs(u - n) > a) {
                    i.log(0, t, { y: n }); u = n;
                }c += Math.round(r / g * 100); l += Math.round(r / g * 100); s = n;
            }
        }; var s = function(e, o, a) {
            o.register("click", b); var s = 10; var u = 3; var c = 0; var l = 0; var d = 0; var f = 0; var O = 0; var p = null; function t(e) {
                var t = BOOMR.now(); var n = e.clientX; var r = e.clientY; c++; var i = Math.round(Math.sqrt(Math.pow(O - r, 2) + Math.pow(f - n, 2))); if (p === e.target || i <= s) {
                    if (u <= ++l + 1) {
                        d++; BOOMR.fireEvent("rage_click", e);
                    }
                }
                else {
                    l = 0;
                }f = n; O = r; p = e.target; o.increment("click"); o.log(1, t, { x: n, y: r }); e.cancelable && a.interact("click", t, e);
            }S.clicksCount = function() {
                return c;
            }; S.clicksRage = function() {
                return d;
            }; BOOMR.utils.addListener(e.document, "click", t, w); return {
                analyze: function n(e) {
                    x.addToBeacon("c.c", S.clicksCount()); x.addToBeacon("c.c.r", S.clicksRage());
                },
                stop: function r() {
                    BOOMR.utils.removeListener(e.document, "click", t);
                },
                onBeacon: function i() {
                    d = l = c = 0;
                }
            };
        }; var u = function(e, n, r) {
            n.register("key", b); var i = 0; var o = 0; function t(e) {
                var t = BOOMR.now(); i++; e.keyCode === 27 && o++; n.increment("key"); n.log(3, t); e.cancelable && r.interact("key", t, e);
            }S.keyCount = function() {
                return i;
            }; S.keyEscapes = function() {
                return o;
            }; BOOMR.utils.addListener(e.document, "keydown", t, w); return {
                analyze: function a(e) {
                    x.addToBeacon("c.k", S.keyCount()); x.addToBeacon("c.k.e", S.keyEscapes());
                },
                stop: function s() {
                    BOOMR.utils.removeListener(e.document, "keydown", t);
                },
                onBeacon: function u() {
                    o = i = 0;
                }
            };
        }; var c = function(e, i, t) {
            i.register("mouse", b); i.register("mousepct", _); var o = 0; var a = 0; var n = 0; var r = 0; var s = 0; var u = 0; var c = 0; var l = !1; var d = !1; var f = Math.round(Math.sqrt(Math.pow(BOOMR.utils.windowHeight(), 2) + Math.pow(BOOMR.utils.windowWidth(), 2))); function O(e) {
                var t = e.clientX; var n = e.clientY; var r = Math.round(Math.sqrt(Math.pow(a - n, 2) + Math.pow(o - t, 2))); var e = Math.round(r / f * 100); s += e; u += e; c += r; o = t; a = n; i.increment("mouse", r);
            }S.mousePct = function() {
                return u;
            }; S.mousePixels = function() {
                return c;
            }; l = setInterval(function p() {
                var e = Math.min(s, 100); e !== 0 && i.set("mousepct", e); s = 0;
            }, v); d = setInterval(function m() {
                if (n !== o || r !== a) {
                    if (Math.round(Math.sqrt(Math.pow(r - a, 2) + Math.pow(n - o, 2))) >= 10) {
                        i.log(2, BOOMR.now(), { x: o, y: a }); n = o; r = a;
                    }
                }
            }, 250); BOOMR.utils.addListener(e.document, "mousemove", O, w); return {
                analyze: function g(e) {
                    x.addToBeacon("c.m.p", S.mousePct()); x.addToBeacon("c.m.n", S.mousePixels());
                },
                stop: function h() {
                    if (l) {
                        clearInterval(l); l = !1;
                    } if (d) {
                        clearInterval(d); d = !1;
                    }BOOMR.utils.removeListener(e.document, "mousemove", O);
                },
                onBeacon: function R() {
                    c = u = 0;
                }
            };
        }; var l = function(i, o, e) {
            o.register("inter", b); o.register("interdly", b); var a = e; var s = 0; var u = null; var c = 0; var l = 0; var d = 0; var f = 0; var O = !0; var p = 0; var m = 0; var g = !1; var h = !1; var R = !1; var n = !1; function t() {
                if (g) {
                    clearTimeout(g); g = !1;
                } if (h) {
                    clearTimeout(h); h = !1;
                }
            } function M() {
                BOOMR.sendBeaconWhenReady({ "rt.start": "manual", "http.initiator": "interaction", "rt.tstart": p, "rt.end": m }, function() {
                    t(); BOOMR.fireEvent("interaction");
                }, x);
            }S.interactionDelayed = function() {
                return d;
            }; S.interactionDelayedTime = function() {
                return Math.ceil(f);
            }; S.interactionAvgDelay = function() {
                if (c > 0) {
                    return Math.ceil(l / c);
                }
            }; S.timeToFirstInteraction = function() {
                if (s) {
                    return s - T;
                }
            }; S.firstInputDelay = function() {
                if (u !== null) {
                    return u;
                }
            }; BOOMR.subscribe("spa_init", function r() {
                R = !0; t();
            }, null, x); return {
                interact: function B(e, t, n) {
                    var r = 0; BOOMR.hrNow(); t = t || BOOMR.now(); if (O) {
                        c++; s = s || (n && n.timeStamp ? n.timeStamp + T : t); if (n && n.timeStamp && (!x.isSafari || i === window)) {
                            r = n.timeStamp > 14e11 ? t - n.timeStamp : BOOMR.hrNow() - n.timeStamp; l += r; u === null && (u = Math.ceil(r)); if (r > 50) {
                                o.increment("interdly"); d++; f += r;
                            }
                        }o.increment("inter"); if (!R && x.afterOnloadMonitoring) {
                            m = BOOMR.now(); if (!p) {
                                p = m; h = setTimeout(M, 3e4);
                            } if (g) {
                                clearTimeout(g); g = !1;
                            }g = setTimeout(M, a);
                        }
                    }
                },
                analyze: function y(e) {
                    var t; x.addToBeacon("c.i.dc", S.interactionDelayed()); x.addToBeacon("c.i.dt", S.interactionDelayedTime()); x.addToBeacon("c.i.a", S.interactionAvgDelay()); if (!n && (t = (t = BOOMR.plugins.EventTiming && BOOMR.plugins.EventTiming.is_enabled() ? BOOMR.plugins.EventTiming.metrics.firstInputDelay() : t) || u === null ? t : S.firstInputDelay())) {
                        x.addToBeacon("c.fid", Math.ceil(t), !0); x.addToBeacon("c.ttfi", BOOMR.plugins.EventTiming.metrics.timeToFirstInteraction() || S.timeToFirstInteraction()); n = !0;
                    }
                },
                stop: function v() {
                    O = !1;
                },
                onBeacon: function _() {
                    m = p = l = c = d = f = 0; R = !1; t();
                }
            };
        }; var d = function(e, t, n) {
            var r; var i; var o = !0; function a() {
                if (o) {
                    n.interact("pd", r, i); i = r = null; BOOMR.utils.removeListener(window, "pointerup", a);
                }
            } function s(e) {
                if (o && e.cancelable) {
                    r = BOOMR.now(); i = e; BOOMR.utils.addListener(window, "pointerup", a, w);
                }
            } function u() {
                o = !1; BOOMR.utils.removeListener(window, "pointerdown", s); BOOMR.utils.removeListener(window, "pointerup", a); BOOMR.utils.removeListener(window, "pointercancel", u);
            }BOOMR.utils.addListener(window, "pointerdown", s, w); BOOMR.utils.addListener(window, "pointercancel", u, w); return { stop: u };
        }; var f = function(e, t, n) {
            var r = !0; function i(e) {
                if (r && e.cancelable) {
                    var t = BOOMR.now(); n.interact("md", t, e);
                }
            }BOOMR.utils.addListener(window, "mousedown", i, w); return {
                stop: function o() {
                    r = !1; BOOMR.utils.removeListener(window, "mousedown", i);
                }
            };
        }; var O = function(e, t, n) {
            var r = !0; function i(e) {
                if (r && e.cancelable) {
                    var t = BOOMR.now(); n.interact("ts", t, e);
                }
            }BOOMR.utils.addListener(window, "touchstart", i, w); return {
                stop: function o() {
                    r = !1; BOOMR.utils.removeListener(window, "touchstart", i);
                }
            };
        }; var p = function(e, n, t) {
            n.register("vis", b); var r = { visible: 0, hidden: 1, prerender: 2, unloaded: 3 }; var i = !0; BOOMR.subscribe("visibility_changed", function(e) {
                var t = BOOMR.now(); if (i) {
                    n.increment("vis"); n.log(4, t, { s: r[BOOMR.visibilityState()] });
                }
            }); return {
                stop: function o() {
                    i = !1;
                }
            };
        }; var m = function(e, i, t) {
            i.register("orn", b); var o = !0; function n(e) {
                var t = BOOMR.now(); var n = window.orientation; if (o) {
                    i.increment("orn"); var r = window.screen && (screen.orientation || screen.msOrientation || screen.mozOrientation || {}); typeof (n = r && typeof r.angle === "number" ? screen.orientation.angle : n) === "number" && i.log(5, t, { a: n });
                }
            }BOOMR.utils.addListener(e, "orientationchange", n, w); return {
                stop: function r() {
                    o = !1; BOOMR.utils.removeListener(e, "orientationchange", n);
                }
            };
        }; var g = function(e, t) {
            t.register("mem", M, !0); t.register("bat", _, !0); t.register("domsz", M, !0); t.register("domln", M, !0); t.register("mut", b); var n; var r = e.document; var i = !0; var o = !1; var a = null; var s = 0; var u = 0; var c = r.getElementsByTagName("*"); function l() {
                i && a && t.set("bat", a.level);
            }o = setInterval(function d() {
                var e = E && E.memory && E.memory.usedJSHeapSize; e && t.set("mem", e); u = c.length; t.set("domsz", r.documentElement.innerHTML.length); t.set("domln", u); if (s > 0) {
                    e = Math.min(Math.round(s / u * 100), 100); t.set("mut", e); s = 0;
                }
            }, 1e3); e.navigator && typeof e.navigator.getBattery === "function" && e.navigator.getBattery().then(function(e) {
                (a = e).onlevelchange && (a.onlevelchange = l);
            }); BOOMR.utils.isMutationObserverSupported() && (n = BOOMR.utils.addObserver(r, { childList: !0, subtree: !0 }, null, function f(e) {
                e.forEach(function(e) {
                    if (e.type !== "childList") {
                        return !0;
                    } for (var t = 0; t < e.addedNodes.length; t++) {
                        var n = e.addedNodes[t]; s++; s += n.getElementsByTagName ? n.getElementsByTagName("*").length : 0;
                    }
                }); return !0;
            }, null, this)); return {
                stop: function O() {
                    i = !1; if (o) {
                        clearInterval(o); o = !1;
                    } if (n && n.observer) {
                        n.observer.disconnect(); n = null;
                    }a && a.onlevelchange && (a.onlevelchange = null); c = null;
                }
            };
        }; var x = {
            monitorLongTasks: !0,
            monitorPageBusy: !0,
            monitorFrameRate: !0,
            monitorInteractions: !0,
            monitorStats: !1,
            monitorLayoutShifts: !0,
            afterOnload: !1,
            afterOnloadMaxLength: 6e4,
            afterOnloadMinWait: 5e3,
            waitAfterOnload: !1,
            ttiWaitForFrameworkReady: !1,
            ttiWaitForHeroImages: !1,
            sendLog: !0,
            sendTimeline: !0,
            logMaxEntries: 100,
            initialized: !1,
            complete: !1,
            isSpa: !1,
            firedPageReady: !1,
            afterOnloadMonitoring: !1,
            frameworkReady: null,
            timeline: null,
            ttiMethod: null,
            longTaskMonitor: null,
            pageBusyMonitor: null,
            frameRateMonitor: null,
            interactionMonitor: null,
            scrollMonitor: null,
            clickMonitor: null,
            keyMonitor: null,
            mouseMonitor: null,
            visibilityMonitor: null,
            orientationMonitor: null,
            touchStartMonitor: null,
            mouseDownMonitor: null,
            pointerDownMonitor: null,
            statsMonitor: null,
            layoutShiftMonitor: null,
            monitors: ["timeline", "longTaskMonitor", "pageBusyMonitor", "frameRateMonitor", "scrollMonitor", "keyMonitor", "clickMonitor", "mouseMonitor", "interactionMonitor", "visibilityMonitor", "orientationMonitor", "statsMonitor", "layoutShiftMonitor", "touchStartMonitor", "mouseDownMonitor", "pointerDownMonitor"],
            timeOfLastBeacon: 0,
            hasAddedDataToBeacon: !1,
            isSafari: window && window.navigator && window.navigator.vendor && window.navigator.vendor.indexOf("Apple") !== -1,
            onBeforeBeacon: function() {
                x.runAllAnalyzers();
            },
            runAllAnalyzers: function() {
                var e; var t; if (!x.hasAddedDataToBeacon) {
                    for (e = 0; e < x.monitors.length; e++) {
                        (t = x[x.monitors[e]]) && typeof t.analyze === "function" && t.analyze(x.timeOfLastBeacon);
                    }x.addToBeacon("c.lb", x.timeOfLastBeacon ? x.timeOfLastBeacon.toString(36) : 0); x.timeOfLastBeacon = BOOMR.now(); x.hasAddedDataToBeacon = !0;
                }
            },
            onBeacon: function(e) {
                var t; if (!e || !(typeof e.early !== "undefined" || e["http.initiator"] && e["http.initiator"].indexOf("api_custom_") === 0)) {
                    for (t = 0; t < x.monitors.length; t++) {
                        var n = x[x.monitors[t]]; if (n) {
                            x.afterOnload || typeof n.stop === "function" && n.stop(); typeof n.onBeacon === "function" && n.onBeacon();
                        }
                    }x.hasAddedDataToBeacon = !1;
                }
            },
            onXhrLoad: function(e) {
                e && BOOMR.utils.inArray(e.initiator, BOOMR.constants.BEACON_TYPE_SPAS) && (x.isSpa = !0); e && e.initiator === "spa_hard" && x.onPageReady();
            },
            onPageReady: function() {
                x.firedPageReady = !0; if (x.afterOnload && x.monitorInteractions) {
                    x.afterOnloadMonitoring = !0; x.isSpa || typeof x.afterOnloadMaxLength !== "number" || setTimeout(function() {
                        x.afterOnloadMonitoring = !1;
                    }, x.afterOnloadMaxLength);
                } if (x.waitAfterOnload) {
                    var e = BOOMR.now(); setTimeout(function t() {
                        if (BOOMR.now() - e > x.waitAfterOnload) {
                            x.complete = !0; BOOMR.sendBeacon();
                        }
                        else {
                            x.timeline.analyze(); if (S.timeToInteractive()) {
                                x.complete = !0; BOOMR.sendBeacon();
                            }
                            else {
                                setTimeout(t, 500);
                            }
                        }
                    }, 500);
                }
                else {
                    x.complete = !0;
                }
            },
            addToBeacon: function(e, t, n) {
                t !== 0 && void 0 !== t || n ? BOOMR.addVar(e, t, !0) : BOOMR.removeVar(e);
            }
        }; BOOMR.plugins.Continuity = {
            init: function(e) {
                BOOMR.utils.pluginConfig(x, e, "Continuity", ["monitorLongTasks", "monitorPageBusy", "monitorFrameRate", "monitorInteractions", "monitorStats", "afterOnload", "afterOnloadMaxLength", "afterOnloadMinWait", "waitAfterOnload", "ttiWaitForFrameworkReady", "ttiWaitForHeroImages", "sendLog", "logMaxEntries", "sendTimeline", "monitorLayoutShifts"]); if (x.initialized) {
                    return this;
                } x.initialized = !0; x.timeline = new t(BOOMR.now()); if (BOOMR.window) {
                    if (x.monitorLongTasks && BOOMR.window.PerformanceObserver && BOOMR.window.PerformanceLongTaskTiming) {
                        x.longTaskMonitor = new r(BOOMR.window, x.timeline); x.ttiMethod = "lt";
                    } if (x.monitorFrameRate && typeof BOOMR.window.requestAnimationFrame === "function") {
                        x.frameRateMonitor = new o(BOOMR.window, x.timeline); x.ttiMethod || (x.ttiMethod = "raf");
                    } if (x.monitorPageBusy && (!BOOMR.window.PerformanceObserver || !BOOMR.window.PerformanceLongTaskTiming || !x.monitorLongTasks)) {
                        x.pageBusyMonitor = new i(BOOMR.window, x.timeline); x.ttiMethod || (x.ttiMethod = "b");
                    } if (x.monitorInteractions) {
                        x.interactionMonitor = new l(BOOMR.window, x.timeline, x.afterOnloadMinWait); x.scrollMonitor = new a(BOOMR.window, x.timeline, x.interactionMonitor); x.keyMonitor = new u(BOOMR.window, x.timeline, x.interactionMonitor); x.clickMonitor = new s(BOOMR.window, x.timeline, x.interactionMonitor); x.mouseMonitor = new c(BOOMR.window, x.timeline, x.interactionMonitor); x.visibilityMonitor = new p(BOOMR.window, x.timeline, x.interactionMonitor); x.orientationMonitor = new m(BOOMR.window, x.timeline, x.interactionMonitor); x.touchStartMonitor = new O(BOOMR.window, x.timeline, x.interactionMonitor); x.mouseDownMonitor = new f(BOOMR.window, x.timeline, x.interactionMonitor); x.pointerDownMonitor = new d(BOOMR.window, x.timeline, x.interactionMonitor);
                    }x.monitorStats && (x.statsMonitor = new g(BOOMR.window, x.timeline, x.interactionMonitor)); x.monitorLayoutShifts && BOOMR.window.PerformanceObserver && (x.layoutShiftMonitor = new n(BOOMR.window));
                }BOOMR.addVar("c.e", T.toString(36)); BOOMR.addVar("c.tti.m", x.ttiMethod); BOOMR.subscribe("before_beacon", x.onBeforeBeacon, null, x); BOOMR.subscribe("beacon", x.onBeacon, null, x); BOOMR.subscribe("page_ready", x.onPageReady, null, x); BOOMR.subscribe("xhr_load", x.onXhrLoad, null, x); return this;
            },
            is_complete: function(e) {
                return x.complete || e && (e["http.initiator"] === "error" || typeof e.early !== "undefined");
            },
            frameworkReady: function() {
                x.frameworkReady = BOOMR.now();
            },
            metrics: S
        };
    }
}()); !(function() {
    if (!BOOMR.plugins.IFrameDelay) {
        var r = BOOMR.window; var i = {
            initialized: !1,
            registerParent: !1,
            monitoredCount: 0,
            finishedCount: 0,
            runningCount: 0,
            runningFrames: {},
            loadingIntervalID: undefined,
            loadedIntervalID: undefined,
            loadEnd: 0,
            messages: { start: "boomrIframeLoading", done: "boomrIframeLoaded", startACK: "boomrIframeLoadingACK", doneACK: "boomrIframeLoadedACK" },
            onIFrameMessageAsParent: function(e) {
                var t; if (e && e.data && typeof e.data === "string" && e.data.charAt(0) === "{" && e.source) {
                    try {
                        t = JSON.parse(e.data);
                    }
                    catch (n) {
                        return;
                    } if (t.msg === i.messages.start) {
                        if (!i.runningFrames[t.pid]) {
                            e.source.postMessage(JSON.stringify({ msg: i.messages.startACK }), e.origin); i.runningCount += 1; i.runningFrames[t.pid] = 1;
                        }
                    }
                    else if (t.msg === i.messages.done) {
                        e.source.postMessage(JSON.stringify({ msg: i.messages.doneACK }), e.origin); --i.runningCount; i.finishedCount += 1; t.loadEnd > i.loadEnd && (i.loadEnd = t.loadEnd); i.checkCompleteness();
                    }
                }
            },
            onIFrameMessageAsChild: function(e) {
                var t; if (e && e.data && typeof e.data === "string" && e.data.charAt(0) === "{" && e.source) {
                    try {
                        t = JSON.parse(e.data);
                    }
                    catch (n) {
                        return;
                    } if (t.msg === i.messages.startACK) {
                        clearInterval(i.loadingIntervalID); i.loadingIntervalID = undefined;
                    }
                    else if (t.msg === i.messages.doneACK) {
                        clearInterval(i.loadedIntervalID); i.loadedIntervalID = undefined;
                    }
                }
            },
            checkCompleteness: function() {
                if (i.is_complete()) {
                    BOOMR.addVar("ifdl.done", BOOMR.now()); BOOMR.addVar("ifdl.ct", i.finishedCount); BOOMR.addVar("ifdl.r", i.runningCount); BOOMR.addVar("ifdl.mon", i.monitoredCount); BOOMR.hasBrowserOnloadFired() ? BOOMR.page_ready(i.loadEnd > 0 ? i.loadEnd : undefined) : BOOMR.attach_page_ready(function() {
                        BOOMR.page_ready(undefined, !0);
                    });
                }
            },
            is_complete: function() {
                return !(i.enabled && !i.registerParent) || i.finishedCount >= i.monitoredCount && i.runningCount === 0;
            }
        }; BOOMR.plugins.IFrameDelay = {
            init: function(e) {
                BOOMR.utils.pluginConfig(i, e, "IFrameDelay", ["enabled", "registerParent", "monitoredCount"]); if (i.initialized) {
                    return this;
                } i.initialized = !0; if (this.is_supported()) {
                    if (i.registerParent) {
                        BOOMR.utils.addListener(window, "message", i.onIFrameMessageAsChild); function t() {
                            r.parent.postMessage(JSON.stringify({ msg: i.messages.start, pid: BOOMR.pageId }), "*");
                        }t(); i.loadingIntervalID = setInterval(t, 250); BOOMR.subscribe("page_load_beacon", function(e) {
                            var t = e && e["rt.end"] ? e["rt.end"] : BOOMR.now(); function n() {
                                i.loadingIntervalID || r.parent.postMessage(JSON.stringify({ msg: i.messages.done, pid: BOOMR.pageId, loadEnd: t }), "*");
                            }n(); i.loadedIntervalID = setInterval(n, 250);
                        });
                    }
                    else if (!i.registerParent && i.monitoredCount && i.monitoredCount > 0) {
                        BOOMR.utils.addListener(r, "message", i.onIFrameMessageAsParent);
                    }
                    else {
                        i.finishedCount = i.monitoredCount = i.runningCount = 0; i.enabled = !1;
                    }
                }
                else {
                    i.enabled = !1;
                } return this;
            },
            is_complete: function() {
                return i.is_complete();
            },
            is_supported: function() {
                return BOOMR.utils.hasPostMessageSupport() && window.JSON;
            }
        };
    }
}()); !(function() {
    var l; var a; var d; var O; var p; var f = ["uninitialized", "open", "responseStart", "domInteractive", "responseEnd"]; if (!BOOMR.plugins.AutoXHR && (l = BOOMR.window) && l.XMLHttpRequest && (new l.XMLHttpRequest()).addEventListener) {
        s.stop = function() {
            s.pause(); s.observer = null;
        }; s.pause = function() {
            if (s.observer && s.observer.observer && !s.isPaused) {
                s.isPaused = !0; s.observer.observer.disconnect();
            }
        }; s.resume = function() {
            if (s.observer && s.observer.observer && s.isPaused) {
                s.isPaused = !1; s.observer.observer.observe(a, s.observer.config);
            }
        }; s.start = function() {
            if (!s.observer) {
                var e = { childList: !0, attributes: !0, subtree: !0, attributeFilter: ["src", "href"] }; if (s.observer = BOOMR.utils.addObserver(a, e, null, d.mutation_cb, null, d)) {
                    s.observer.config = e; BOOMR.subscribe("page_unload", s.stop, null, s);
                }
            }
        }; s.prototype.addEvent = function(e) {
            for (var t, n, r = { type: e.initiator, resource: e, nodes_to_wait: 0, total_nodes: 0, resources: [], xhr_resources: [], complete: !1, aborted: !1, firedEarlyBeacon: !1 }, i = this.pending_events.length, o = this, a = i - 1; a >= 0; a--) {
                if (this.pending_events[a] && !this.pending_events[a].complete) {
                    t = this.pending_events[a]; n = a; break;
                }
            } if (t) {
                if (t.type === "click" && p.singlePageApp && p.spaStartFromClick && r.type === "xhr") {
                    r.resource.fromClick = !0; r.resource.timing.click = t.resource.timing.requestStart; r.resource.timing.requestStart = t.resource.timing.requestStart; r.interesting = t.interesting || 0; r.total_nodes += t.total_nodes; r.resources = t.resources.concat(r.resources); r.xhr_resources = t.xhr_resources.concat(r.xhr_resources); this.pending_events[n] = undefined; this.watch--;
                }
                else if ((t.type === "click" || t.resource.fromClick) && p.singlePageApp && p.spaStartFromClick && r.type === "spa") {
                    r.resource.timing = t.resource.timing; r.interesting = t.interesting || 0; r.total_nodes += t.total_nodes; r.resources = t.resources.concat(r.resources); t.resource.url && r.xhr_resources.push(t.resource.url); r.xhr_resources = r.xhr_resources.concat(t.xhr_resources); this.pending_events[n] = undefined; this.watch--;
                }
                else if (t.type === "click") {
                    if (t.nodes_to_wait === 0 || !t.resource.url) {
                        this.pending_events[n] = undefined; this.watch--;
                    }
                }
                else if (t.type === "xhr") {
                    if (r.type === "click") {
                        return null;
                    } if (r.type === "xhr") {
                        d.add_event_resource(e); return null;
                    }
                }
                else if (BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                    if (r.type === "xhr") {
                        d.add_event_resource(e); return null;
                    } if (BOOMR.utils.inArray(r.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                        t.resource.timing.loadEventEnd = BOOMR.now(); t.aborted = !0; this.sendEvent(n);
                    }
                }
            } if (r.type === "click") {
                if (!s.observer) {
                    return null;
                } this.setTimeout(p.xhrIdleTimeout, i);
            }
            else if (r.type === "xhr") {
                r.nodes_to_wait++; r.total_nodes++; r.ignoreMO = !0;
            }
            else if (BOOMR.utils.inArray(r.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                s.start(); if (e.wait) {
                    r.nodes_to_wait++; r.total_nodes++; e.waitComplete = function() {
                        o.load_finished(i); e.waitComplete = undefined;
                    };
                }
                else {
                    this.setTimeout(p.spaIdleTimeout, i);
                }
            } this.watch++; this.pending_events.push(r); return e.index = i;
        }; s.prototype.sendEvent = function(e) {
            var t = this.pending_events[e]; var n = this; BOOMR.now(); if (t && !t.complete) {
                this.clearTimeout(e); if (BOOMR.readyToSend()) {
                    t.complete = !0; this.watch--; BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS) && (t.resource.url = a.URL); if (t.type !== "spa" || t.total_nodes !== 0 || t.resource.url !== n.lastSpaLocation) {
                        if (t.type !== "click" || t.total_nodes !== 0 && t.resource.url) {
                            t.type === "click" && p.singlePageApp && p.spaStartFromClick && (t.type = t.resource.initiator = "xhr"); if (!p.xhrRequireChanges || t.type !== "xhr" || t.total_nodes !== 1 || typeof t.interesting !== "undefined" && t.interesting !== 0 || u(t.resource.url, p.alwaysSendXhr)) {
                                if (BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                                    n.lastSpaLocation = t.resource.url; if (!t.forced) {
                                        t.type === "spa" && t.total_nodes === 0 && (t.resource.timing.loadEventEnd = t.resource.timing.requestStart + 1); if (t.type === "spa_hard") {
                                            var r = BOOMR.getPerformance(); r && r.timing && r.timing.loadEventEnd && t.resource.timing.loadEventEnd && t.resource.timing.loadEventEnd < r.timing.loadEventEnd && (t.resource.timing.loadEventEnd = r.timing.loadEventEnd);
                                        }
                                    }
                                } this.sendResource(t.resource, e);
                            }
                            else {
                                this.pending_events[e] = undefined;
                            }
                        }
                        else {
                            this.pending_events[e] = undefined;
                        }
                    }
                    else {
                        BOOMR.fireEvent("spa_cancel"); this.pending_events[e] = undefined;
                    }
                }
                else {
                    setTimeout(function() {
                        n.sendEvent(e);
                    }, 500);
                }
            }
        }; s.prototype.sendResource = function(n, r) {
            var i = this; var e = i.pending_events[r]; var o = n.timing ? n.timing.requestStart : undefined; var t = function(e, t) {
                e && (n.timing.loadEventEnd = t || BOOMR.now()); BOOMR.real_sendBeacon(); n.onComplete && n.onComplete(n); BOOMR.plugins.ResourceTiming && BOOMR.plugins.ResourceTiming.is_enabled() && n.timing && n.timing.requestStart && (n.restiming = BOOMR.plugins.ResourceTiming.getCompressedResourceTiming(n.timing.requestStart, n.timing.loadEventEnd)); if (BOOMR.utils.inArray(n.initiator, BOOMR.constants.BEACON_TYPE_SPAS)) {
                    i.calculateSpaTimings(n); if (typeof r === "number" && i.pending_events[r].aborted) {
                        BOOMR.addVar("pgu", a.URL, !0); BOOMR.addVar("rt.quit", "", !0); BOOMR.addVar("rt.abld", "", !0);
                    }
                }BOOMR.responseEnd(n, o, n); typeof r === "number" && (i.pending_events[r] = undefined);
            }; n.initiator !== "spa_hard" || e && e.aborted || BOOMR.hasBrowserOnloadFired() ? t(!1) : BOOMR.utils.addListener(l, "load", function() {
                var e = BOOMR.now(); BOOMR.setImmediate(function() {
                    t(!0, e);
                });
            });
        }; s.prototype.calculateSpaTimings = function(e) {
            var t = BOOMR.getPerformance(); if (t && t.timing) {
                if (e.initiator === "spa_hard") {
                    e.timing.responseEnd = t.timing.responseStart; e.timing.fetchStart = t.timing.navigationStart;
                }
                else if (BOOMR.plugins.ResourceTiming && BOOMR.plugins.ResourceTiming.is_supported()) {
                    var n = BOOMR.plugins.ResourceTiming.getFilteredResourceTiming(e.timing.requestStart, e.timing.loadEventEnd, p.spaBackEndResources).entries; var r = Math.round(e.timing.loadEventEnd - e.timing.requestStart); if (n && n.length) {
                        for (var i = e.timing.loadEventEnd - t.timing.navigationStart, o = 0; o < n.length; o++) {
                            if (n[o].responseStart > i) {
                                n[o].responseStart = i; n[o].responseEnd = i;
                            }
                            else {
                                n[o].responseEnd > i && (n[o].responseEnd = i);
                            }
                        } var a = Math.round(BOOMR.plugins.ResourceTiming.calculateResourceTimingUnion(n)); var t = r - a; a < 0 || r < 0 || t < 0 ? BOOMR.addError("Incorrect SPA time calculation") : e.timers = { t_resp: a, t_page: t, t_done: r };
                    }
                    else {
                        e.timers = { t_resp: 0, t_page: r, t_done: r };
                    }
                }
            }
        }; s.prototype.setTimeout = function(e, t) {
            var n = this; if (e) {
                this.clearTimeout(t); this.timer = setTimeout(function() {
                    n.timedout(t);
                }, e);
            }
        }; s.prototype.timedout = function(e) {
            var t; this.clearTimeout(e); (t = this.pending_events[e]) && (!BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS) || BOOMR.hasBrowserOnloadFired() ? t.nodes_to_wait === 0 && this.sendEvent(e) : this.setTimeout(p.spaIdleTimeout, e));
        }; s.prototype.clearTimeout = function(e) {
            if (this.timer && e === this.pending_events.length - 1) {
                clearTimeout(this.timer); this.timer = null;
            }
        }; s.prototype.load_cb = function(e, t) {
            var n = BOOMR.now(); var r = e.target || e.srcElement; if (r && r._bmr) {
                e = r._bmr.idx; t = void 0 !== t ? t : r._bmr.res || 0; if (!r._bmr.end[t]) {
                    r._bmr.end[t] = n; this.load_finished(e, n);
                }
            }
        }; s.prototype.monitorMO = function(e) {
            e = this.pending_events[e]; e && delete e.ignoreMO;
        }; s.prototype.load_finished = function(e, t) {
            var n = this.pending_events[e]; if (n) {
                n.nodes_to_wait--; if (n.nodes_to_wait === 0) {
                    n.resource.timing.loadEventEnd = t || BOOMR.now(); if (e === this.pending_events.length - 1) {
                        if (BOOMR.utils.inArray(n.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                            if (!n.firedEarlyBeacon && BOOMR.plugins.Early && BOOMR.plugins.Early.is_supported()) {
                                if (this.timerEarlyBeacon) {
                                    clearTimeout(this.timerEarlyBeacon); this.timerEarlyBeacon = null;
                                } this.timerEarlyBeacon = setTimeout(function() {
                                    d.timerEarlyBeacon = null; if (!n.firedEarlyBeacon && n.nodes_to_wait === 0) {
                                        n.firedEarlyBeacon = !0; BOOMR.plugins.Early.sendEarlyBeacon(n.resource, n.type);
                                    }
                                }, 100);
                            } this.setTimeout(p.spaIdleTimeout, e);
                        }
                        else {
                            this.setTimeout(p.xhrIdleTimeout, e);
                        }
                    }
                    else {
                        this.sendEvent(e);
                    }
                }
            }
        }; s.prototype.wait_for_node = function(t, n) {
            var r; var i; var o; var e; var a; var s; var u; var c; var l = this; var d = !1; var f = !1; if (t && t.nodeName && (t.nodeName.toUpperCase().match(/^(IMG|IFRAME|IMAGE)$/) || t.nodeName.toUpperCase() === "LINK" && t.rel && t.rel.match(/\bstylesheet\b/i))) {
                t._bmr && typeof t._bmr.res === "number" && t._bmr.end[t._bmr.res] && (f = !0); e = t.src || typeof t.getAttribute === "function" && t.getAttribute("xlink:href") || t.href; t._bmr && t._bmr.url !== e && (f = !0); if (f && typeof t._bmr.listener === "function") {
                    l.load_cb({ target: t, type: "changed" }); t.removeEventListener("load", t._bmr.listener); t.removeEventListener("error", t._bmr.listener); delete t._bmr.listener;
                } if (!e || e.match(/^(about:|javascript:|data:)/i)) {
                    return !1;
                } if (t.nodeName === "IMG") {
                    if (t.naturalWidth && !f) {
                        return !1;
                    } if (typeof t.getAttribute === "function" && t.getAttribute("src") === "") {
                        return !1;
                    } if (t.loading === "lazy") {
                        return !1;
                    }
                } if (t.nodeName === "IFRAME" && f) {
                    return !1;
                } if (typeof t.getAttribute === "function") {
                    s = parseInt(t.getAttribute("height"), 10); u = parseInt(t.getAttribute("width"), 10);
                }isNaN(s) && (s = !t.style || t.style.height !== "0" && t.style.height !== "0px" && t.style.height !== "1px" ? undefined : 0); isNaN(u) && (u = !t.style || t.style.width !== "0" && t.style.width !== "0px" && t.style.width !== "1px" ? undefined : 0); if (!isNaN(s) && s <= 1 && !isNaN(u) && u <= 1) {
                    return !1;
                } if (s === 0 || u === 0) {
                    return !1;
                } if (t.style && (t.style.display === "none" || t.style.visibility === "hidden" || t.style.opacity === "0")) {
                    return !1;
                } if (p.domExcludeFilter(t)) {
                    return !1;
                } if (!(u = this.pending_events[n])) {
                    return !1;
                } a = u.resources.length; u.urls || (u.urls = {}); if (u.urls[e]) {
                    return !1;
                } if (!u.resource.url) {
                    O.href = e; if (p.xhrExcludeFilter(O)) {
                        return !1;
                    } u.resource.url = O.href;
                }t._bmr || (t._bmr = { end: {} }); t._bmr.res = a; t._bmr.idx = n; delete t._bmr.end[a]; t._bmr.url = e; c = function(e) {
                    l.load_cb(e, a); t.removeEventListener("load", c); t.removeEventListener("error", c); delete t._bmr.listener;
                }; t._bmr.listener = c; t.addEventListener("load", c); t.addEventListener("error", c); u.nodes_to_wait++; this.clearTimeout(n); u.total_nodes++; u.resources.push(t); u.urls[e] = 1; d = !0;
            }
            else {
                t.nodeType === Node.ELEMENT_NODE && ["IMAGE", "IMG"].forEach(function(e) {
                    if ((r = t.getElementsByTagName(e)) && r.length) {
                        for (i = 0, o = r.length; i < o; i++) {
                            d |= this.wait_for_node(r[i], n);
                        }
                    }
                }, this);
            } return d;
        }; s.prototype.add_event_resource = function(e) {
            var t; var n = this.pending_events.length - 1; if (n < 0) {
                return -1;
            } if (!(t = this.pending_events[n])) {
                return -1;
            } if (!e) {
                return -1;
            } t.xhr_resources.push(e.url); t.nodes_to_wait++; t.total_nodes++; e.index = n; e.node = !0; return n;
        }; s.prototype.mutation_cb = function(e) {
            var i; var o; var a; if (!this.watch) {
                return !0;
            } if ((o = (i = this).pending_events.length - 1) < 0 || !this.pending_events[o]) {
                return !0;
            } if ((a = this.pending_events[o]).ignoreMO) {
                return !0;
            } typeof a.interesting === "undefined" && (a.interesting = !1); if (e && e.length) {
                a.resource.timing.domComplete = BOOMR.now(); e.forEach(function(e) {
                    var t; var n; var r; if (e.type === "attributes") {
                        a.interesting |= i.wait_for_node(e.target, o);
                    }
                    else if (e.type === "childList") {
                        n = e.addedNodes.length; for (t = 0; t < n; t++) {
                            a.interesting |= i.wait_for_node(e.addedNodes[t], o);
                        }n = e.removedNodes.length; for (t = 0; t < n; t++) {
                            (r = e.removedNodes[t]).nodeName === "IFRAME" && r._bmr && i.load_cb({ target: r, type: "removed" });
                        }
                    }
                });
            } if (!a.interesting && !a.timeoutExtended) {
                this.setTimeout(1e3, o); a.timeoutExtended = !0;
            } return !0;
        }; s.prototype.queue_is_empty = function() {
            return this.nodesWaitingFor() === 0;
        }; s.prototype.nodesWaitingFor = function(e) {
            if (this.pending_events.length === 0) {
                return 0;
            } void 0 === e && (e = this.pending_events.length - 1); return (e = this.pending_events[e]) ? e.nodes_to_wait : 0;
        }; s.prototype.completeEvent = function(e) {
            var t; var n = BOOMR.now(); if (this.pending_events.length !== 0) {
                void 0 === e && (e = this.pending_events.length - 1); if (t = this.pending_events[e]) {
                    t.resource.timing.loadEventEnd = n; t.forced = !0; this.sendEvent(e);
                }
            }
        }; d = new s(); p = {
            spaBackEndResources: ["xmlhttprequest", "script", "fetch"],
            alwaysSendXhr: !1,
            xhrExcludeFilters: [],
            domExcludeFilters: [],
            initialized: !1,
            captureXhrRequestResponse: !1,
            singlePageApp: !1,
            spaStartFromClick: !1,
            autoXhrEnabled: !1,
            monitorFetch: !1,
            fetchBodyUsedWait: 200,
            spaIdleTimeout: 1e3,
            xhrIdleTimeout: 50,
            xhrRequireChanges: !0,
            xhrExcludeFilter: function(e) {
                var t; var n; if (!e || !e.href) {
                    return !1;
                } for (t = 0; t < p.xhrExcludeFilters.length; t++) {
                    if (typeof p.xhrExcludeFilters[t].cb === "function") {
                        n = p.xhrExcludeFilters[t].ctx; try {
                            if (p.xhrExcludeFilters[t].cb.call(n, e)) {
                                return !0;
                            }
                        }
                        catch (r) {
                            BOOMR.addError(r, "BOOMR.plugins.AutoXHR.impl.xhrExcludeFilter()");
                        }
                    }
                } return !1;
            },
            domExcludeFilter: function(e) {
                for (var t, n = 0; n < p.domExcludeFilters.length; n++) {
                    if (typeof p.domExcludeFilters[n].cb === "function") {
                        t = p.domExcludeFilters[n].ctx; p.domExcludeFilters[n].name; try {
                            if (p.domExcludeFilters[n].cb.call(t, e)) {
                                return !0;
                            }
                        }
                        catch (r) {
                            BOOMR.addError(r, "BOOMR.plugins.AutoXHR.impl.domExcludeFilter()");
                        }
                    }
                } return !1;
            },
            loadFinished: function(t, e) {
                var n; var r; var i; e = e || BOOMR.now(); if (!t.timing.loadEventEnd) {
                    t.status && BOOMR.fireEvent("xhr_error", t); t.timing.loadEventEnd = e; if ((i = BOOMR.getPerformance()) && i.timing) {
                        r = i.timing.navigationStart; if (n = BOOMR.getResourceTiming(t.url, function(e, t) {
                            return e.responseEnd - t.responseEnd;
                        }, function(e) {
                            return Math.ceil(r + e.startTime + 2) >= t.timing.requestStart && e.responseEnd !== 0;
                        })) {
                            e = Math.floor(r + n.startTime); if ((i = Math.floor(r + n.responseEnd)) <= BOOMR.now()) {
                                t.timing.responseEnd = i; t.timing.loadEventEnd < i && (t.timing.loadEventEnd = i); t.fromClick && t.timing.requestStart || (t.timing.requestStart = e); t.timing.fetchStart = e; n.responseStart !== 0 && (t.timing.responseStart = Math.floor(r + n.responseStart)); t.restiming = n;
                            }
                        }
                    }t.node && u(t.url, p.alwaysSendXhr) && d.sendResource(t); if (t.index >= 0) {
                        d.monitorMO(t.index); d.load_finished(t.index, t.timing.responseEnd);
                    }
                }
            }
        }; BOOMR.plugins.AutoXHR = {
            is_complete: function() {
                return !0;
            },
            init: function(e) {
                var t; var n; a = l.document; if (l && a) {
                    O = a.createElement("A"); BOOMR.utils.pluginConfig(p, e, "AutoXHR", ["spaBackEndResources", "alwaysSendXhr", "monitorFetch", "fetchBodyUsedWait", "spaIdleTimeout", "xhrIdleTimeout", "xhrRequireChanges", "spaStartFromClick"]); BOOMR.instrumentXHR = g; BOOMR.uninstrumentXHR = h; BOOMR.instrumentFetch = c; BOOMR.uninstrumentFetch = m; if (!p.initialized) {
                        this.addExcludeFilter(o, null, "shouldExcludeXhr"); p.initialized = !0;
                    } if (e && e.AutoXHR && e.AutoXHR.excludeFilters && e.AutoXHR.excludeFilters.length > 0) {
                        for (n = 0; n < e.AutoXHR.excludeFilters.length; n++) {
                            typeof e.AutoXHR.excludeFilters[n] === "function" ? p.xhrExcludeFilters.push({ cb: e.AutoXHR.excludeFilters[n], ctx: this, name: "unknown XHR filter" }) : p.xhrExcludeFilters.push(e.AutoXHR.excludeFilters[n]);
                        }
                    } if (e && e.AutoXHR && e.AutoXHR.domExcludeFilters && e.AutoXHR.domExcludeFilters.length > 0) {
                        for (n = 0; n < e.AutoXHR.domExcludeFilters.length; n++) {
                            typeof e.AutoXHR.domExcludeFilters[n] === "function" ? p.domExcludeFilters.push({ cb: e.AutoXHR.domExcludeFilters[n], ctx: this, name: "unknown DOM filter" }) : p.domExcludeFilters.push(e.AutoXHR.domExcludeFilters[n]);
                        }
                    } p.autoXhrEnabled = e.instrument_xhr; p.singlePageApp = BOOMR.plugins.SPA && BOOMR.plugins.SPA.isSinglePageApp(e); if (p.alwaysSendXhr && p.autoXhrEnabled && BOOMR.xhr && typeof BOOMR.xhr.stop === "function") {
                        function r(e) {
                            if (e.length) {
                                for (t = 0; t < e.length; t++) {
                                    R(e[t]);
                                }
                            }
                            else {
                                R(e);
                            }
                        } var i = BOOMR.xhr.stop(r); i && i.length && BOOMR.setImmediate(r, i);
                    } if (p.singlePageApp) {
                        p.alwaysSendXhr || (p.autoXhrEnabled = !1); if (p.autoXhrEnabled) {
                            BOOMR.instrumentXHR(); BOOMR.instrumentFetch();
                        }
                    }
                    else if (p.autoXhrEnabled) {
                        BOOMR.instrumentXHR(); BOOMR.instrumentFetch();
                    }
                    else if (!1 === p.autoXhrEnabled) {
                        BOOMR.uninstrumentXHR(); BOOMR.uninstrumentFetch();
                    }BOOMR.registerEvent("xhr_error");
                }
            },
            getMutationHandler: function() {
                return d;
            },
            getPathname: n,
            enableAutoXhr: function() {
                if (!p.autoXhrEnabled) {
                    BOOMR.instrumentXHR(); BOOMR.instrumentFetch();
                }p.autoXhrEnabled = !0;
            },
            addExcludeFilter: function(e, t, n) {
                p.xhrExcludeFilters.push({ cb: e, ctx: t, name: n });
            },
            addDomExcludeFilter: function(e, t, n) {
                p.domExcludeFilters.push({ cb: e, ctx: t, name: n });
            },
            setXhrRequestResponseCapturing: function(e) {
                p.captureXhrRequestResponse = e;
            }
        };
    } function n(e) {
        if (!e) {
            return null;
        } e.href = e.href; e = e.pathname; return e = e.charAt(0) !== "/" ? "/" + e : e;
    } function o(e) {
        var t; if (e.href) {
            if (e.href.match(/^(about:|javascript:|data:)/i)) {
                return !0;
            } if (typeof BOOMR.getBeaconURL === "function" && BOOMR.getBeaconURL() && ((t = e.href.indexOf(BOOMR.getBeaconURL())) === 0 || t === 5 || t === 6)) {
                return !0;
            }
        } return BOOMR.xhr_excludes.hasOwnProperty(e.href) || BOOMR.xhr_excludes.hasOwnProperty(e.hostname) || BOOMR.xhr_excludes.hasOwnProperty(n(e));
    } function s() {
        this.watch = 0; this.timer = null; this.timerEarlyBeacon = null; this.pending_events = []; this.lastSpaLocation = null;
    } function u(e, t) {
        var n; var r; if (t && e) {
            if (typeof t === "boolean") {
                return !0 === t;
            } if (typeof t === "function") {
                try {
                    return !0 === t(e);
                }
                catch (i) {
                    return;
                }
            } if (BOOMR.utils.isArray(t)) {
                for (n = 0; n < t.length; n++) {
                    if (typeof (r = t[n]) === "string" && r === e) {
                        return 1;
                    } if (r instanceof RegExp && r.test(e)) {
                        return 1;
                    }
                }
            }
        }
    } function c() {
        if (p.monitorFetch && typeof l.fetch === "function" && typeof l.Request === "function" && typeof l.Response === "function" && typeof l.Promise === "function" && typeof window.fetch === "function" && !l.fetch.polyfill && (!BOOMR.proxy_fetch || BOOMR.proxy_fetch !== l.fetch)) {
            if (BOOMR.proxy_fetch && BOOMR.orig_fetch && BOOMR.orig_fetch === l.fetch) {
                l.fetch = BOOMR.proxy_fetch;
            }
            else {
                BOOMR.orig_fetch = l.orig_fetch || l.fetch; BOOMR.proxy_fetch = function(e, t) {
                    var n; var r; var i; var o = { timing: {}, initiator: "xhr" }; if (typeof e === "object" && e instanceof l.Request) {
                        n = e.url; r = t && t.method || e.method || "GET"; p.captureXhrRequestResponse && (i = t && t.body || e.body || undefined);
                    }
                    else {
                        n = e; r = t && t.method || "GET"; p.captureXhrRequestResponse && (i = t && t.body || undefined);
                    }O.href = n; if (p.xhrExcludeFilter(O)) {
                        return BOOMR.orig_fetch.apply(l, arguments);
                    } BOOMR.fireEvent("xhr_init", "fetch"); o.url = O.href; o.method = r; o.type = "fetch"; i && (o.requestPayload = i); BOOMR.fireEvent("xhr_send", { resource: o }); d.addEvent(o); try {
                        o.timing.requestStart || (o.timing.requestStart = BOOMR.now()); var a = BOOMR.orig_fetch.apply(this, arguments); function s(r, i, o) {
                            function a() {
                                var e; if (o.fetchResponse && !o.fetchResponse.bodyUsed && p.fetchBodyUsedWait) {
                                    e = BOOMR.now(); o.responseBodyNotUsed = !0; setTimeout(function() {
                                        p.loadFinished(o, e);
                                    }, p.fetchBodyUsedWait);
                                }
                                else {
                                    p.loadFinished(o);
                                }
                            } return function() {
                                var e; var t = r._bmrNextP; try {
                                    e = i.apply(this === window ? l : this, arguments); for (;t && !t._bmrHasOnFulfilled;) {
                                        t = t._bmrNextP;
                                    }t || (e instanceof l.Promise ? e.then = u(e, e.then, o) : a()); return e;
                                }
                                catch (n) {
                                    for (;t && !t._bmrHasOnRejected;) {
                                        t = t._bmrNextP;
                                    }t || a(); throw n;
                                }
                            };
                        } function u(t, n, r) {
                            return t._bmrNextP ? n : function() {
                                var e = Array.prototype.slice.call(arguments); if (e.length > 0) {
                                    if (typeof e[0] === "function") {
                                        e[0] = s(t, e[0], r); t._bmrHasOnFulfilled = !0;
                                    } if (e.length > 1 && typeof e[1] === "function") {
                                        e[1] = s(t, e[1], r); t._bmrHasOnRejected = !0;
                                    }
                                }e = n.apply(t, e); (t._bmrNextP = e).then = u(e, e.then, r); return e;
                            };
                        }a.then = u(a, a.then, o); return a.then(function(e) {
                            var t; var n = !1; var r = !1; e.redirected && (o.responseUrl = e.url); (e.status < 200 || e.status >= 400) && (o.status = e.status); o.fetchResponse = e; o.index >= 0 && d.monitorMO(o.index); if (p.captureXhrRequestResponse && typeof e.clone === "function") {
                                if (t = e.headers.get("content-type")) {
                                    n = t.indexOf("json") !== -1; r = t.indexOf("xml") !== -1;
                                }o.response = {}; try {
                                    e.clone().text().then(function(e) {
                                        o.response.text = e; o.response.raw = e; r && typeof l.DOMParser === "function" && (o.response.xml = (new l.DOMParser()).parseFromString(e, "text/xml"));
                                    }).then(null, function(e) {});
                                }
                                catch (i) {} if (n) {
                                    try {
                                        e.clone().json().then(function(e) {
                                            o.response.json = e;
                                        }).then(null, function(e) {});
                                    }
                                    catch (i) {}
                                }
                            } return e;
                        }, function(e) {
                            !e || e.name !== "AbortError" && e.code !== 20 ? o.status = -998 : o.status = -999; throw e;
                        });
                    }
                    catch (c) {
                        o.status = -997; p.loadFinished(o); throw c;
                    }
                }; BOOMR.utils.overwriteNative(l, "fetch", BOOMR.proxy_fetch);
            }
        }
    } function m() {
        typeof l.fetch === "function" && BOOMR.orig_fetch && BOOMR.orig_fetch !== l.fetch && (l.fetch = BOOMR.orig_fetch);
    } function g() {
        if (!BOOMR.proxy_XMLHttpRequest || BOOMR.proxy_XMLHttpRequest !== l.XMLHttpRequest) {
            if (BOOMR.proxy_XMLHttpRequest && BOOMR.orig_XMLHttpRequest && BOOMR.orig_XMLHttpRequest === l.XMLHttpRequest) {
                l.XMLHttpRequest = BOOMR.proxy_XMLHttpRequest; s.start();
            }
            else {
                BOOMR.orig_XMLHttpRequest = l.orig_XMLHttpRequest || l.XMLHttpRequest; s.start(); !(function e() {
                    BOOMR.subscribe("click", function() {
                        if (!p.singlePageApp || p.spaStartFromClick) {
                            var e = { timing: {}, initiator: "click" }; if (BOOMR.orig_XMLHttpRequest && BOOMR.orig_XMLHttpRequest !== l.XMLHttpRequest) {
                                e.timing.requestStart = BOOMR.now(); d.addEvent(e);
                            }
                        }
                    });
                }()); BOOMR.proxy_XMLHttpRequest = function() {
                    var o = { timing: {}, initiator: "xhr" }; var a = !1; var s = !1; var u = new BOOMR.orig_XMLHttpRequest(); var c = u.open; var t = u.send; u.open = function(e, t, n) {
                        O.href = t; if (p.xhrExcludeFilter(O)) {
                            s = !0; return c.apply(u, arguments);
                        }s = !1; void 0 === n && (n = !0); BOOMR.fireEvent("xhr_init", "xhr"); function r(t, n) {
                            u.addEventListener(t, function() {
                                if (t === "readystatechange") {
                                    o.timing[f[u.readyState]] = BOOMR.now(); if (u.readyState === 4 && u.status !== 0) {
                                        u.responseURL !== o.url && (o.responseUrl = u.responseURL); (u.status < 200 || u.status >= 400) && (o.status = u.status); if (p.captureXhrRequestResponse) {
                                            o.response = { text: u.responseType === "" || u.responseType === "text" ? u.responseText : null, xml: u.responseType === "" || u.responseType === "document" ? u.responseXML : null, raw: u.response, json: u.responseJSON }; if (u.response && u.response.constructor && u.response.constructor === BOOMR.boomerang_frame.Object && BOOMR.boomerang_frame.Object !== l.Object) {
                                                try {
                                                    u.response.constructor = l.Object;
                                                }
                                                catch (e) {}
                                            }
                                        }p.loadFinished(o);
                                    }
                                    else if (u.readyState === 0 && typeof o.timing.open === "number") {
                                        u.responseURL !== o.url && (o.responseUrl = u.responseURL); o.status = -999; p.loadFinished(o);
                                    }
                                }
                                else {
                                    u.responseURL !== o.url && (o.responseUrl = u.responseURL); t === "load" ? u.status !== 0 && (u.status < 200 || u.status >= 400) && (o.status = u.status) : o.status = void 0 === n ? u.status : n; p.loadFinished(o);
                                }
                            }, !1);
                        } if (!a) {
                            n && r("readystatechange"); r("load"); r("timeout", -1001); r("error", -998); r("abort", -999);
                        }o.url = O.href; o.method = e; o.type = "xhr"; delete o.status; n || (o.synchronous = !0); a = !0; try {
                            return c.apply(u, arguments);
                        }
                        catch (i) {
                            o.status = -997; p.loadFinished(o); throw i;
                        }
                    }; u.send = function(e) {
                        if (s) {
                            return t.apply(u, arguments);
                        } p.captureXhrRequestResponse && (u.resource.requestPayload = e); BOOMR.fireEvent("xhr_send", u); d.addEvent(o); o.timing.requestStart || (o.timing.requestStart = BOOMR.now()); return typeof o.status === "undefined" || o.status !== -997 ? t.apply(u, arguments) : void 0;
                    }; u.resource = o; return u;
                }; BOOMR.proxy_XMLHttpRequest.UNSENT = 0; BOOMR.proxy_XMLHttpRequest.OPENED = 1; BOOMR.proxy_XMLHttpRequest.HEADERS_RECEIVED = 2; BOOMR.proxy_XMLHttpRequest.LOADING = 3; BOOMR.proxy_XMLHttpRequest.DONE = 4; BOOMR.proxy_XMLHttpRequest.prototype = BOOMR.orig_XMLHttpRequest.prototype; BOOMR.utils.overwriteNative(l, "XMLHttpRequest", BOOMR.proxy_XMLHttpRequest);
            }
        }
    } function h() {
        BOOMR.orig_XMLHttpRequest && BOOMR.orig_XMLHttpRequest !== l.XMLHttpRequest && (l.XMLHttpRequest = BOOMR.orig_XMLHttpRequest);
    } function R(e) {
        e.initiator = "xhr"; BOOMR.responseEnd(e);
    }
}()); !(function() {
    var s; var n = !1; var t = !1; var u = !1; var c = !1; var l = !1; var d = !0; var f = !1; var O = !1; var p = !1; var m = !1; var r = []; var o = !1; if (!BOOMR.plugins.SPA && BOOMR.plugins.AutoXHR) {
        var a = {
            spaHardMissedOnComplete: function(e) {
                var t = BOOMR.plugins.RT && BOOMR.plugins.RT.navigationStart(); var n = BOOMR.plugins.AutoXHR.getMutationHandler(); o = !1; BOOMR.addVar("spa.missed", "1", !0); BOOMR.plugins.RT && BOOMR.plugins.RT.clearTimer("t_done"); e.timing.requestStart = t; (n = n.pending_events[e.index]) && n.total_nodes !== 0 || (n = BOOMR.getPerformance()) && n.timing && n.timing.navigationStart && n.timing.loadEventEnd && typeof e.timing.loadEventEnd === "undefined" && (e.timing.loadEventEnd = n.timing.loadEventEnd);
            },
            pageReady: function() {
                c = !0;
            }
        }; BOOMR.plugins.SPA = {
            is_complete: function(e) {
                return !o || e && (e["http.initiator"] === "error" || typeof e.early !== "undefined");
            },
            init: function(e) {
                if (e && e.instrument_xhr) {
                    l = e.instrument_xhr; u && l && BOOMR.plugins.AutoXHR.enableAutoXhr();
                } if (!t) {
                    t = !0; BOOMR.subscribe("page_ready", a.pageReady, null, a);
                }
            },
            register: function(e) {
                r.push(e);
            },
            supported_frameworks: function() {
                return r;
            },
            onLoadSpaHardMissed: function() {
                if (!u) {
                    c = !0; l && BOOMR.plugins.AutoXHR.enableAutoXhr(); o = !0; m ? o = !1 : BOOMR.plugins.SPA.route_change(a.spaHardMissedOnComplete);
                }
            },
            hook: function(e, t) {
                typeof (t = t || {}).routeFilter === "function" && (f = t.routeFilter); typeof t.routeChangeWaitFilter === "function" && (O = t.routeChangeWaitFilter); typeof t.routeChangeWaitFilterHardNavs === "boolean" && (p = t.routeChangeWaitFilterHardNavs); t.disableHardNav && (m = t.disableHardNav); if (n) {
                    return this;
                } e && BOOMR.attach_page_ready(this.onLoadSpaHardMissed); n = !0; return this;
            },
            route_change: function(t, e) {
                var n = !1; var r = d && !m ? "spa_hard" : "spa"; if (!s || !s.wait) {
                    if (r == "spa" && f) {
                        try {
                            if (!f.apply(null, e)) {
                                return;
                            }
                        }
                        catch (a) {
                            BOOMR.addError(a, "SPA.route_change.routeFilter");
                        }
                    }u = !0; var i = BOOMR.plugins.RT && BOOMR.plugins.RT.navigationStart(); var o = c ? BOOMR.now() : i; var i = BOOMR.window.document.URL; BOOMR.fireEvent("spa_init", [BOOMR.plugins.SPA.current_spa_nav(), i]); i = { timing: { requestStart: o }, initiator: r, url: i }; d = !1; if (!c || typeof t === "function") {
                        c = !0; i.onComplete = function(e) {
                            if (!n) {
                                n = !0; BOOMR.fireEvent("spa_navigation");
                            } typeof t === "function" && t(e);
                        };
                    } if ((r == "spa" || p) && O) {
                        try {
                            if (O.apply(null, arguments)) {
                                i.wait = !0; s = i;
                            }
                        }
                        catch (a) {
                            BOOMR.addError(a, "SPA.route_change.routeChangeWaitFilter");
                        }
                    }i.index = BOOMR.plugins.AutoXHR.getMutationHandler().addEvent(i); l && BOOMR.plugins.AutoXHR.enableAutoXhr();
                }
            },
            last_location: function(e) {
                lastLocationChange = e;
            },
            current_spa_nav: function() {
                return c ? "spa" : "spa_hard";
            },
            wait_complete: function() {
                if (s) {
                    s.wait = !1; s.waitComplete && s.waitComplete(); s = null;
                }
            },
            markNavigationComplete: function() {
                var e; var t; var n = BOOMR.plugins.AutoXHR.getMutationHandler(); s && s.wait && BOOMR.plugins.SPA.wait_complete(); if (n && n.pending_events.length > 0) {
                    for (e = n.pending_events.length - 1; e >= 0; e--) {
                        if ((t = n.pending_events[e]) && BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                            if (t.complete) {
                                break;
                            } n.nodesWaitingFor(e); BOOMR.addVar("spa.forced", "1", !0); BOOMR.addVar("spa.waiting", n.nodesWaitingFor(), !0); n.completeEvent(e); return;
                        }
                    }
                }
            },
            isSpaNavInProgress: function() {
                var e; var t; var n = BOOMR.plugins.AutoXHR.getMutationHandler(); if (n && n.pending_events.length > 0) {
                    for (e = n.pending_events.length - 1; e >= 0; e--) {
                        if ((t = n.pending_events[e]) && BOOMR.utils.inArray(t.type, BOOMR.constants.BEACON_TYPE_SPAS)) {
                            return !t.complete;
                        }
                    }
                } return !1;
            },
            isSinglePageApp: function(e) {
                var t = !1; var n = this.supported_frameworks(); for (i = 0; i < n.length; i++) {
                    var r = n[i]; if (e[r] && e[r].enabled) {
                        t = !0; break;
                    }
                } return t;
            }
        }; BOOMR.plugins.SPA.waitComplete = BOOMR.plugins.SPA.wait_complete;
    }
}()); !(function() {
    var u = {
        monitorHistory: !0,
        enabled: !0,
        hooked: !1,
        routeChangeInProgress: !1,
        disableHardNav: !1,
        routeFilter: undefined,
        routeChangeWaitFilter: undefined,
        routeChangeWaitFilterHardNavs: !1,
        monitorReplaceState: !0,
        a: undefined,
        browserOnloadBeforeSetup: !1,
        DEPRECATED_PLUGINS: ["Angular", "Backbone", "Ember"],
        resetRouteChangeInProgress: function(e) {
            if (!e || !(typeof e.early !== "undefined" || e["http.initiator"] && e["http.initiator"].indexOf("api_custom_") === 0)) {
                u.routeChangeInProgress && clearTimeout(u.routeChangeInProgress); u.routeChangeInProgress = !1;
            }
        },
        setRouteChangeInProgress: function() {
            u.routeChangeInProgress && clearTimeout(u.routeChangeInProgress); u.routeChangeInProgress = setTimeout(u.resetRouteChangeInProgress, 50);
        },
        routeChange: function(e) {
            if (u.enabled) {
                if ((!u.disableHardNav || BOOMR.onloadFired()) && !u.routeChangeInProgress) {
                    if (e.toUrl) {
                        u.a.href = e.toUrl; e.toUrl = u.a.href;
                    }BOOMR.plugins.SPA.route_change(null, [e.type, e.fromUrl, e.toUrl]);
                }
            }
            else {
                u.resetRouteChangeInProgress();
            }
        }
    }; if (!BOOMR.plugins.History && typeof BOOMR.plugins.SPA !== "undefined" && typeof BOOMR.plugins.AutoXHR !== "undefined" && BOOMR.window && BOOMR.window.document) {
        BOOMR.plugins.SPA.register("History"); u.a = BOOMR.window.document.createElement("A"); BOOMR.plugins.History = {
            is_complete: function() {
                return !0;
            },
            hook: function(e, t, n) {
                (n = n || {}).disableHardNav = u.disableHardNav; u.routeFilter && (n.routeFilter = u.routeFilter); u.routeChangeWaitFilter && (n.routeChangeWaitFilter = u.routeChangeWaitFilter); u.routeChangeWaitFilterHardNavs && (n.routeChangeWaitFilterHardNavs = u.routeChangeWaitFilterHardNavs); !u.hooked && u.monitorHistory && (function s() {
                    var r; var o; var t; var e; var n; var i = BOOMR.window.history; typeof i.pushState === "function" && (i.pushState = (r = i.pushState, function(e, t, n) {
                        u.routeChange({ type: "pushState", fromUrl: BOOMR.window.document.URL, toUrl: n }); return r.apply(this, arguments);
                    })); u.monitorReplaceState && typeof i.replaceState === "function" && (i.replaceState = (o = i.replaceState, function(e, t, n) {
                        var r = BOOMR.window.document.URL; var i = r; if (arguments.length >= 3 && n != null) {
                            u.a.href = n; i = u.a.href;
                        }BOOMR.plugins.SPA.isSpaNavInProgress() && i === r || u.routeChange({ type: "pushState", fromUrl: BOOMR.window.document.URL, toUrl: n }); return o.apply(this, arguments);
                    })); typeof i.go === "function" && (i.go = (t = i.go, function(e) {
                        u.routeChange({ type: "go", fromUrl: BOOMR.window.document.URL }); return t.apply(this, arguments);
                    })); typeof i.back === "function" && (i.back = (e = i.back, function() {
                        u.routeChange({ type: "back", fromUrl: BOOMR.window.document.URL }); return e.apply(this, arguments);
                    })); typeof i.forward === "function" && (i.forward = (n = i.forward, function() {
                        u.routeChange({ type: "forward", fromUrl: BOOMR.window.document.URL }); return n.apply(this, arguments);
                    })); BOOMR.window.addEventListener("hashchange", function(e) {
                        e = (e || {}).newURL; u.routeChange({ type: "hashchange", toUrl: e });
                    }); function a() {
                        BOOMR.window.addEventListener("popstate", function(e) {
                            u.routeChange({ type: "popstate", toUrl: BOOMR.window.document.URL });
                        });
                    }BOOMR.hasBrowserOnloadFired() ? a() : BOOMR.window.addEventListener("load", function() {
                        setTimeout(a, 0);
                    }); BOOMR.subscribe("beacon", u.resetRouteChangeInProgress); BOOMR.subscribe("spa_cancel", u.resetRouteChangeInProgress); BOOMR.subscribe("spa_init", u.setRouteChangeInProgress); u.browserOnloadBeforeSetup = BOOMR.hasBrowserOnloadFired();
                }()); t = u.browserOnloadBeforeSetup; BOOMR.plugins.SPA.hook(t, n); if (!u.hooked && !u.browserOnloadBeforeSetup && (!u.disableHardNav || BOOMR.onloadFired())) {
                    BOOMR.plugins.SPA.route_change(); u.setRouteChangeInProgress();
                }u.hooked = !0; return this;
            },
            init: function(e) {
                BOOMR.utils.pluginConfig(u, e, "History", ["enabled", "monitorHistory", "disableHardNav", "routeFilter", "routeChangeWaitFilter", "routeChangeWaitFilterHardNavs", "monitorReplaceState"]); u.enabled && this.hook(); return this;
            },
            disable: function() {
                u.enabled = !1; return this;
            },
            enable: function() {
                u.enabled = !0; return this;
            }
        }; for (var e = 0; e < u.DEPRECATED_PLUGINS.length; e++) {
            var t = u.DEPRECATED_PLUGINS[e]; BOOMR.plugins[t] = BOOMR.plugins.History; BOOMR.plugins[t] = {
                init: (function(t) {
                    return function(e) {
                        BOOMR.utils.pluginConfig(u, e, t, ["enabled"]); u.enabled && BOOMR.plugins.History.hook(undefined, undefined, {}); return BOOMR.plugins[t];
                    };
                }(t)),
                enable: BOOMR.plugins.History.enable,
                hook: BOOMR.plugins.History.hook,
                is_complete: BOOMR.plugins.History.is_complete
            }; BOOMR.plugins.SPA.register(t);
        }
    }
}()); !(function(n) {
    var r; var a; if (!BOOMR.plugins.RT) {
        a = {
            onloadfired: !1,
            unloadfired: !1,
            visiblefired: !1,
            initialized: !1,
            complete: !1,
            autorun: !0,
            timers: {},
            cookie: "RT",
            cookie_exp: 604800,
            session_exp: 1800,
            strict_referrer: !0,
            navigationType: 0,
            navigationStart: undefined,
            responseStart: undefined,
            loadTime: 0,
            oboError: 0,
            t_start: undefined,
            cached_t_start: undefined,
            cached_xhr_start: undefined,
            t_fb_approx: undefined,
            r: undefined,
            beacon_url: undefined,
            next_beacon_url: undefined,
            basic_timers: { t_done: 1, t_resp: 1, t_page: 1 },
            crossdomain_sending: !1,
            navigationStartSource: "",
            updateCookie: function(e, t) {
                var n; var r; var i; if (!this.cookie) {
                    return !1;
                } for (i in r = BOOMR.utils.getSubCookies(BOOMR.utils.getCookie(this.cookie)) || {}) {
                    r.hasOwnProperty(i) && (isNaN(parseInt(i, 10)) || delete r[i]);
                } if (typeof e === "object") {
                    for (i in e) {
                        e.hasOwnProperty(i) && (e[i] === undefined ? r.hasOwnProperty(i) && delete r[i] : r[i] = e[i]);
                    }
                }r.z = 1; r.dm = BOOMR.session.domain; r.si = BOOMR.session.ID; r.ss = BOOMR.session.start.toString(36); r.sl = BOOMR.session.length.toString(36); a.session_exp !== 1800 && (r.se = a.session_exp.toString(36)); BOOMR.session.rate_limited && (r.rl = 1); r.tt = this.loadTime.toString(36); this.oboError > 0 ? r.obo = this.oboError.toString(36) : delete r.obo; n = BOOMR.now(); if (t) {
                    r[t] = (n - BOOMR.session.start).toString(36); a.lastActionTime = n;
                } this.beacon_url && (r.bcn = this.beacon_url); if (!BOOMR.utils.setCookie(this.cookie, r, this.cookie_exp)) {
                    BOOMR.error("cannot set start cookie", "rt"); return !1;
                } if ((t = BOOMR.now()) - n > 50) {
                    BOOMR.utils.removeCookie(this.cookie); BOOMR.error("took more than 50ms to set cookie... aborting: " + n + " -> " + t, "rt");
                } return !0;
            },
            refreshSession: function(e) {
                if (e = e || BOOMR.plugins.RT.getCookie()) {
                    e.ss ? BOOMR.session.start = e.ss : BOOMR.session.start = BOOMR.plugins.RT.navigationStart() || BOOMR.t_lstart || BOOMR.t_start; e.si && e.si.match(/-/) && (BOOMR.session.ID = e.si); e.sl && (BOOMR.session.length = e.sl); e.tt && (this.loadTime = e.tt); e.obo && (this.oboError = e.obo); e.dm && !BOOMR.session.domain && (BOOMR.session.domain = e.dm); e.se && (a.session_exp = e.se); e.bcn && (this.beacon_url = e.bcn); e.rl && e.rl === "1" && (BOOMR.session.rate_limited = !0);
                }
            },
            maybeResetSession: function(e, t) {
                var n = 0; BOOMR.session.start && BOOMR.session.length && (n = (BOOMR.now() - BOOMR.session.start) / BOOMR.session.length); var r = 1e3 * a.session_exp; if (!BOOMR.session.start || t && BOOMR.session.start > t || e - (a.lastActionTime || BOOMR.t_start) > r || r < n) {
                    BOOMR.session.start = t || BOOMR.plugins.RT.navigationStart() || BOOMR.t_lstart || BOOMR.t_start; BOOMR.session.length = 0; BOOMR.session.rate_limited = !1; a.loadTime = 0; a.oboError = 0; a.beacon_url = a.next_beacon_url; a.lastActionTime = e; a.updateCookie({ rl: undefined, sl: BOOMR.session.length, ss: BOOMR.session.start, tt: a.loadTime, obo: undefined, bcn: a.beacon_url });
                }
            },
            initFromCookie: function() {
                var e; var t; var n = BOOMR.plugins.RT.getCookie(); this.cookie || (BOOMR.session.enabled = !1); if (n) {
                    n.s = Math.max(+n.ld || 0, Math.max(+n.ul || 0, +n.cl || 0)); if (n.s && (n.r || n.nu)) {
                        this.r = n.r; e = BOOMR.utils.hashString(r.URL); t = BOOMR.utils.hashString(r && r.referrer || ""); n.cl; n.nu; if (!this.strict_referrer || n.cl && n.nu && n.nu === e && n.s < +n.cl + 15 || n.s === +n.ul && this.r === t) {
                            this.t_start = n.s; +n.hd > n.s && (this.t_fb_approx = n.hd);
                        }
                        else {
                            this.t_start = this.t_fb_approx = undefined;
                        }
                    }n.s && (this.lastActionTime = n.s); this.refreshSession(n); this.updateCookie({ s: undefined, ul: undefined, cl: undefined, hd: undefined, ld: undefined, rl: undefined, r: undefined, nu: undefined, sh: undefined }); this.maybeResetSession(BOOMR.now());
                }
            },
            incrementSessionDetails: function() {
                BOOMR.session.length++; !a.timers.t_done || isNaN(a.timers.t_done.delta) ? a.oboError++ : a.loadTime += a.timers.t_done.delta;
            },
            getBoomerangTimings: function() {
                var e; var t; var n; var r; var i; function o(e, t) {
                    e = Math.round(e || 0), t = Math.round(t || 0); return (e = e === 0 ? 0 : e - t) || "";
                } if (BOOMR.t_start) {
                    BOOMR.plugins.RT.startTimer("boomerang", BOOMR.t_start); BOOMR.plugins.RT.endTimer("boomerang", BOOMR.t_end); BOOMR.plugins.RT.endTimer("boomr_fb", BOOMR.t_start); if (BOOMR.t_lstart) {
                        BOOMR.plugins.RT.endTimer("boomr_ld", BOOMR.t_lstart); BOOMR.plugins.RT.setTimer("boomr_lat", BOOMR.t_start - BOOMR.t_lstart);
                    }
                } try {
                    if (window && "performance" in window && window.performance && typeof window.performance.getEntriesByName === "function") {
                        t = { "rt.bmr": BOOMR.url }; BOOMR.config_url && (t["rt.cnf"] = BOOMR.config_url); for (n in t) {
                            if (t.hasOwnProperty(n) && t[n] && (e = window.performance.getEntriesByName(t[n])) && e.length !== 0 && e[0]) {
                                i = [r = o((e = e[0]).startTime, 0), o(e.responseEnd, r), o(e.responseStart, r), o(e.requestStart, r), o(e.connectEnd, r), o(e.secureConnectionStart, r), o(e.connectStart, r), o(e.domainLookupEnd, r), o(e.domainLookupStart, r), o(e.redirectEnd, r), o(e.redirectStart, r)].join(",").replace(/,+$/, ""); BOOMR.addVar(n, i, !0);
                            }
                        }
                    }
                }
                catch (a) {
                    a && a.name && a.name.hasOwnProperty("length") && a.name.indexOf("NS_ERROR_FAILURE") === -1 && BOOMR.addError(a, "rt.getBoomerangTimings");
                }
            },
            checkPreRender: function() {
                if (BOOMR.visibilityState() !== "prerender") {
                    return !1;
                } BOOMR.plugins.RT.startTimer("t_load", this.navigationStart); BOOMR.plugins.RT.endTimer("t_load"); BOOMR.plugins.RT.startTimer("t_prerender", this.navigationStart); BOOMR.plugins.RT.startTimer("t_postrender"); return !0;
            },
            initFromNavTiming: function() {
                var e; var t; if (!this.navigationStart) {
                    (t = BOOMR.getPerformance()) && t.navigation && (this.navigationType = t.navigation.type); if (t && t.timing) {
                        e = t.timing; this.navigationStartSource = "navigation";
                    }
                    else if (n.chrome && n.chrome.csi && n.chrome.csi().startE) {
                        e = { navigationStart: n.chrome.csi().startE }; this.navigationStartSource = "csi";
                    }
                    else if (n.gtbExternal && n.gtbExternal.startE()) {
                        e = { navigationStart: n.gtbExternal.startE() }; this.navigationStartSource = "gtb";
                    } if (e) {
                        this.navigationStart = e.navigationStart || e.fetchStart || undefined; this.fetchStart = e.fetchStart || undefined; this.responseStart = e.responseStart || undefined; navigator.userAgent.match(/Firefox\/[78]\./) && (this.navigationStart = e.unloadEventStart || e.fetchStart || undefined);
                    }
                    else {
                        BOOMR.warn("This browser doesn't support the WebTiming API", "rt");
                    }
                }
            },
            validateLoadTimestamp: function(e, t, n) {
                return t && t.timing && t.timing.loadEventEnd ? t.timing.loadEventEnd : n !== "xhr" || t && BOOMR.utils.inArray(t.initiator, BOOMR.constants.BEACON_TYPE_SPAS) ? (t = BOOMR.getPerformance()) && t.timing ? t.timing.loadEventEnd || e : BOOMR.t_onload || BOOMR.t_lstart || BOOMR.t_start || e : e;
            },
            setPageLoadTimers: function(e, t, n) {
                var r; var i; if (!(e === "xhr" || e === "early" && n && BOOMR.utils.inArray(n.initiator, BOOMR.constants.BEACON_TYPE_SPAS))) {
                    a.initFromCookie(); a.initFromNavTiming(); BOOMR.addVar("rt.start", this.navigationStartSource); if (a.checkPreRender()) {
                        return !1;
                    }
                } if (e === "xhr") {
                    if (n.timers) {
                        for (var o in n.timers) {
                            n.timers.hasOwnProperty(o) && BOOMR.plugins.RT.setTimer(o, n.timers[o]);
                        }
                    }
                    else {
                        n && n.timing && (void 0 === (i = n.timing.fetchStart) || n.timing.responseEnd >= i) && (r = n.timing.responseEnd);
                    }
                }
                else {
                    a.responseStart ? a.responseStart >= a.navigationStart && a.responseStart >= a.fetchStart && (r = a.responseStart) : a.timers.hasOwnProperty("t_page") ? BOOMR.plugins.RT.endTimer("t_page") : a.t_fb_approx && (r = a.t_fb_approx);
                } if (r && e !== "early") {
                    i ? BOOMR.plugins.RT.setTimer("t_resp", i, r) : BOOMR.plugins.RT.endTimer("t_resp", r); e === "load" && a.timers.t_load ? BOOMR.plugins.RT.setTimer("t_page", a.timers.t_load.end - r) : t < r ? BOOMR.addVar("t_page.inv", 1, !0) : t - r == 0 && n && n.timing && n.timing.requestStart && a.timers.t_resp && a.timers.t_resp.delta ? BOOMR.plugins.RT.setTimer("t_page", t - n.timing.requestStart - a.timers.t_resp.delta) : BOOMR.plugins.RT.setTimer("t_page", t - r);
                } if (e === "load" && a.timers.hasOwnProperty("t_postrender")) {
                    BOOMR.plugins.RT.endTimer("t_postrender"); BOOMR.plugins.RT.endTimer("t_prerender");
                } return !0;
            },
            setSupportingTimestamps: function(e, t) {
                e && BOOMR.addVar("rt.tstart", e, !0); typeof a.navigationStart === "number" && a.navigationStart !== e && BOOMR.addVar("rt.nstart", a.navigationStart, !0); typeof a.t_start === "number" && a.t_start !== e && BOOMR.addVar("rt.cstart", a.t_start, !0); BOOMR.addVar("rt.bstart", BOOMR.t_start, !0); BOOMR.t_lstart && BOOMR.addVar("rt.blstart", BOOMR.t_lstart, !0); t === "early" ? BOOMR.addVar("rt.end", e || BOOMR.now(), !0) : a.timers.t_done && BOOMR.addVar("rt.end", a.timers.t_done.end, !0);
            },
            determineTStart: function(e, t) {
                var n; if (e === "xhr" || e === "early" && t && t.initiator === "spa") {
                    t && t.name && a.timers[t.name] ? n = a.timers[t.name].start : t && t.timing && t.timing.requestStart && (n = t.timing.requestStart); void 0 === n && t && BOOMR.utils.inArray(t.initiator, BOOMR.constants.BEACON_TYPE_SPAS) ? BOOMR.addVar("rt.start", "none") : BOOMR.addVar("rt.start", "manual"); a.cached_xhr_start = n;
                }
                else {
                    if (a.navigationStart) {
                        n = a.navigationStart;
                    }
                    else if (a.t_start && a.navigationType !== 2) {
                        n = a.t_start; BOOMR.addVar("rt.start", "cookie");
                    }
                    else if (a.cached_t_start) {
                        n = a.cached_t_start;
                    }
                    else {
                        BOOMR.addVar("rt.start", "none"); n = undefined;
                    }a.cached_t_start = n;
                } return n;
            },
            page_ready: function() {
                this.onloadfired = !0;
            },
            check_visibility: function() {
                BOOMR.visibilityState() === "visible" && (a.visiblefired = !0);
            },
            prerenderToVisible: function() {
                if (a.onloadfired && a.autorun) {
                    BOOMR.addVar("vis.pre", "1", !0); BOOMR.plugins.RT.done(null, "visible");
                }
            },
            page_unload: function(e) {
                this.unloadfired || BOOMR.plugins.RT.done(e, "unload"); this.updateCookie(!a.navigationStart && a.strict_referrer ? { r: BOOMR.utils.hashString(r.URL) } : null, e.type === "beforeunload" ? "ul" : "hd"); this.unloadfired = !0;
            },
            _iterable_click: function(e, t, n, r) {
                if (n) {
                    for (;n && n.nodeName && n.nodeName.toUpperCase() !== t;) {
                        n = n.parentNode;
                    } if (n && n.nodeName && n.nodeName.toUpperCase() === t) {
                        this.refreshSession(); this.maybeResetSession(BOOMR.now()); r = r(n); this.updateCookie({ nu: BOOMR.utils.hashString(r) }, "cl"); BOOMR.addVar("nu", BOOMR.utils.cleanupURL(r), !0);
                    }
                }
            },
            onclick: function(e) {
                a._iterable_click("Click", "A", e, function(e) {
                    return e.href;
                });
            },
            markComplete: function() {
                this.onloadfired && (a.complete = !0);
            },
            onsubmit: function(e) {
                a._iterable_click("Submit", "FORM", e, function(e) {
                    e = typeof e.getAttribute === "function" && e.getAttribute("action") || r.URL || ""; return e.match(/\?/) ? e : e + "?";
                });
            },
            onconfig: function(e) {
                e.beacon_url && (a.beacon_url = e.beacon_url); if (e.RT) {
                    e.RT.oboError && !isNaN(e.RT.oboError) && e.RT.oboError > a.oboError && (a.oboError = e.RT.oboError); if (e.RT.loadTime && !isNaN(e.RT.loadTime) && e.RT.loadTime > a.loadTime) {
                        a.loadTime = e.RT.loadTime; a.timers.t_done && !isNaN(a.timers.t_done.delta) && (a.loadTime += a.timers.t_done.delta);
                    }
                }
            },
            domloaded: function() {
                BOOMR.plugins.RT && BOOMR.plugins.RT.endTimer("t_domloaded");
            },
            clear: function(e) {
                e && typeof e.early !== "undefined" || BOOMR.removeVar("rt.start");
            },
            spaNavigation: function() {
                a.onloadfired = !0;
            }
        }; BOOMR.plugins.RT = {
            init: function(e) {
                n !== BOOMR.window && (n = BOOMR.window); e && e.CrossDomain && e.CrossDomain.sending && (a.crossdomain_sending = !0); if (n && n.document) {
                    r = n.document; BOOMR.utils.pluginConfig(a, e, "RT", ["cookie", "cookie_exp", "session_exp", "strict_referrer"]); e && typeof e.autorun !== "undefined" && (a.autorun = e.autorun); if (e && e.beacon_url) {
                        a.beacon_url && !e.force_beacon_url || (a.beacon_url = e.beacon_url); a.next_beacon_url = e.beacon_url;
                    } void 0 !== r && (a.r = BOOMR.utils.hashQueryString(r.referrer, !0)); a.initFromCookie(); if (a.initialized) {
                        return this;
                    } a.complete = !1; a.timers = {}; a.check_visibility(); BOOMR.subscribe("page_ready", a.page_ready, null, a); BOOMR.subscribe("visibility_changed", a.check_visibility, null, a); BOOMR.subscribe("prerender_to_visible", a.prerenderToVisible, null, a); BOOMR.subscribe("page_ready", this.done, "load", this); BOOMR.subscribe("xhr_load", this.done, "xhr", this); BOOMR.subscribe("before_early_beacon", this.done, "early", this); BOOMR.subscribe("dom_loaded", a.domloaded, null, a); BOOMR.subscribe("page_unload", a.page_unload, null, a); BOOMR.subscribe("click", a.onclick, null, a); BOOMR.subscribe("form_submit", a.onsubmit, null, a); BOOMR.subscribe("before_beacon", this.addTimersToBeacon, "beacon", this); BOOMR.subscribe("beacon", a.clear, null, a); BOOMR.subscribe("error", a.markComplete, null, a); BOOMR.subscribe("config", a.onconfig, null, a); BOOMR.subscribe("spa_navigation", a.spaNavigation, null, a); BOOMR.subscribe("interaction", a.markComplete, null, a); BOOMR.getBeaconURL = function() {
                        return a.beacon_url;
                    }; a.initialized = !0; return this;
                }
            },
            startTimer: function(e, t) {
                if (e) {
                    e === "t_page" && this.endTimer("t_resp", t); a.timers[e] = { start: typeof t === "number" ? t : BOOMR.now() };
                } return this;
            },
            endTimer: function(e, t) {
                if (e) {
                    a.timers[e] = a.timers[e] || {}; a.timers[e].end === undefined && (a.timers[e].end = typeof t === "number" ? t : BOOMR.now());
                } return this;
            },
            clearTimer: function(e) {
                e && delete a.timers[e]; return this;
            },
            setTimer: function(e, t, n) {
                e && (a.timers[e] = void 0 !== n ? { start: t, end: n, delta: n - t } : { delta: t }); return this;
            },
            addTimersToBeacon: function(e, t) {
                var n; var r; var i = []; for (n in a.timers) {
                    if (a.timers.hasOwnProperty(n)) {
                        if (typeof (r = a.timers[n]).delta !== "number") {
                            typeof r.start !== "number" && (r.start = t === "xhr" ? a.cached_xhr_start : a.cached_t_start); r.delta = r.end - r.start;
                        }isNaN(r.delta) || (a.basic_timers.hasOwnProperty(n) ? BOOMR.addVar(n, r.delta, !0) : i.push(n + "|" + r.delta));
                    }
                }i.length && BOOMR.addVar("t_other", i.join(","), !0); if (t === "beacon" && (!e || typeof e.early === "undefined")) {
                    a.timers = {}; a.complete = !1;
                }
            },
            done: function(e, t) {
                if (BOOMR.plugins.RT) {
                    var n; var r = BOOMR.now(); var i = !1; a.complete = !1; n = a.validateLoadTimestamp(r, e, t); if ((t === "load" || t === "visible" || t === "xhr" || t === "early") && !a.setPageLoadTimers(t, n, e)) {
                        return this;
                    } (t === "load" || t === "visible" || t === "early" && (!e || typeof e.initiator === "undefined" || e.initiator === "spa_hard") || t === "xhr" && e && e.initiator === "spa_hard") && a.getBoomerangTimings(); r = a.determineTStart(t, e); a.refreshSession(); a.maybeResetSession(n, r); t !== "early" && this.endTimer("t_done", n); e && e.initiator === "xhr" && this.setTimer("t_done", e.timing.requestStart, e.timing.loadEventEnd); a.setSupportingTimestamps(r, t); this.addTimersToBeacon(null, t); BOOMR.setReferrer(a.r); t === "xhr" && e && e && e.data && (e = e.data); if (t === "xhr" && e) {
                        i = e.subresource; e.url && BOOMR.addVar("u", BOOMR.utils.cleanupURL(e.url.replace(/#.*/, "")), !0); e.status && (e.status < -1 || e.status >= 400) && BOOMR.addVar("http.errno", e.status, !0); e.method && e.method !== "GET" && BOOMR.addVar("http.method", e.method, !0); e.type && e.type !== "xhr" && BOOMR.addVar("http.type", e.type[0], !0); e.headers && BOOMR.addVar("http.hdr", e.headers, !0); e.synchronous && BOOMR.addVar("xhr.sync", 1, !0); e.initiator && BOOMR.addVar("http.initiator", e.initiator, !0); e.responseBodyNotUsed && BOOMR.addVar("fetch.bnu", 1, !0); e.responseUrl && BOOMR.addVar("xhr.ru", BOOMR.utils.cleanupURL(e.responseUrl), !0);
                    }i && i !== "passive" && BOOMR.addVar("rt.subres", 1, !0); if (t === "load" || t === "visible" || t === "xhr" && !i || t === "unload" && !a.onloadfired && a.autorun && !a.crossdomain_sending) {
                        a.incrementSessionDetails(); a.updateCookie(null, "ld");
                    }BOOMR.addVar({ "rt.tt": a.loadTime, "rt.obo": a.oboError }, undefined, !0); a.updateCookie(); if (t === "unload") {
                        BOOMR.addVar("rt.quit", "", !0); a.onloadfired || BOOMR.addVar("rt.abld", "", !0); a.visiblefired || BOOMR.addVar("rt.ntvu", "", !0);
                    }t !== "early" && (a.complete = !0); BOOMR.sendBeacon(a.beacon_url); return this;
                }
            },
            is_complete: function(e) {
                return a.complete || e && e["http.initiator"] === "error" || e && typeof e.early !== "undefined";
            },
            updateCookie: function() {
                a.updateCookie();
            },
            getCookie: function() {
                var e; var t; var n; if (!a.cookie) {
                    return !1;
                } if (e = BOOMR.utils.getSubCookies(BOOMR.utils.getCookie(a.cookie)) || {}) {
                    if (1 & e.z) {
                        t = 36; n = parseInt(e.ss || 0, 36);
                    }
                    else {
                        t = 10; n = 0;
                    }e.ss = parseInt(e.ss || 0, t); e.tt = parseInt(e.tt || 0, t); e.obo = parseInt(e.obo || 0, t); e.sl = parseInt(e.sl || 0, t); e.se && (e.se = parseInt(e.se, t) || 1800); e.ld && (e.ld = n + parseInt(e.ld, t)); e.ul && (e.ul = n + parseInt(e.ul, t)); e.cl && (e.cl = n + parseInt(e.cl, t)); e.hd && (e.hd = n + parseInt(e.hd, t));
                } return e;
            },
            incrementSessionDetails: function() {
                a.incrementSessionDetails();
            },
            navigationStart: function() {
                a.navigationStart || a.initFromNavTiming(); return a.navigationStart;
            }
        };
    }
}(window)); !(function() {
    var u; var y; if (!BOOMR.plugins.BW) {
        (y = [{ name: "image-0.png", size: 11773, timeout: 1400 }, { name: "image-1.png", size: 40836, timeout: 1200 }, { name: "image-2.png", size: 165544, timeout: 1300 }, { name: "image-3.png", size: 382946, timeout: 1500 }, { name: "image-4.png", size: 1236278, timeout: 1200 }, { name: "image-5.png", size: 4511798, timeout: 1200 }, { name: "image-6.png", size: 9092136, timeout: 1200 }]).end = y.length; y.start = 0; y.l = { name: "image-l.gif", size: 35, timeout: 1e3 }; u = {
            base_url: "",
            timeout: 15e3,
            nruns: 5,
            latency_runs: 10,
            user_ip: "",
            block_beacon: !1,
            test_https: !1,
            cookie_exp: 604800,
            cookie: "BA",
            results: [],
            latencies: [],
            latency: null,
            runs_left: 0,
            aborted: !1,
            complete: !0,
            running: !1,
            initialized: !1,
            ncmp: function(e, t) {
                return e - t;
            },
            iqr: function(e) {
                var t; var n = e.length - 1; var r = []; var i = (e[Math.floor(0.25 * n)] + e[Math.ceil(0.25 * n)]) / 2; var o = (e[Math.floor(0.75 * n)] + e[Math.ceil(0.75 * n)]) / 2; var a = 1.5 * (o - i); if (a == 0) {
                    return e;
                } n++; for (t = 0; t < n && e[t] < o + a; t++) {
                    e[t] > i - a && r.push(e[t]);
                } return r;
            },
            calc_latency: function() {
                var e; var t; var n; var r; var i; var o; var a = 0; var s = 0; this.latencies.shift(); t = (o = this.iqr(this.latencies.sort(this.ncmp))).length; for (e = 0; e < t; e++) {
                    a += o[e]; s += o[e] * o[e];
                }n = Math.round(a / t); i = (1.96 * (r = Math.sqrt(s / t - a * a / (t * t))) / Math.sqrt(t)).toFixed(2); r = r.toFixed(2); return { mean: n, median: Math.round((o[Math.floor(t / 2)] + o[Math.ceil(t / 2)]) / 2), stddev: r, stderr: i };
            },
            calc_bw: function() {
                for (var e, t, n, r, i, o, a, s, u, c, l, d, f = 0, O = [], p = [], m = 0, g = 0, h = 0, R = 0, M = [], B = 0; B < this.nruns; B++) {
                    if (this.results[B] && this.results[B].r) {
                        l = 0; for (e = (t = this.results[B].r).length - 1; e >= 0 && l < 3 && t[e]; e--) {
                            if (t[e].t !== null) {
                                f++; l++; d = 1e3 * y[e].size / t[e].t; O.push(d); if (t[e].t > this.latency.mean) {
                                    d = 1e3 * y[e].size / (t[e].t - this.latency.mean); p.push(d);
                                }
                                else {
                                    M.push(e + "_" + t[e].t);
                                }
                            }
                        }
                    }
                } if (O.length > 3) {
                    O = this.iqr(O.sort(this.ncmp)); p = this.iqr(p.sort(this.ncmp));
                }
                else {
                    O = O.sort(this.ncmp); p = p.sort(this.ncmp);
                }f = Math.max(O.length, p.length); for (B = 0; B < f; B++) {
                    if (B < O.length) {
                        m += O[B]; g += Math.pow(O[B], 2);
                    } if (B < p.length) {
                        h += p[B]; R += Math.pow(p[B], 2);
                    }
                }f = O.length; n = Math.round(m / f); r = Math.sqrt(g / f - Math.pow(m / f, 2)); i = Math.round(1.96 * r / Math.sqrt(f)); r = Math.round(r); f = O.length - 1; o = Math.round((O[Math.floor(f / 2)] + O[Math.ceil(f / 2)]) / 2); if (p.length < 1) {
                    M.push("l==" + p.length); a = n; s = r; u = i; c = o;
                }
                else {
                    f = p.length; a = Math.round(h / f); u = (1.96 * (s = Math.sqrt(R / f - Math.pow(h / f, 2))) / Math.sqrt(f)).toFixed(2); s = s.toFixed(2); f = p.length - 1; c = Math.round((p[Math.floor(f / 2)] + p[Math.ceil(f / 2)]) / 2);
                } return { mean: n, stddev: r, stderr: i, median: o, mean_corrected: a, stddev_corrected: s, stderr_corrected: u, median_corrected: c, debug_info: M };
            },
            load_img: function(t, n, r) {
                var e = this.base_url + y[t].name + "?t=" + BOOMR.utils.generateId(10); var i = 0; var o = 0; var a = new Image(); var s = this; function u(e) {
                    return function() {
                        r && r.call(s, t, o, n, e); if (e !== null) {
                            a.onload = a.onerror = null; a = null; clearTimeout(i); s = r = null;
                        }
                    };
                }a.onload = u(!0); a.onerror = u(!1); i = setTimeout(u(null), y[t].timeout + Math.min(400, this.latency ? this.latency.mean : 400)); o = BOOMR.now(); a.src = e;
            },
            lat_loaded: function(e, t, n, r) {
                if (n === this.latency_runs + 1) {
                    if (r !== null) {
                        t = BOOMR.now() - t; this.latencies.push(t);
                    } this.latency_runs === 0 && (this.latency = this.calc_latency()); BOOMR.setImmediate(this.iterate, null, null, this);
                }
            },
            img_loaded: function(e, t, n, r) {
                if (n === this.runs_left + 1 && !this.results[this.nruns - n].r[e]) {
                    if (r !== null) {
                        t = { start: t, end: BOOMR.now(), t: null, state: r, run: n }; r && (t.t = t.end - t.start); this.results[this.nruns - n].r[e] = t; if (e >= y.end - 1 || this.results[this.nruns - n].r[e + 1] !== undefined) {
                            n === this.nruns && (y.start = e); BOOMR.setImmediate(this.iterate, null, null, this);
                        }
                        else {
                            this.load_img(e + 1, n, this.img_loaded);
                        }
                    }
                    else {
                        this.results[this.nruns - n].r[e + 1] = { t: null, state: null, run: n };
                    }
                }
            },
            finish: function() {
                this.latency || (this.latency = this.calc_latency()); var e = this.calc_bw(); var t = { bw: e.median_corrected, bw_err: parseFloat(e.stderr_corrected, 10), lat: this.latency.mean, lat_err: parseFloat(this.latency.stderr, 10), bw_time: Math.round(BOOMR.now() / 1e3) }; BOOMR.addVar(t); e.debug_info.length > 0 && BOOMR.addVar("bw_debug", e.debug_info.join(",")); !isNaN(t.bw) && t.bw > 0 && BOOMR.utils.setCookie(this.cookie, { ba: Math.round(t.bw), be: t.bw_err, l: t.lat, le: t.lat_err, ip: this.user_ip, t: t.bw_time }, this.user_ip ? this.cookie_exp : 0); (this.complete = !0) === this.block_beacon && BOOMR.sendBeacon(); this.running = !1;
            },
            iterate: function() {
                if (!this.aborted) {
                    if (this.runs_left) {
                        if (this.latency_runs) {
                            this.load_img("l", this.latency_runs--, this.lat_loaded);
                        }
                        else {
                            this.results.push({ r: [] }); this.load_img(y.start, this.runs_left--, this.img_loaded);
                        }
                    }
                    else {
                        this.finish();
                    }
                }
            },
            setVarsFromCookie: function() {
                var e; var t; var n; var r; var i; var o; var a; var s = BOOMR.utils.getSubCookies(BOOMR.utils.getCookie(u.cookie)); if (s && s.ba) {
                    e = parseInt(s.ba, 10); t = parseFloat(s.be, 10); n = parseInt(s.l, 10) || 0; r = parseFloat(s.le, 10) || 0; i = s.ip.replace(/\.\d+$/, "0"); o = parseInt(s.t, 10); a = this.user_ip.replace(/\.\d+$/, "0"); s = Math.round(BOOMR.now() / 1e3); if (i === a && o >= s - this.cookie_exp && e > 0) {
                        this.complete = !0; BOOMR.addVar({ bw: e, lat: n, bw_err: t, lat_err: r, bw_time: o }); return !0;
                    }
                } return !1;
            }
        }; BOOMR.plugins.BW = {
            init: function(e) {
                if (u.initialized) {
                    return this;
                } BOOMR.utils.pluginConfig(u, e, "BW", ["base_url", "timeout", "nruns", "cookie", "cookie_exp", "test_https", "block_beacon"]); e && e.user_ip && (u.user_ip = e.user_ip); if (!u.base_url) {
                    return this;
                } y.start = 0; u.runs_left = u.nruns; u.latency_runs = 10; u.results = []; u.latencies = []; u.latency = null; u.complete = u.aborted = !1; BOOMR.removeVar("ba", "ba_err", "lat", "lat_err"); u.setVarsFromCookie() || BOOMR.subscribe("page_ready", this.run, null, this); u.initialized = !0; return this;
            },
            run: function() {
                var e; if (u.running || u.complete) {
                    return this;
                } (e = BOOMR.window.document.createElement("a")).href = u.base_url; if (!u.test_https && e.protocol === "https:") {
                    BOOMR.info("HTTPS detected, skipping bandwidth test", "bw"); (u.complete = !0) === u.block_beacon && BOOMR.sendBeacon(); return this;
                }u.base_url = e.href; u.running = !0; setTimeout(this.abort, u.timeout); u.iterate(); return this;
            },
            abort: function() {
                u.aborted = !0; u.running && u.finish();
            },
            is_complete: function() {
                return !0 !== u.block_beacon || u.complete;
            }
        };
    }
}()); !(function() {
    if (!BOOMR.plugins.PaintTiming) {
        var i = { "first-paint": "fp", "first-contentful-paint": "fcp", "largest-contentful-paint": "lcp" }; var o = {
            initialized: !1,
            complete: !1,
            supported: null,
            timingCache: {},
            observer: null,
            externalMetrics: {},
            done: function(e, t) {
                var n; var r; if (this.complete) {
                    return this;
                } if (t !== "load" && (!e || e.initiator !== "spa_hard")) {
                    this.complete = !0; return this;
                } if ((e = BOOMR.getPerformance()) && typeof e.getEntriesByType === "function") {
                    if ((n = e.getEntriesByType("paint")) && n.length) {
                        BOOMR.info("This user agent supports PaintTiming", "pt"); for (r = 0; r < n.length; r++) {
                            o.timingCache[n[r].name] = n[r].startTime; i[n[r].name] && BOOMR.addVar("pt." + i[n[r].name], Math.floor(n[r].startTime), !0);
                        } this.complete = !0; BOOMR.sendBeacon();
                    }
                }
                else {
                    this.complete = !0;
                }
            },
            onObserver: function(e) {
                e = e.getEntries(); if (e.length !== 0) {
                    var e = e[e.length - 1]; var t = e.renderTime || e.loadTime; o.timingCache[e.entryType] = t; BOOMR.addVar("pt.lcp", Math.floor(t), !0); o.externalMetrics.lcp = function() {
                        return Math.floor(t);
                    };
                }
            }
        }; BOOMR.plugins.PaintTiming = {
            init: function() {
                if (!this.is_supported()) {
                    o.complete = !0; o.initialized = !0;
                } if (!o.complete && BOOMR.visibilityState() === "hidden") {
                    BOOMR.addVar("pt.hid", 1, !0); o.complete = !0;
                } if (!o.initialized) {
                    BOOMR.subscribe("page_ready", o.done, "load", o); BOOMR.subscribe("xhr_load", o.done, "xhr", o); BOOMR.subscribe("before_unload", o.done, null, o); if (typeof BOOMR.window.PerformanceObserver === "function" && typeof window.LargestContentfulPaint === "function") {
                        o.observer = new BOOMR.window.PerformanceObserver(o.onObserver); o.observer.observe({ type: "largest-contentful-paint", buffered: !0 });
                    }o.initialized = !0;
                } return this;
            },
            is_complete: function() {
                return !0;
            },
            is_enabled: function() {
                return o.initialized && this.is_supported();
            },
            is_supported: function() {
                if (o.supported !== null) {
                    return o.supported;
                } var e = BOOMR.getPerformance(); o.supported = e && typeof window.PerformancePaintTiming !== "undefined" && typeof e.getEntriesByType === "function"; return o.supported;
            },
            getTimingFor: function(e) {
                var t; var n; if (o.timingCache[e]) {
                    return o.timingCache[e];
                } if (this.is_supported()) {
                    var r = BOOMR.getPerformance(); if (r && typeof r.getEntriesByType === "function" && (t = r.getEntriesByType("paint")) && t.length) {
                        for (n = 0; n < t.length; n++) {
                            if (t[n].name === e) {
                                o.timingCache[e] = t[n].startTime; return o.timingCache[e];
                            }
                        }
                    }
                }
            },
            metrics: o.externalMetrics
        };
    }
}()); !(function() {
    if (!BOOMR.plugins.NavigationTiming) {
        var c = {
            complete: !1,
            fullySent: !1,
            sendBeacon: function() {
                this.complete = !0; BOOMR.sendBeacon();
            },
            xhr_done: function(e) {
                var t; if (e && e.initiator === "spa_hard") {
                    c.done(e);
                }
                else if (e && e.initiator === "spa") {
                    c.sendBeacon();
                }
                else {
                    BOOMR.window; var n; var r = {}; if (e) {
                        e.data && (e = e.data); if ((t = BOOMR.getPerformance()) && e.restiming) {
                            r = { nt_red_st: e.restiming.redirectStart, nt_red_end: e.restiming.redirectEnd, nt_fet_st: e.restiming.fetchStart, nt_dns_st: e.restiming.domainLookupStart, nt_dns_end: e.restiming.domainLookupEnd, nt_con_st: e.restiming.connectStart, nt_con_end: e.restiming.connectEnd, nt_req_st: e.restiming.requestStart, nt_res_st: e.restiming.responseStart, nt_res_end: e.restiming.responseEnd }; e.restiming.secureConnectionStart && (r.nt_ssl_st = e.restiming.secureConnectionStart); for (n in r) {
                                if (r.hasOwnProperty(n) && r[n]) {
                                    r[n] += t.timing.navigationStart; r[n] = Math.floor(r[n]);
                                }
                            }
                        } if (e.timing) {
                            e = e.timing; r.nt_req_st || (r.nt_req_st = e.requestStart); r.nt_res_st || (r.nt_res_st = e.responseStart); r.nt_res_end || (r.nt_res_end = e.responseEnd); r.nt_domint = e.domInteractive; r.nt_domcomp = e.domComplete; r.nt_load_st = e.loadEventEnd; r.nt_load_end = e.loadEventEnd;
                        } for (n in r) {
                            r.hasOwnProperty(n) && !r[n] && delete r[n];
                        }BOOMR.addVar(r, undefined, !0); c.sendBeacon();
                    }
                }
            },
            done: function() {
                var e; var t; var n; var r; var i; var o = BOOMR.window; var a = {}; var s = 0; var u = !1; if (this.complete) {
                    return this;
                } if (e = BOOMR.getPerformance()) {
                    if (typeof e.getEntriesByType === "function") {
                        if ((n = e.getEntriesByType("navigation")) && n.length) {
                            BOOMR.info("This user agent supports NavigationTiming2", "nt"); n = n[0]; s = e.timing ? e.timing.navigationStart : 0;
                        }
                        else {
                            n = undefined;
                        }
                    } if (!n && e.timing) {
                        BOOMR.info("This user agent supports NavigationTiming", "nt"); n = e.timing;
                    } if (n) {
                        !(a = { nt_nav_st: e.timing ? e.timing.navigationStart : 0, nt_red_st: l(s, n.redirectStart), nt_red_end: l(s, n.redirectEnd), nt_fet_st: l(s, n.fetchStart), nt_dns_st: l(s, n.domainLookupStart), nt_dns_end: l(s, n.domainLookupEnd), nt_con_st: l(s, n.connectStart), nt_con_end: l(s, n.connectEnd), nt_req_st: l(s, n.requestStart), nt_res_st: l(s, n.responseStart), nt_res_end: l(s, n.responseEnd), nt_domloading: l(s, n.domLoading), nt_domint: l(s, n.domInteractive), nt_domcontloaded_st: l(s, n.domContentLoadedEventStart), nt_domcontloaded_end: l(s, n.domContentLoadedEventEnd), nt_domcomp: l(s, n.domComplete), nt_load_st: l(s, n.loadEventStart), nt_load_end: l(s, n.loadEventEnd), nt_unload_st: l(s, n.unloadEventStart), nt_unload_end: l(s, n.unloadEventEnd) }).nt_domloading && e && e.timing && e.timing.domLoading && (a.nt_domloading = e.timing.domLoading); n.secureConnectionStart && (a.nt_ssl_st = l(s, n.secureConnectionStart)); e.timing && e.timing.msFirstPaint && (a.nt_first_paint = e.timing.msFirstPaint); n.workerStart && (a.nt_worker_start = l(s, n.workerStart)); if (n.decodedBodySize || n.transferSize) {
                            a.nt_enc_size = n.encodedBodySize; a.nt_dec_size = n.decodedBodySize; a.nt_trn_size = n.transferSize;
                        }n.nextHopProtocol && (a.nt_protocol = n.nextHopProtocol);
                    } if (!a.nt_first_paint && BOOMR.plugins.PaintTiming) {
                        u = BOOMR.plugins.PaintTiming.is_supported(); (r = BOOMR.plugins.PaintTiming.getTimingFor("first-paint")) && (a.nt_first_paint = l(s, r));
                    } if ((!a.nt_protocol || !a.nt_first_paint) && (!n || n.nextHopProtocol !== "") && !u && o.chrome && typeof o.chrome.loadTimes === "function" && (t = o.chrome.loadTimes())) {
                        a.nt_spdy = t.wasFetchedViaSpdy ? 1 : 0; a.nt_cinf = t.connectionInfo; typeof t.firstPaintTime === "number" && t.firstPaintTime !== 0 && (a.nt_first_paint = Math.round(1e3 * t.firstPaintTime));
                    } if (e.navigation) {
                        e = e.navigation; a.nt_red_cnt = e.redirectCount; a.nt_nav_type = e.type;
                    } for (i in a) {
                        a.hasOwnProperty(i) && a[i] === undefined && delete a[i];
                    }BOOMR.addVar(a, undefined, !0); n && (n.requestStart && n.navigationStart && n.requestStart < n.navigationStart || n.responseStart && n.navigationStart && n.responseStart < n.navigationStart || n.responseStart && n.fetchStart && n.responseStart < n.fetchStart || n.navigationStart && n.fetchStart < n.navigationStart || n.responseEnd && n.responseEnd > BOOMR.now() + 864e5) && BOOMR.addVar("nt_bad", 1, !0); a.nt_load_end > 0 && (this.fullySent = !0);
                }c.sendBeacon();
            },
            clear: function(e) {
                this.complete = !(e && e.early) && this.fullySent;
            },
            prerenderToVisible: function() {
                this.complete = !1; this.done();
            },
            onBeforeEarlyBeacon: function(e) {
                e && typeof e.initiator !== "undefined" && e.initiator !== "spa_hard" || this.done();
            }
        }; BOOMR.plugins.NavigationTiming = {
            init: function() {
                if (!c.initialized) {
                    BOOMR.subscribe("page_ready", c.done, null, c); BOOMR.subscribe("prerender_to_visible", c.prerenderToVisible, null, c); BOOMR.subscribe("before_early_beacon", c.onBeforeEarlyBeacon, null, c); BOOMR.subscribe("xhr_load", c.xhr_done, null, c); BOOMR.subscribe("before_unload", c.done, null, c); BOOMR.subscribe("beacon", c.clear, null, c); c.initialized = !0;
                } return this;
            },
            is_complete: function() {
                return !0;
            }
        };
    } function l(e, t) {
        return typeof t !== "number" || t === 0 ? undefined : Math.floor((e || 0) + t);
    }
}()); !(function() {
    if (!BOOMR.plugins.ResourceTiming) {
        var h = { other: 0, img: 1, link: 2, script: 3, css: 4, xmlhttprequest: 5, html: 6, image: 7, beacon: 8, fetch: 9, iframe: "a", subdocument: "a", body: "b", input: "c", frame: "a", object: "d", video: "e", audio: "f", source: "g", track: "h", embed: "i", eventsource: "j", navigation: 6 }; var T = { prefetch: 1, preload: 2, prerender: 3, stylesheet: 4 }; var x = ["startTime", "redirectStart", "redirectEnd", "fetchStart", "domainLookupStart", "domainLookupEnd", "connectStart", "secureConnectionStart", "connectEnd", "requestStart", "responseStart", "responseEnd", "workerStart"]; var R = "\n"; var M = "*"; var B = "0"; var y = "1"; var v = "2"; var k = 1; var A = 2; var C = 4; var _ = "3"; var b = "4"; var w = "5"; var E = "6"; var P = {
            complete: !1,
            sentNavBeacon: !1,
            initialized: !1,
            supported: null,
            xhr_load: function(e) {
                e && e.restiming && i(e.restiming); if (!this.complete) {
                    this.complete = !0; BOOMR.sendBeacon();
                }
            },
            xssBreakWords: [/(h)(ref)/gi, /(s)(rc)/gi, /(a)(ction)/gi],
            urlLimit: 500,
            clearOnBeacon: !1,
            trimUrls: [],
            serverTiming: !0,
            monitorClearResourceTimings: !1,
            splitAtPath: !1,
            getSrcsetDimensions: !1,
            trackedResourceTypes: "*",
            done: function() {
                if (!this.sentNavBeacon) {
                    e(); this.complete = !0; this.sentNavBeacon = !0; BOOMR.sendBeacon();
                }
            },
            onBeacon: function(e) {
                var t = BOOMR.getPerformance(); if (P.clearOnBeacon && t) {
                    var n = t.clearResourceTimings || t.webkitClearResourceTimings; n && typeof n === "function" && n.call(t);
                }
            },
            prerenderToVisible: function() {
                this.sentNavBeacon = !1; this.done();
            }
        }; BOOMR.plugins.ResourceTiming = {
            init: function(e) {
                BOOMR.utils.pluginConfig(P, e, "ResourceTiming", ["xssBreakWords", "clearOnBeacon", "urlLimit", "trimUrls", "trackedResourceTypes", "serverTiming", "monitorClearResourceTimings", "splitAtPath", "getSrcsetDimensions"]); if (P.initialized) {
                    return this;
                } if (this.is_supported()) {
                    BOOMR.subscribe("page_ready", P.done, null, P); BOOMR.subscribe("prerender_to_visible", P.prerenderToVisible, null, P); BOOMR.subscribe("xhr_load", P.xhr_load, null, P); BOOMR.subscribe("beacon", P.onBeacon, null, P); BOOMR.subscribe("before_unload", P.done, null, P); if (P.monitorClearResourceTimings) {
                        var t = this; BOOMR.window.performance.clearResourceTimings = (n = BOOMR.window.performance.clearResourceTimings, function() {
                            t.addResources(BOOMR.window.performance.getEntriesByType("resource")); n.apply(BOOMR.window.performance, arguments);
                        });
                    }
                }
                else {
                    P.complete = !0;
                } var n; P.initialized = !0; return this;
            },
            is_complete: function() {
                return !0;
            },
            is_enabled: function() {
                return P.initialized && this.is_supported();
            },
            is_supported: function() {
                if (P.supported !== null) {
                    return P.supported;
                } var e = BOOMR.getPerformance(); P.supported = e && typeof e.getEntriesByType === "function" && typeof window.PerformanceResourceTiming !== "undefined"; return P.supported;
            },
            addResources: function(e, t) {
                if (this.is_supported() && BOOMR.utils.isArray(e)) {
                    P.collectedEntries = P.collectedEntries || []; if (typeof t === "number") {
                        var r = t - (BOOMR.window.performance.timeOrigin || BOOMR.window.performance.timing.navigationStart); e = BOOMR.utils.arrayFilter(e, function(e) {
                            for (var t = 0; t < x.length; t++) {
                                var n = x[t]; e.hasOwnProperty(n) && (e[n] += r);
                            } return !0;
                        });
                    }Array.prototype.push.apply(P.collectedEntries, e);
                }
            },
            getCompressedResourceTiming: r,
            getFilteredResourceTiming: U,
            calculateResourceTimingUnion: function c(e) {
                if (!e || !e.length) {
                    return 0;
                } e.sort(function(e, t) {
                    return e.fetchStart !== t.fetchStart ? e.fetchStart - t.fetchStart : (e.responseStart || e.responseEnd) - (t.responseStart || t.responseEnd);
                }); for (var t = u(e), n = [], r = 0, i = 0; i < t.length; i++) {
                    var o = t[i]; o.fetchStart < r && (o.fetchStart = r); if (o.fetchStart < o.responseEnd) {
                        n.push(o); r = o.responseEnd;
                    }
                } var a = u(n); var s = 0; for (i = 0; i < a.length; i++) {
                    s += a[i].responseEnd - a[i].fetchStart;
                } return s;
            },
            addResourceTimingToBeacon: e,
            addToBeacon: i
        };
    } function S(e, t) {
        var n; var r; var i; var o; var a; var s; var u; var c; var l = {}; for (n in e) {
            r = n; for (i = 0; i < P.xssBreakWords.length; i++) {
                r = r.replace(P.xssBreakWords[i], "$1" + R + "$2");
            } if (e.hasOwnProperty(n)) {
                o = e[n]; a = t ? [(a = r.split("/"))[0] + "//", a[2] + (a.length > 3 ? "/" : "")].concat(a.slice(3).reduce((function d(o) {
                    return function(e, t, n) {
                        var r; var i; if (t.indexOf(R) !== -1) {
                            r = t.split(R); for (i = 0; i < r.length - 1; i++) {
                                e.push(r[i]); e.push(R);
                            }t = r.slice(-1);
                        } typeof o === "number" && n < o && (t += "/"); return e.concat(t);
                    };
                }(a.length - 4)), [])) : r.split(""); u = l; for (i = 0; i < a.length; i++) {
                    void 0 === (c = u[s = a[i]]) ? u = u[s] = i === a.length - 1 ? o : {} : typeof c === "string" ? u = u[s] = { "|": c } : i === a.length - 1 ? u[s]["|"] = o : u = u[s];
                }
            }
        } return l;
    } function N(e, t) {
        typeof e !== "number" && (e = 0); typeof t !== "number" && (t = 0); e = Math.round(e || 0), t = Math.round(t || 0); return e === 0 ? 0 : e - t;
    } function L(e) {
        try {
            e.location && e.location.href; e.document; if ("performance" in e && e.performance) {
                return 1;
            }
        }
        catch (t) {}
    } function I(e) {
        var t = 0; return t = L(e) && e.performance.timing && e.performance.timing.navigationStart ? e.performance.timing.navigationStart : t;
    } function F(e, t, n, r, i) {
        var o; var a; var s; var u; var c; var l; var d; var f; var O; var p; var m = []; var g = {}; var h = {}; void 0 === t && (t = !0); void 0 === n && (n = 0); if ((r = void 0 === r ? 0 : r) > 10) {
            return m;
        } try {
            if (!L(e)) {
                return m;
            } s = I(e); O = (function w(e, t) {
                var u; var c; var l = {}; var d = e.document; var f = d.createElement("A"); u = (t = t || [0, 0, 0, 0])[3] + (e.pageXOffset !== undefined) ? e.pageXOffset : (d.documentElement || d.body.parentNode || d.body).scrollLeft; c = t[2] + (e.pageYOffset !== undefined) ? e.pageYOffset : (d.documentElement || d.body.parentNode || d.body).scrollTop; ["img", "iframe", "image"].forEach(function(e) {
                    for (var t, n, r, i, o, a = d.getElementsByTagName(e), s = 0; s < a.length; s++) {
                        if (o = a[s]) {
                            n = o.currentSrc || o.src || typeof o.getAttribute === "function" && o.getAttribute("src") || o.getAttribute("xlink:href"); f.href = n; n = f.href; if (n && !l[n] && ((t = o.getBoundingClientRect()).height || o.offsetHeight) && (t.width || o.offsetWidth)) {
                                l[n] = [t.height || o.offsetHeight, t.width || o.offsetWidth, Math.round(t.top + c), Math.round(t.left + u)]; if (o.naturalHeight || o.naturalWidth) {
                                    P.getSrcsetDimensions && o.currentSrc && (o.srcset || o.parentNode && o.parentNode.nodeName && o.parentNode.nodeName.toUpperCase() === "PICTURE") ? (r = o.isConnected ? o.ownerDocument.createElement("IMG") : new BOOMR.window.Image()).src = n : r = o; i = r.naturalHeight || o.naturalHeight; o = r.naturalWidth || o.naturalWidth; !i && !o || l[n][0] === i && l[n][1] === o || l[n].push(i, o);
                                }
                            }
                        }
                    }
                }); return l;
            }(e, i)); V(p = e.document.createElement("a"), g, "script"); V(p, h, "link"); if ((l = e.document.getElementsByTagName("iframe")) && l.length) {
                for (o = 0; o < l.length; o++) {
                    u = I(l[o].contentWindow); c = 0; s < u && (c = n + (u - s)); p.href = l[o].src; m = m.concat(F(l[o].contentWindow, !1, c, r + 1, O[p.href]));
                }
            } if (typeof e.performance.getEntriesByType !== "function") {
                return m;
            } function R(e) {
                return P.serverTiming && e.serverTiming || [];
            } if (t) {
                if ((a = e.performance.getEntriesByType("navigation")) && a.length === 1) {
                    d = a[0]; m.push({ name: e.location.href, startTime: 0, initiatorType: "html", redirectStart: d.redirectStart, redirectEnd: d.redirectEnd, fetchStart: d.fetchStart, domainLookupStart: d.domainLookupStart, domainLookupEnd: d.domainLookupEnd, connectStart: d.connectStart, secureConnectionStart: d.secureConnectionStart, connectEnd: d.connectEnd, requestStart: d.requestStart, responseStart: d.responseStart, responseEnd: d.responseEnd, workerStart: d.workerStart, encodedBodySize: d.encodedBodySize, decodedBodySize: d.decodedBodySize, transferSize: d.transferSize, serverTiming: R(d) });
                }
                else {
                    e.performance.timing && (f = e.performance.timing).navigationStart !== 0 && f.responseEnd <= f.navigationStart + 36e5 && m.push({ name: e.location.href, startTime: 0, initiatorType: "html", redirectStart: f.redirectStart ? f.redirectStart - f.navigationStart : 0, redirectEnd: f.redirectEnd ? f.redirectEnd - f.navigationStart : 0, fetchStart: f.fetchStart ? f.fetchStart - f.navigationStart : 0, domainLookupStart: f.domainLookupStart ? f.domainLookupStart - f.navigationStart : 0, domainLookupEnd: f.domainLookupEnd ? f.domainLookupEnd - f.navigationStart : 0, connectStart: f.connectStart ? f.connectStart - f.navigationStart : 0, secureConnectionStart: f.secureConnectionStart ? f.secureConnectionStart - f.navigationStart : 0, connectEnd: f.connectEnd ? f.connectEnd - f.navigationStart : 0, requestStart: f.requestStart ? f.requestStart - f.navigationStart : 0, responseStart: f.responseStart ? f.responseStart - f.navigationStart : 0, responseEnd: f.responseEnd ? f.responseEnd - f.navigationStart : 0 });
                }
            } var M = e.performance.getEntriesByType("resource"); var B = []; if (e === BOOMR.window && P.collectedEntries) {
                Array.prototype.push.apply(M, P.collectedEntries); P.collectedEntries = [];
            } for (o = 0; M && o < M.length; o++) {
                for (var y = {
                        name: (f = M[o]).name,
                        initiatorType: f.initiatorType,
                        encodedBodySize: f.encodedBodySize,
                        decodedBodySize: f.decodedBodySize,
                        transferSize: f.transferSize,
                        serverTiming: R(f),
                        visibleDimensions: O[f.name],
                        latestTime: (function E(e) {
                            if (e.responseEnd) {
                                return e.responseEnd;
                            } if (e.responseStart && e.startTime) {
                                return e.responseStart + 0.2 * (e.responseStart - e.startTime);
                            } return Infinity;
                        }(f))
                    }, v = 0; v < x.length; v++) {
                    var _ = x[v]; y[_] = _ === "startTime" || f[_] ? f[_] + n : 0;
                }f.hasOwnProperty("_data") && (y._data = f._data); if ((f.initiatorType === "script" || f.initiatorType === "link") && g[f.name]) {
                    var b = g[f.name]; y.scriptAttrs = (b.async ? k : 0) | (b.defer ? A : 0); for (;b.nodeType === 1 && b.nodeName !== "BODY";) {
                        b = b.parentNode;
                    }y.scriptAttrs |= b.nodeName === "BODY" ? C : 0;
                }f.initiatorType === "link" && h[f.name] && BOOMR.utils.arrayFind(h[f.name].rel.split(/[\u0009\u000A\u000C\u000D\u0020]+/), function(e) {
                    e = e.toLowerCase(); if (T[e]) {
                        y.linkAttrs = T[e]; return !0;
                    }
                }); B.push(y);
            }m = m.concat(B);
        }
        catch (S) {
            return m;
        } return m;
    } function V(t, n, e) {
        Array.prototype.forEach.call(t.ownerDocument.getElementsByTagName(e), function(e) {
            t.href = e.currentSrc || e.src || typeof e.getAttribute === "function" && e.getAttribute("xlink:href") || e.href; t.href.match(/^https?:\/\//) && (n[t.href] = e);
        });
    } function H(e) {
        return typeof e === "number" && e !== 0 ? e.toString(36) : typeof e === "string" ? e : "";
    } function U(e, t, n) {
        var r; var i = F(BOOMR.window, !0, 0, 0); var o = I(BOOMR.window); var a = {}; if (!i || !i.length) {
            return { entries: [] };
        } i.sort(function(e, t) {
            return e.startTime - t.startTime;
        }); for (var s = [], u = 0; u < i.length; u++) {
            r = i[u]; if (typeof r.name === "string" && ((r.name.indexOf("http:") === 0 || r.name.indexOf("https:") === 0) && !(typeof BOOMR.getBeaconURL === "function" && BOOMR.getBeaconURL() && r.name.indexOf(BOOMR.getBeaconURL()) > -1 || e && o + r.startTime < e))) {
                if (t && o + r.startTime > t) {
                    break;
                } if (void 0 === n || n === "*" || !n.length || r.initiatorType && BOOMR.utils.inArray(r.initiatorType, n)) {
                    !(function l(n, e) {
                        (e || []).forEach(function(e) {
                            var t = e.name || e.metric; typeof n[t] === "undefined" && (n[t] = { count: 0, counts: {} }); t = n[t]; t.counts[e.description] = t.counts[e.description] || 0; t.counts[e.description]++; t.count++;
                        });
                    }(a, r.serverTiming)); s.push(r);
                }
            }
        } var c = (function d(r) {
            return Object.keys(r).sort(function(e, t) {
                return r[t].count - r[e].count;
            }).reduce(function(e, n) {
                var t = Object.keys(r[n].counts).sort(function(e, t) {
                    return r[n].counts[t] - r[n].counts[e];
                }); e.push(t.length === 1 && t[0] === "" ? n : [n].concat(t)); return e;
            }, []);
        }(a)); return {
            entries: s,
            serverTiming: {
                lookup: c,
                indexed: (function f(e) {
                    return e.reduce(function(e, t, n) {
                        var r; var i; if (Array.isArray(t)) {
                            r = t[0]; i = t.slice(1).reduce(function(e, t, n) {
                                e[t] = n; return e;
                            }, {});
                        }
                        else {
                            r = t; i = { "": 0 };
                        }e[r] = { index: n, descriptions: i }; return e;
                    }, {});
                }(c))
            }
        };
    } function r(e, t) {
        var n; var r = {}; var i = {}; var t = U(e, t, P.trackedResourceTypes); var o = t.entries; var a = t.serverTiming; if (!o || !o.length) {
            return { restiming: {}, servertiming: [] };
        } for (n = 0; n < o.length; n++) {
            var s = o[n]; var u = (c = void 0 === (c = h[s.initiatorType]) ? 0 : c) + [N(s.startTime, 0), N(s.responseEnd, s.startTime), N(s.responseStart, s.startTime), N(s.requestStart, s.startTime), N(s.connectEnd, s.startTime), N(s.secureConnectionStart, s.startTime), N(s.connectStart, s.startTime), N(s.domainLookupEnd, s.startTime), N(s.domainLookupStart, s.startTime), N(s.redirectEnd, s.startTime), N(s.redirectStart, s.startTime)].map(H).join(",").replace(/,+$/, ""); var c = (function O(e) {
                var t; var n; if (e.encodedBodySize || e.decodedBodySize || e.transferSize) {
                    t = e.transferSize; return [n = e.encodedBodySize, t ? t - n : "_", (e = e.decodedBodySize) ? e - n : 0].map(H).join(",").replace(/,+$/, "");
                } return "";
            }(s)); c !== "" && (u += M + y + c); s.hasOwnProperty("scriptAttrs") && (u += M + v + s.scriptAttrs); s.serverTiming && s.serverTiming.length && (u += M + _ + s.serverTiming.reduce(function(e, t, n) {
                var r = String(typeof t.duration !== "undefined" ? t.duration : t.value); r.substring(0, 2) === "0." && (r = r.substring(1)); var i = t.name || t.metric; return e += (n > 0 ? "," : "") + r + (function o(e, t) {
                    var n = ""; e && (n += e); t && (n += "." + t); n.length && (n = ":" + n); return n;
                }(a.indexed[i].index, a.indexed[i].descriptions[t.description]));
            }, "")); s.hasOwnProperty("linkAttrs") && (u += M + b + s.linkAttrs); if (s.workerStart && typeof s.workerStart === "number" && s.workerStart !== 0) {
                var l = N((function p(e) {
                    typeof e !== "number" && (e = 0); return Math.ceil(e || 0);
                }(s.workerStart)), s.startTime); u += M + E + H(l);
            }l = (function m(e, t) {
                var n; var r; var i; if (e && t) {
                    for (n = 0; n < t.length; n++) {
                        if (typeof (i = t[n]) === "string") {
                            if ((r = e.indexOf(i)) !== -1) {
                                e = e.substr(0, r + i.length) + "..."; break;
                            }
                        }
                        else {
                            i instanceof RegExp && i.test(e) && (e = e.replace(i, "$1") + "...");
                        }
                    }
                } return BOOMR.utils.cleanupURL(e, P.urlLimit);
            }(s.name, P.trimUrls)); if (s.hasOwnProperty("_data")) {
                var d; var f = ""; for (d in s._data) {
                    s._data.hasOwnProperty(d) && (f += M + w + d + ":" + s._data[d]);
                } typeof r[l] === "undefined" ? r[l] = u + f : r[l] += f;
            }
            else {
                r[l] !== undefined ? r[l] += "|" + u : s.visibleDimensions ? r[l] = M + B + s.visibleDimensions.map(Math.round).map(H).join(",").replace(/,+$/, "") + "|" + u : r[l] = u;
            } if (s.visibleDimensions) {
                i[s.latestTime] || (i[s.latestTime] = []); i[s.latestTime].push(s.visibleDimensions);
            }
        } return {
            restiming: (function g(e, t) {
                var n; var r; var i = 0; var o = []; for (n in e) {
                    e.hasOwnProperty(n) && o.push(n);
                } for (var a = 0; a < o.length; a++) {
                    n = o[a]; if (typeof e[n] === "object" && (r = g(e[n], !1))) {
                        delete e[n]; if (n === R) {
                            n = r.name; i++;
                        }
                        else {
                            n += r.name;
                        }e[n] = r.value;
                    }i++;
                } if (i !== 1) {
                    return !!t && e;
                } if (t) {
                    (t = {})[n] = e[n]; return t;
                } return { name: n, value: e[n] };
            }(S(r, P.splitAtPath), !0)),
            servertiming: a.lookup
        };
    } function u(e) {
        var t = []; if (!e || !e.length) {
            return t;
        } for (var n = 0; n < e.length; n++) {
            var r = e[n]; n !== e.length - 1 && r.fetchStart === e[n + 1].fetchStart || t.push({ fetchStart: r.fetchStart, responseEnd: r.responseStart || r.responseEnd });
        } return t;
    } function e(e, t) {
        var n; if (typeof JSON !== "undefined" && (n = r(e, t))) {
            BOOMR.info("Client supports Resource Timing API", "restiming"); i(n);
        }
    } function i(e) {
        BOOMR.addVar("restiming", JSON.stringify(e.restiming), !0); e.servertiming.length && BOOMR.addVar("servertiming", BOOMR.utils.serializeForUrl(e.servertiming), !0);
    }
}()); !(function() {
    var t; var n = { type: "ct", bandwidth: "bw", metered: "mt", effectiveType: "etype", downlinkMax: "lm", downlink: "dl", rtt: "rtt", saveData: "sd" }; if (typeof BOOMR.addVar === "function" && (t = typeof navigator === "object" ? navigator.connection || navigator.mozConnection || navigator.webkitConnection || navigator.msConnection : t)) {
        t.addEventListener && t.addEventListener("change", function() {
            e(); BOOMR.fireEvent("netinfo", t);
        }); e();
    } function e() {
        for (var e in n) {
            if (typeof t[e] !== "undefined") {
                BOOMR.removeVar("mob." + n[e]); t[e] && BOOMR.addVar("mob." + n[e], t[e]);
            }
        }
    }
}()); !(function() {
    var i; var u; var o; var a; var s; var c; var l; var d = {}; if (!BOOMR.plugins.Memory) {
        var f = !1; var O = {
            done: function() {
                if (i) {
                    BOOMR.removeVar("dom.res"); t(!0, function() {
                        var e; var t; var n = {}; if (d && typeof d.getEntriesByType === "function" && (e = d.getEntriesByType("resource")) && e.length) {
                            BOOMR.addVar("dom.res", e.length); t = BOOMR.window.document.createElement("a"); [].forEach.call(e, function(e) {
                                t.href = e.name; n[t.hostname] = !0;
                            }); BOOMR.addVar("dom.doms", Object.keys(n).length);
                        }
                    }, "resources"); o && BOOMR.addVar({ "mem.total": o.totalJSHeapSize, "mem.limit": o.jsHeapSizeLimit, "mem.used": o.usedJSHeapSize }); t(c && l, function() {
                        BOOMR.addVar({ "mem.lsln": c.length, "mem.ssln": l.length }); window.JSON && typeof JSON.stringify === "function" && BOOMR.addVar({ "mem.lssz": JSON.stringify(c).length, "mem.sssz": JSON.stringify(l).length });
                    }, "localStorage"); t(a, function() {
                        BOOMR.addVar({ "scr.xy": a.width + "x" + a.height, "scr.bpp": a.colorDepth + "/" + (a.pixelDepth || "") }); a.orientation && BOOMR.addVar("scr.orn", a.orientation.angle + "/" + a.orientation.type); i.devicePixelRatio > 1 && BOOMR.addVar("scr.dpx", i.devicePixelRatio); var e = BOOMR.utils.scroll(); (e.x || e.y) && BOOMR.addVar("scr.sxy", e.x + "x" + e.y);
                    }, "screen"); t(s, function() {
                        s.hardwareConcurrency && BOOMR.addVar("cpu.cnc", s.hardwareConcurrency); s.maxTouchPoints && BOOMR.addVar("scr.mtp", s.maxTouchPoints); s.connection && s.connection.hasOwnProperty("saveData") && BOOMR.addVar("net.sd", s.connection.saveData ? 1 : 0);
                    }, "navigator"); t(!0, function() {
                        var t; BOOMR.addVar({ "dom.ln": e("*"), "dom.sz": u.documentElement.innerHTML.length, "dom.ck": u.cookie.length }); t = {}; BOOMR.addVar(e("img", ["dom.img", "dom.img.ext", "dom.img.uniq"], function(e) {
                            return e.src && !e.src.toLowerCase().match(/^(?:about:|javascript:|data:|#)/);
                        }, function(e) {
                            return !(t[e.currentSrc || e.src] = t.hasOwnProperty(e.currentSrc || e.src));
                        })); t = {}; BOOMR.addVar(e("script", ["dom.script", "dom.script.ext", "dom.script.uniq"], function(e) {
                            return e.src && !e.src.toLowerCase().match(/^(?:about:|javascript:|#)/);
                        }, function(e) {
                            return !(t[e.src] = t.hasOwnProperty(e.src));
                        })); t = {}; BOOMR.addVar(e("iframe", ["dom.iframe", "dom.iframe.ext", "dom.iframe.uniq"], function(e) {
                            return e.src && !e.src.toLowerCase().match(/^(?:about:|javascript:|#)/);
                        }, function(e) {
                            return !(t[e.src] = t.hasOwnProperty(e.src));
                        })); t = {}; BOOMR.addVar(e("link", ["dom.link", "dom.link.css", "dom.link.css.uniq"], function(e) {
                            return e.rel && e.rel.toLowerCase() === "stylesheet" && e.href && !e.href.toLowerCase().match(/^(?:about:|javascript:|#)/);
                        }, function(e) {
                            return !(t[e.href] = t.hasOwnProperty(e.href));
                        }));
                    }, "dom");
                }
            }
        }; BOOMR.plugins.Memory = {
            init: function() {
                var e; try {
                    i = BOOMR.window; u = i.document; d = BOOMR.getPerformance(); e = i.console; a = i.screen; s = i.navigator; try {
                        c = i.localStorage; l = i.sessionStorage;
                    }
                    catch (n) {} if (s && s.battery) {
                        s.battery;
                    }
                    else if (s && typeof s.getBattery === "function") {
                        var t = s.getBattery(); t && typeof t.then === "function" ? t.then(function(e) {
                            0;
                        }) : typeof t === "object" && t.hasOwnProperty("level") && 0;
                    }
                }
                catch (r) {
                    BOOMR.addError(r, "Memory.init");
                }o = d && d.memory ? d.memory : e && e.memory ? e.memory : null; if (O.initialized) {
                    return this;
                } O.initialized = !0; BOOMR.subscribe("before_beacon", O.done, null, O); return this;
            },
            is_complete: function() {
                return !0;
            }
        };
    } function e(e, t) {
        var n; var r; var i; var o; var a; try {
            r = (n = u.getElementsByTagName(e)).length; if (t && t.length) {
                (i = {})[t[0]] = r; for (o = 2; r > 0 && o < arguments.length && o - 1 < t.length; o++) {
                    if (typeof (a = arguments[o]) === "function") {
                        try {
                            if ((n = BOOMR.utils.arrayFilter(n, a)).length !== r) {
                                r = n.length; i[t[o - 1]] = r;
                            }
                        }
                        catch (s) {
                            if (!f) {
                                f = !0; BOOMR.addError(s, "Memory.nodeList." + e + ".filter[" + (o - 2) + "]");
                            }
                        }
                    }
                }
            } return i || r;
        }
        catch (s) {
            BOOMR.addError(s, "Memory.nodeList." + e); return 0;
        }
    } function t(e, t, n) {
        if (e) {
            try {
                t();
            }
            catch (r) {
                BOOMR.addError(r, "Memory.done." + n);
            }
        }
    }
}()); !(function() {
    if (!BOOMR.plugins.CACHE_RELOAD) {
        var t = { url: "" }; BOOMR.plugins.CACHE_RELOAD = {
            init: function(e) {
                BOOMR.utils.pluginConfig(t, e, "CACHE_RELOAD", ["url"]); if (!t.url) {
                    return this;
                } e = document.createElement("iframe"); e.style.display = "none"; e.src = t.url; document.body.appendChild(e); return this;
            },
            is_complete: function() {
                return !0;
            }
        };
    }
}()); !(function() {
    BOOMR.utils = BOOMR.utils || {}; if (!BOOMR.utils || !BOOMR.utils.Compression) {
        var a = BOOMR.utils.Compression = {}; a.jsUrl = function s(e) {
            function t(e) {
                return /[^\w-.]/.test(e) ? e = e.replace(/[^\w-.]/g, function(e) {
                    return e === "$" ? "!" : (e = e.charCodeAt(0)) < 256 ? "*" + ("00" + e.toString(16)).slice(-2) : "**" + ("0000" + e.toString(16)).slice(-4);
                }) : e;
            } var n = []; switch (typeof e) {
            case "number": return isFinite(e) ? "~" + e : "~null"; case "string": return "~'" + t(e); case "boolean": return "~" + e; case "object": if (!e) {
                return "~null";
            } if (BOOMR.utils.isArray(e)) {
                    for (var r = 0; r < e.length; r++) {
                        r in e && (n[r] = a.jsUrl(e[r]) || "~null");
                    } return "~(" + (n.join("") || "~") + ")";
                } for (var i in e) {
                    if (e.hasOwnProperty(i)) {
                        var o = a.jsUrl(e[i]); o && n.push(t(i) + o);
                    }
                } return "~(" + n.sort().join("~") + ")"; default: return undefined;
            }
        };
    }
}()); !(function(e, t) {
    "use strict";

    e.ErrorStackParser = t();
}(this, function ErrorStackParser() {
    "use strict";

    var t = /(^|@)\S+\:\d+/; var n = /^\s*at .*(\S+\:\d+|\(native\))/m; var r = /^(eval@)?(\[native code\])?$/; function i(e, t, n) {
        if (typeof Array.prototype.map === "function") {
            return e.map(t, n);
        } for (var r = new Array(e.length), i = 0; i < e.length; i++) {
            r[i] = t.call(n, e[i]);
        } return r;
    } function o(e, t, n) {
        if (typeof Array.prototype.filter === "function") {
            return e.filter(t, n);
        } for (var r = [], i = 0; i < e.length; i++) {
            t.call(n, e[i]) && r.push(e[i]);
        } return r;
    } return {
        parse: function a(e) {
            if (typeof e.stacktrace !== "undefined" || typeof e["opera#sourceloc"] !== "undefined") {
                return this.parseOpera(e);
            } if (e.stack && e.stack.match(n)) {
                return this.parseV8OrIE(e);
            } if (e.stack) {
                return this.parseFFOrSafari(e);
            } throw new Error("Cannot parse given Error object");
        },
        extractLocation: function s(e) {
            if (e.indexOf(":") === -1) {
                return [e];
            } var t = e.replace(/[\(\)\s]/g, "").split(":"); var n = t.pop(); var e = t[t.length - 1]; if (isNaN(parseFloat(e)) || !isFinite(e)) {
                return [t.join(":"), n, undefined];
            } e = t.pop(); return [t.join(":"), e, n];
        },
        parseV8OrIE: function u(e) {
            return i(o(e.stack.split("\n"), function(e) {
                return !!e.match(n);
            }, this), function(e) {
                var t = (e = e.indexOf("(eval ") > -1 ? e.replace(/eval code/g, "eval").replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, "") : e).replace(/^\s+/, "").replace(/\(eval code/g, "(").split(/\s+/).slice(1); var n = this.extractLocation(t.pop()); return { functionName: t.join(" ") || undefined, fileName: n[0] === "eval" ? undefined : n[0], lineNumber: n[1], columnNumber: n[2], source: e };
            }, this);
        },
        parseFFOrSafari: function c(e) {
            return i(o(e.stack.split("\n"), function(e) {
                return !e.match(r);
            }, this), function(e) {
                if ((e = e.indexOf(" > eval") > -1 ? e.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ":$1") : e).indexOf("@") === -1 && e.indexOf(":") === -1) {
                    return { functionName: e };
                } var t = e.split("@"); var n = this.extractLocation(t.pop()); return { functionName: t.join("@") || undefined, fileName: n[0], lineNumber: n[1], columnNumber: n[2], source: e };
            }, this);
        },
        parseOpera: function l(e) {
            return !e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e);
        },
        parseOpera9: function d(e) {
            for (var t = /Line (\d+).*script (?:in )?(\S+)/i, n = e.message.split("\n"), r = [], i = 2, o = n.length; i < o; i += 2) {
                var a = t.exec(n[i]); a && r.push({ fileName: a[2], lineNumber: a[1], source: n[i] });
            } return r;
        },
        parseOpera10: function f(e) {
            for (var t = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, n = e.stacktrace.split("\n"), r = [], i = 0, o = n.length; i < o; i += 2) {
                var a = t.exec(n[i]); a && r.push({ functionName: a[3] || undefined, fileName: a[2], lineNumber: a[1], source: n[i] });
            } return r;
        },
        parseOpera11: function O(e) {
            return i(o(e.stack.split("\n"), function(e) {
                return !!e.match(t) && !e.match(/^Error created at/);
            }, this), function(e) {
                var t; var n = e.split("@"); var r = this.extractLocation(n.pop()); var n = n.shift() || ""; return { functionName: n.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^\)]*\)/g, "") || undefined, args: (t = n.match(/\(([^\)]*)\)/) ? n.replace(/^[^\(]+\(([^\)]*)\)$/, "$1") : t) === undefined || t === "[arguments not available]" ? undefined : t.split(","), fileName: r[0], lineNumber: r[1], columnNumber: r[2], source: e };
            }, this);
        }
    };
})); !(function() {
    if (!BOOMR.plugins.Errors) {
        var O = ["BOOMR_addError", "createStackForSend", "BOOMR.window.console.error", "BOOMR.plugins.Errors.init", "BOOMR.window.onerror", "BOOMR_plugins_errors_"]; var p = ["Object.send", "b.send", "wrap", "Anonymous function"]; var m = ["/boomerang"]; g.prototype.equals = function(e) {
            return typeof e === "object" && (this.code === e.code && (this.message === e.message && (this.functionName === e.functionName && (this.fileName === e.fileName && (this.lineNumber === e.lineNumber && (this.columnNumber === e.columnNumber && (this.stack === e.stack && (this.type === e.type && this.source === e.source))))))));
        }; g.fromError = function(e, t, n) {
            var r; var i; var o; var a; var s; var u; var c; var l; var d = !1; var f = BOOMR.now(); if (!e) {
                return null;
            } if (e.stack) {
                e.stack.length > 5e3 && (e.stack = e.stack.substr(0, 5e3)); if ((i = ErrorStackParser.parse(e)) && i.length) {
                    if (e.generatedStack) {
                        if (i.length >= 4 && i[1].functionName && i[1].functionName.indexOf("createStackForSend") !== -1) {
                            i = i.slice(3); d = !0;
                        } if (i.length >= 3 && i[0].functionName && i[0].functionName.indexOf("createStackForSend") !== -1) {
                            i = i[1].fileName === i[2].fileName ? i.slice(3) : i.slice(2); d = !0;
                        } if (i.length >= 1 && i[0].functionName && i[0].functionName.indexOf("BOOMR_plugins_errors") !== -1) {
                            i = i.slice(1); d = !0;
                        }
                    } for (o = 0; o < i.length; o++) {
                        u = !1; if (l = (c = i[o]).functionName) {
                            for (a = 0; a < O.length; a++) {
                                if (l.indexOf(O[a]) !== -1) {
                                    i.splice(o, 1); o--; u = d = !0; break;
                                }
                            } if (!u && c.fileName) {
                                for (a = 0; a < m.length; a++) {
                                    if (c.fileName.indexOf(m[a]) !== -1) {
                                        for (s = 0; s < p.length; s++) {
                                            if (l.indexOf(p[s]) !== -1) {
                                                i.splice(o, 1); o--; u = d = !0; break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } if (i.length) {
                        r = i[0]; !d && typeof e.lineNumber !== "undefined" || (e.lineNumber = r.lineNumber); !d && typeof e.columnNumber !== "undefined" || (e.columnNumber = r.columnNumber); !d && typeof e.functionName !== "undefined" || (e.functionName = r.functionName); !d && typeof e.fileName !== "undefined" || (e.fileName = r.fileName);
                    }e.stack && (e.stack = e.stack.replace(/\s\s+/g, " "));
                }
            }
            else {
                (e.functionName || e.fileName || e.lineNumber || e.columnNumber) && (i = [{ lineNumber: e.lineNumber, columnNumber: e.columnNumber, fileName: e.fileName, functionName: e.functionName }]);
            } typeof e.message === "string" && typeof e.message.indexOf === "function" && e.message.indexOf("ReferenceError:") !== -1 && e.name === "Error" && (e.name = "ReferenceError"); return new g({ code: e.code || undefined, message: e.message || undefined, functionName: e.functionName || undefined, fileName: e.fileName || undefined, lineNumber: e.lineNumber || undefined, columnNumber: e.columnNumber || undefined, stack: e.stack || undefined, type: e.name || undefined, source: n, via: t, frames: i, extra: e.extra || undefined, timestamp: e.timestamp || f });
        }; var f = {
            onError: undefined,
            monitorGlobal: !0,
            monitorNetwork: !0,
            monitorConsole: !0,
            monitorEvents: !1,
            monitorTimeout: !1,
            monitorRejections: !1,
            monitorReporting: !1,
            sendAfterOnload: !1,
            maxErrors: 10,
            sendInterval: 1e3,
            sendIntervalDuringLoad: 2500,
            sendIntervalId: -1,
            maxEvents: 10,
            isDuringLoad: !0,
            initialized: !1,
            autorun: !0,
            errors: [],
            q: [],
            events: [],
            reportingObserver: undefined,
            send: function(t, n, r) {
                var i = BOOMR.now(); if (t && !0 !== t.reported) {
                    t.reported = !0; n = n || BOOMR.plugins.Errors.VIA_APP; r = r || BOOMR.plugins.Errors.SOURCE_APP; if (t.stack || t.noStack) {
                        t.timestamp = t.timestamp || i; f.addError(t, n, r);
                    }
                    else {
                        !(function createStackForSend() {
                            try {
                                throw Error(t);
                            }
                            catch (e) {
                                (t = e).generatedStack = !0; t.timestamp = t.timestamp || i; f.addError(t, n, r);
                            }
                        }());
                    }
                }
            },
            addError: function(e, t, n) {
                var r; var i; var o = BOOMR.now(); if (f.isDuringLoad || f.sendAfterOnload) {
                    if (f.onError) {
                        try {
                            r = f.onError(e);
                        }
                        catch (a) {
                            r = !1;
                        } if (!r) {
                            return;
                        }
                    } if (!(f.errors.length >= f.maxErrors)) {
                        n = g.fromError(e, t, n); i = f.mergeDuplicateErrors(f.errors, n, !1); BOOMR.fireEvent("error", i || n); f.mergeDuplicateErrors(f.q, n, !0); !BOOMR.hasSentPageLoadBeacon() && f.autorun || f.sendIntervalId !== -1 || i || (f.sendIntervalId = setTimeout(function() {
                            f.sendIntervalId = -1; f.q.length !== 0 && BOOMR.sendBeaconWhenReady({ "rt.start": "manual", "http.initiator": "error", api: 1, "rt.tstart": o, "rt.end": o }, function() {
                                f.addErrorsToBeacon();
                            }, this);
                        }, f.isDuringLoad ? f.sendIntervalDuringLoad : f.sendInterval));
                    }
                }
            },
            findDuplicateError: function(e, t) {
                if (!BOOMR.utils.isArray(e) || void 0 === t) {
                    return undefined;
                } for (var n = 0; n < e.length; n++) {
                    if (e[n].equals(t)) {
                        return e[n];
                    }
                } return undefined;
            },
            mergeDuplicateErrors: function(e, t, n) {
                if (!BOOMR.utils.isArray(e) || void 0 === t) {
                    return undefined;
                } var r = f.findDuplicateError(e, t); if (r) {
                    n && (r.count += t.count); return r;
                }e.push(t); return undefined;
            },
            pageReady: function() {
                f.isDuringLoad = !1;
            },
            getErrors: function() {
                return f.errors.length !== 0 && f.errors;
            },
            getErrorsForUrl: function(e) {
                e = f.compressErrors(e); return BOOMR.utils.serializeForUrl(e);
            },
            addErrorsToBeacon: function() {
                if (f.q.length) {
                    var e = this.getErrorsForUrl(f.q); e && BOOMR.addVar("err", e, !0); f.q = [];
                }
            },
            beforeBeacon: function(e) {
                e && typeof e.early !== "undefined" || f.addErrorsToBeacon();
            },
            wrapFn: function(o, a, s, u, c) {
                var l; var d = a[o]; if (typeof d === "function") {
                    o === "addEventListener" && (l = a.removeEventListener); BOOMR.utils.overwriteNative(a, o, function BOOMR_plugins_errors_wrapped_function() {
                        try {
                            var e = Array.prototype.slice.call(arguments); var t = e[u]; var n = s ? this === window ? BOOMR.window : this : a; var r = f.wrap(t, n, c); e[u] = r; if (o === "addEventListener") {
                                if (!f.trackFn(n, e[0], t, e[2], r)) {
                                    return;
                                } l && l.apply(n, arguments);
                            } return d.apply(n, e);
                        }
                        catch (i) {
                            f.send(i, c); throw i;
                        }
                    });
                }
            },
            trackFn: function(e, t, n, r, i) {
                if (!e) {
                    return !1;
                } if (f.trackedFnIdx(e, t, n, r) !== -1) {
                    return !1;
                } e._bmrEvents || (e._bmrEvents = []); r = !0 === (r && r.capture || r); e._bmrEvents.push([t, n, r, i]); return !0;
            },
            trackedFnIdx: function(e, t, n, r) {
                var i; var o; if (e) {
                    e._bmrEvents || (e._bmrEvents = []); r = !0 === (r && r.capture || r); for (i = 0; i < e._bmrEvents.length; i++) {
                        if ((o = e._bmrEvents[i])[0] === t && o[1] === n && o[2] === r) {
                            return i;
                        }
                    } return -1;
                }
            },
            wrapRemoveEventListener: function(e) {
                var i; var o; var t = "removeEventListener"; var a = e[t]; typeof a === "function" && BOOMR.utils.overwriteNative(e, t, function BOOMR_plugins_errors_wrapped_removeEventListener(e, t, n) {
                    var r = this === window ? BOOMR.window : this; if ((i = f.trackedFnIdx(r, e, t, n)) !== -1) {
                        o = r._bmrEvents[i][3]; a.call(r, e, o, n); r._bmrEvents.splice(i, 1);
                    }
                    else {
                        a.call(r, e, t, n);
                    }
                });
            },
            wrap: function(t, n, r) {
                if (typeof t !== "function") {
                    return t;
                } r = r || BOOMR.plugins.Errors.VIA_APP; BOOMR_check_doc_domain(); return function BOOMR_plugins_errors_wrap() {
                    try {
                        return t.apply(n, arguments);
                    }
                    catch (e) {
                        if (e.number === -2146823277 && (r === BOOMR.plugins.Errors.VIA_EVENTHANDLER || r === BOOMR.plugins.Errors.VIA_TIMEOUT)) {
                            return;
                        } BOOMR.isUnloaded || f.send(e, r); throw e;
                    }
                };
            },
            test: function() {
                var e; if (arguments.length === 0) {
                    return undefined;
                } if (typeof (e = arguments[0]) !== "function") {
                    return undefined;
                } var t = arguments.length > 1 ? arguments[1] : BOOMR.window; var n = Array.prototype.slice.call(arguments, 2); return f.wrap(e, t).apply(t, n);
            },
            normalizeToString: function(e) {
                return void 0 === e ? "undefined" : e === null ? "null" : typeof e === "number" && isNaN(e) ? "NaN" : e === "" ? "(empty string)" : e === 0 ? "0" : e ? typeof e === "function" ? "(function)" : e && typeof e.toString === "function" ? e.toString() : "(unknown)" : "false";
            },
            compressErrors: function(e) {
                for (var t, n, r, i, o, a, s, u = 0, c = BOOMR.window.location.origin, l = 0; l < e.length; l++) {
                    s = {}; (n = e[l]).count !== 1 && (s.n = n.count); if (typeof n.timestamp === "number") {
                        u = n.timestamp; s.d = n.timestamp.toString(36);
                    } if (n.frames.length) {
                        s.f = []; for (t = 0; t < n.frames.length; t++) {
                            (r = n.frames[t]).lineNumber && (r.lineNumber = parseInt(r.lineNumber, 10)); r.columnNumber && (r.columnNumber = parseInt(r.columnNumber, 10)); o = { l: r.lineNumber, c: r.columnNumber }; typeof r.fileName === "string" && (r.fileName.indexOf(c) !== -1 ? o.wo = r.fileName.replace(c, "") : o.w = r.fileName); typeof r.functionName === "string" && (o.f = r.functionName); s.f.push(o);
                        }
                    } if (n.events.length) {
                        s.e = []; for (t = 0; t < n.events.length; t++) {
                            a = { t: (i = n.events[t]).type, d: u ? u - i.timestamp : i.timestamp }; if (i.type === BOOMR.plugins.Errors.EVENT_CLICK) {
                                i.id && (a.i = i.id); i.name && (a.n = i.name); i.tagName && (a.g = i.tagName);
                            }
                            else if (i.type === BOOMR.plugins.Errors.EVENT_NETWORK) {
                                i.url && (a.u = i.url); i.method && (a.m = i.method); i.result && (a.r = i.result);
                            }
                            else if (i.type === BOOMR.plugins.Errors.EVENT_LOG) {
                                i.severity && (a.s = i.severity); i.message && (a.m = i.message);
                            }s.e.push(a);
                        }
                    }n.source !== BOOMR.plugins.Errors.SOURCE_APP && (s.s = n.source); typeof n.via !== "undefined" && n.via !== BOOMR.plugins.Errors.VIA_APP && (s.v = n.via); typeof n.type !== "undefined" && n.type !== "Error" && (s.t = n.type); n.code && (s.c = n.code); n.message && (s.m = n.message); n.extra && (s.x = n.extra); e[l] = s;
                } return e;
            }
        }; var s = BOOMR.plugins.Errors = {
            init: function(e) {
                var n; var r; BOOMR.utils.pluginConfig(f, e, "Errors", ["onError", "monitorGlobal", "monitorNetwork", "monitorConsole", "monitorEvents", "monitorTimeout", "monitorReporting", "monitorRejections", "sendAfterOnload", "sendInterval", "maxErrors"]); if (f.initialized) {
                    return this;
                } e && typeof e.autorun !== "undefined" && (f.autorun = e.autorun); f.initialized = !0; BOOMR.subscribe("before_beacon", f.beforeBeacon, null, f); BOOMR.subscribe("page_ready", f.pageReady, null, f); BOOMR.registerEvent("error"); if (f.monitorGlobal) {
                    try {
                        (!BOOMR.globalOnError || BOOMR.window.onerror && !BOOMR.window.onerror._bmr) && (BOOMR.globalOnError = BOOMR.window.onerror); BOOMR.utils.overwriteNative(BOOMR.window, "onerror", function BOOMR_plugins_errors_onerror(e, t, n, r, i) {
                            (i = void 0 === i && typeof e === "object" && typeof e.error === "object" && e.error !== null ? e.error : i) != null ? f.send(i, s.VIA_GLOBAL_EXCEPTION_HANDLER) : f.send({ message: e, fileName: t, lineNumber: n, columnNumber: r, noStack: !0 }, s.VIA_GLOBAL_EXCEPTION_HANDLER); return typeof BOOMR.globalOnError === "function" && BOOMR.globalOnError.apply(BOOMR.window, arguments);
                        }); if (BOOMR.globalErrors) {
                            for (var i = 0; i < BOOMR.globalErrors.length; i++) {
                                f.send(BOOMR.globalErrors[i], s.VIA_GLOBAL_EXCEPTION_HANDLER);
                            } delete BOOMR.globalErrors;
                        }
                    }
                    catch (t) {}
                }f.monitorNetwork && BOOMR.subscribe("xhr_error", function BOOMR_plugins_errors_onxhrerror(e) {
                    f.send({ code: e.status, message: e.url, noStack: !0 }, s.VIA_NETWORK);
                }); f.monitorRejections && BOOMR.window.PromiseRejectionEvent && BOOMR.utils.addListener(BOOMR.window, "unhandledrejection", function o(e) {
                    var t; var n = "Unhandled Promise Rejection"; if (e && e.reason) {
                        if (typeof e.reason === "string") {
                            n = e.reason;
                        }
                        else {
                            typeof e.reason.stack === "string" && (t = e.reason.stack); n = typeof e.reason.message === "undefined" ? f.normalizeToString(e.reason) : f.normalizeToString(e.reason.message);
                        }f.send({ message: n, stack: t, noStack: !t }, s.VIA_REJECTION);
                    }
                }, !0); if (f.monitorConsole) {
                    BOOMR.window.console || (BOOMR.window.console = {}); BOOMR.globalConsole = BOOMR.window.console.error; try {
                        BOOMR.utils.overwriteNative(BOOMR.window.console, "error", function BOOMR_plugins_errors_console_error() {
                            var e = Array.prototype.slice.call(arguments); e.length === 1 ? f.send(f.normalizeToString(e[0]), s.VIA_CONSOLE) : f.send(f.normalizeToString(e), s.VIA_CONSOLE); typeof BOOMR.globalConsole === "function" && (typeof BOOMR.globalConsole.apply === "function" ? BOOMR.globalConsole.apply(this, e) : BOOMR.globalConsole(e[0], e[1], e[2]));
                        });
                    }
                    catch (a) {}
                } if (f.monitorEvents) {
                    if (BOOMR.window.EventTarget) {
                        f.wrapFn("addEventListener", BOOMR.window.EventTarget.prototype, !0, 1, s.VIA_EVENTHANDLER); f.wrapRemoveEventListener(BOOMR.window.EventTarget.prototype);
                    }
                    else {
                        if (BOOMR.window) {
                            f.wrapFn("addEventListener", BOOMR.window, !1, 1, s.VIA_EVENTHANDLER); f.wrapRemoveEventListener(BOOMR.window);
                        } if (BOOMR.window.Node) {
                            f.wrapFn("addEventListener", BOOMR.window.Node.prototype, !0, 1, s.VIA_EVENTHANDLER); f.wrapRemoveEventListener(BOOMR.window.Node.prototype);
                        } if (BOOMR.window.XMLHttpRequest) {
                            f.wrapFn("addEventListener", BOOMR.window.XMLHttpRequest.prototype, !0, 1, s.VIA_EVENTHANDLER); f.wrapRemoveEventListener(BOOMR.window.XMLHttpRequest.prototype);
                        }
                    }
                } if (f.monitorTimeout) {
                    f.wrapFn("setTimeout", BOOMR.window, !1, 0, s.VIA_TIMEOUT); f.wrapFn("setInterval", BOOMR.window, !1, 0, s.VIA_TIMEOUT);
                } if (f.monitorReporting && BOOMR.window.ReportingObserver) {
                    f.reportingObserver = new BOOMR.window.ReportingObserver(function(e, t) {
                        if (BOOMR.utils.isArray(e)) {
                            for (i = 0; i < e.length; i++) {
                                n = e[i]; (r = n && n.body && (n.body.message || n.body.reason)) && f.send({ message: r, fileName: n.body.sourceFile || n.url, lineNumber: n.body.lineNumber, columnNumber: n.body.columnNumber, noStack: !0 }, s.VIA_REPORTING_API);
                            }
                        }
                    }, { buffered: !0 }); f.reportingObserver.observe();
                } return this;
            },
            is_complete: function() {
                return !0;
            },
            is_supported: function() {
                return f.initialized;
            },
            SOURCE_APP: 1,
            SOURCE_BOOMERANG: 2,
            VIA_APP: 1,
            VIA_GLOBAL_EXCEPTION_HANDLER: 2,
            VIA_NETWORK: 3,
            VIA_CONSOLE: 4,
            VIA_EVENTHANDLER: 5,
            VIA_TIMEOUT: 6,
            VIA_REJECTION: 7,
            VIA_REPORTING_API: 8,
            EVENT_CLICK: 1,
            EVENT_NETWORK: 2,
            EVENT_LOG: 3,
            send: f.send,
            wrap: f.wrap,
            test: f.test,
            BoomerangError: g
        };
    } function g(e) {
        typeof (e = e || {}).count === "number" || typeof e.count === "string" ? this.count = parseInt(e.count, 10) : this.count = 1; typeof e.timestamp === "number" ? this.timestamp = e.timestamp : this.timestamp = BOOMR.now(); typeof e.code !== "number" && typeof e.code !== "string" || (this.code = parseInt(e.code, 10)); typeof e.message === "string" && (this.message = e.message); typeof e.functionName === "string" && (this.functionName = e.functionName); typeof e.fileName === "string" && (this.fileName = e.fileName); typeof e.lineNumber !== "number" && typeof e.lineNumber !== "string" || (this.lineNumber = parseInt(e.lineNumber, 10)); typeof e.columnNumber !== "number" && typeof e.columnNumber !== "string" || (this.columnNumber = parseInt(e.columnNumber, 10)); typeof e.stack === "string" && (this.stack = e.stack); typeof e.type === "string" && (this.type = e.type); typeof e.extra !== "undefined" && (this.extra = e.extra); this.source = typeof e.source === "number" || typeof e.source === "string" ? parseInt(e.source, 10) : BOOMR.plugins.Errors.SOURCE_APP; typeof e.via !== "number" && typeof e.via !== "string" || (this.via = parseInt(e.via, 10)); BOOMR.utils.isArray(e.frames) ? this.frames = e.frames : this.frames = []; BOOMR.utils.isArray(e.events) ? this.events = e.events : this.events = [];
    }
}()); !(function() {
    if (!BOOMR.plugins.TPAnalytics) {
        var l = {
            complete: !1,
            clientids: !1,
            dropParams: [],
            googleAnalytics: function() {
                var e; var t; var n; var r; var i = {}; var o = BOOMR.window; var a = ["utm_source", "utm_medium", "utm_term", "utm_content", "utm_campaign"]; if (l.clientids) {
                    if (typeof o.ga === "function") {
                        try {
                            o.ga(function(e) {
                                e && (i.clientid = e.get("clientId"));
                            }); i.clientid || typeof o.ga.getAll !== "function" || (r = o.ga.getAll()) && r.length > 0 && (i.clientid = r[0].get("clientId"));
                        }
                        catch (s) {
                            d("googleAnalytics: " + s);
                        }
                    }i.clientid || ((r = BOOMR.utils.getCookie("_ga")) ? (r = r.split(".")) && r.length === 4 && (i.clientid = r[2] + "." + r[3]) : (r = (r = BOOMR.utils.getCookie("__utma")) && r.split(".")) && r.length === 6 && (i.clientid = r[1] + "." + r[2]));
                } for (e = 0; e < a.length; e++) {
                    t = a[e]; (n = BOOMR.utils.getQueryParamValue(t)) && (i[t] = n);
                } return i;
            },
            adobeAnalytics: function() {
                var e; var t; var n; var r; var i = {}; var o = BOOMR.window; if (typeof o._satellite !== "undefined" || typeof o.mboxCreate === "function" || typeof o.Visitor === "function" || typeof o.s === "object") {
                    if (l.clientids) {
                        if (typeof o.s === "object" && typeof o.s.visitor === "object" && typeof o.s.visitor.getAnalyticsVisitorID === "function" && typeof o.s.visitor.getMarketingCloudVisitorID === "function") {
                            try {
                                (t = o.s.visitor.getMarketingCloudVisitorID()) && (i.mid = t); (e = o.s.visitor.getAnalyticsVisitorID()) && (i.aid = o.s.visitor.getAnalyticsVisitorID());
                            }
                            catch (a) {
                                d("adobeAnalytics: " + a);
                            }
                        }
                        else if ((n = /AMCV_([A-Z0-9]+)%40AdobeOrg/.exec(o.document.cookie)) && typeof o.Visitor === "function" && typeof o.Visitor.getInstance === "function") {
                            try {
                                if ((r = o.Visitor.getInstance(n[1] + "@AdobeOrg")) && typeof r.getAnalyticsVisitorID === "function" && typeof r.getMarketingCloudVisitorID === "function") {
                                    (t = r.getMarketingCloudVisitorID()) && (i.mid = t); (e = r.getAnalyticsVisitorID()) && (i.aid = r.getAnalyticsVisitorID());
                                }
                            }
                            catch (a) {
                                d("adobeAnalytics: " + a);
                            }
                        }
                        else {
                            (e = (e = BOOMR.utils.getCookie("s_vi")) ? (r = /\|([^\[]+)/.exec(e)) && r.length > 0 ? r[1] : "" : BOOMR.utils.getCookie("s_fid")) && (i.aid = e);
                        }
                    } if (typeof o.s === "object") {
                        typeof o.s.campaign === "string" && o.s.campaign && (i.campaign = o.s.campaign); typeof o.s.purchaseID === "string" && o.s.purchaseID && (i.purchaseid = o.s.purchaseID);
                    }
                } return i;
            },
            ibmAnalytics: function() {
                var e; var t; var n; var r; var i; var o; var a = {}; var s = BOOMR.window; var u = { cm_mmc: [/([^&#]+?)-_-([^&#]+?)-_-([^&#]+?)-_-([^&#]+)/, ["mmc_vendor", "mmc_category", "mmc_placement", "mmc_item"]], cm_sp: [/([^&#]+?)-_-([^&#]+?)-_-([^&#]+)/, ["sp_type", "sp_promotion", "sp_link"]], cm_re: [/([^&#]+?)-_-([^&#]+?)-_-([^&#]+)/, ["re_version", "re_pagearea", "re_link"]] }; if (l.clientids && typeof s.cmRetrieveUserID === "function") {
                    try {
                        s.cmRetrieveUserID(function(e) {
                            a.coreid = e;
                        });
                    }
                    catch (c) {
                        d("ibmAnalytics: " + c);
                    }
                } for (r in u) {
                    if (u.hasOwnProperty(r) && (e = BOOMR.utils.getQueryParamValue(r))) {
                        i = u[r][0]; o = u[r][1]; if ((t = i.exec(e)) && t.length > o.length) {
                            for (n = 0; n < o.length; n++) {
                                t[n + 1] && (a[o[n]] = decodeURIComponent(t[n + 1]));
                            }
                        }
                    }
                } return a;
            },
            done: function(e, t) {
                var n; var r; var i = { ga: this.googleAnalytics, aa: this.adobeAnalytics, ia: this.ibmAnalytics }; if (!this.complete && (t === "load" || e && e.initiator === "spa_hard")) {
                    for (n in i) {
                        for (var o in r = i[n]()) {
                            var a = "tp." + n + "." + o; BOOMR.utils.inArray(a, this.dropParams) || BOOMR.addVar(a, r[o], !0);
                        }
                    } this.complete = !0; BOOMR.sendBeacon();
                }
            },
            prerenderToVisible: function() {
                this.complete = !1; this.done({}, "load");
            }
        }; BOOMR.plugins.TPAnalytics = {
            init: function(e) {
                BOOMR.utils.pluginConfig(l, e, "TPAnalytics", ["clientids", "dropParams"]); if (!l.initialized) {
                    BOOMR.utils.isArray(l.dropParams) || (l.dropParams = []); BOOMR.subscribe("page_ready", l.done, "load", l); BOOMR.subscribe("xhr_load", l.done, "xhr", l); BOOMR.subscribe("prerender_to_visible", l.prerenderToVisible, "load", l); l.initialized = !0;
                } return this;
            },
            is_complete: function() {
                return !0;
            }
        };
    } function d(e) {
        BOOMR.warn(e, "TPAnalytics");
    }
}()); !(function(n) {
    "use strict";

    var e; var t; void 0 !== n ? t = (e = n).UserTimingCompression : e = {}; var d; var r = d = {}; r.noConflict = function() {
        e.UserTimingCompression = t; return r;
    }; r.trimTiming = function(e, t) {
        typeof e !== "number" && (e = 0); typeof t !== "number" && (t = 0); e = Math.round(e), t = Math.round(t); return e === 0 ? 0 : e - t;
    }; r.toBase36 = function(e) {
        return typeof e === "number" ? e.toString(36) : "";
    }; r.findUserTimingForFrame = function(e) {
        var t; if (!e) {
            return [];
        } try {
            e.location && e.location.href; if (!("performance" in e && e.performance && e.performance.getEntriesByType)) {
                return t;
            } t = (t = e.performance.getEntriesByType("mark")).concat(e.performance.getEntriesByType("measure"));
        }
        catch (n) {
            return t;
        } return t;
    }; r.compressUserTiming = function(e, t) {
        var n; var r; var i; var o = 0; var a = {}; t = t || {}; if (!e || !e.length) {
            return [];
        } for (n = 0; n < e.length; n++) {
            typeof a[(r = e[n]).name] === "undefined" && (a[r.name] = []); r.entryType === "mark" ? a[r.name].push({ startTime: r.startTime }) : r.entryType === "measure" && a[r.name].push({ startTime: r.startTime, duration: r.duration });
        } for (i in a) {
            if (a.hasOwnProperty(i) && (!t.map || typeof t.map[i] !== "undefined")) {
                var s = a[i]; if (t.map && typeof t.map[i] !== "undefined") {
                    delete a[i]; i = t.map[i];
                } for (n = o = 0; n < s.length; n++) {
                    var u = s[n]; var c = l = (l = d.toBase36(d.trimTiming(u.startTime, o))) === "0" ? "" : l; if (typeof u.duration === "number") {
                        var l = d.toBase36(Math.round(u.duration)); c += "_"; l !== "0" && (c += l);
                    }o = u.startTime; s[n] = c;
                }a[i] = d.compressArray(s);
            }
        } return a;
    }; r.convertToTrie = function(e) {
        var t; var n; var r; var i; var o; var a; var s; var u = {}; if (!e) {
            return {};
        } for (t in e) {
            if (e.hasOwnProperty(t)) {
                r = e[t]; i = t.split(""); a = u; for (n = 0; n < i.length; n++) {
                    void 0 === (s = a[o = i[n]]) ? a = a[o] = n === i.length - 1 ? r : {} : typeof s === "string" || typeof s === "number" ? a = a[o] = { "!": s } : n === i.length - 1 ? a[o]["!"] = r : a = a[o];
                }
            }
        } return u;
    }; r.optimizeTrie = function(e, t) {
        var n; var r; var i = 0; if (!e) {
            return {};
        } for (n in e) {
            if (typeof e[n] === "object" && (r = this.optimizeTrie(e[n], !1))) {
                delete e[n]; e[n += r.name] = r.value;
            }i++;
        } if (i !== 1) {
            return !!t && e;
        } if (t) {
            (t = {})[n] = e[n]; return t;
        } return { name: n, value: e[n] };
    }; r.compressArray = function(e) {
        var t = 0; var n = ""; if (!e || e.length === 0 || e.constructor !== Array) {
            return "";
        } for (var r = 0; r < e.length; r++) {
            var i = e[r]; if (r < e.length - 1 && i === e[r + 1]) {
                t++;
            }
            else if (t > 0) {
                n += (n !== "" ? "." : "") + i + "*"; t >= 2 && (n += t + 1); t = 0;
            }
            else {
                n += (n !== "" ? "." : "") + i;
            }
        } return /^\d+$/.test(n) ? parseInt(n, 10) : n;
    }; r.getCompressedUserTiming = function(t) {
        var e = (t = t || {}).window || n; var e = this.findUserTimingForFrame(e); t.from && (e = e.filter(function(e) {
            return e.startTime + e.duration >= t.from;
        })); t.to && (e = e.filter(function(e) {
            return e.startTime <= t.to;
        })); return d.compressUserTiming(e, t);
    }; r.compressForUri = function(e) {
        if (typeof e !== "object") {
            return "";
        } var t; var n = !1; for (t in e) {
            if (e.hasOwnProperty(t)) {
                if (isNaN(t)) {
                    n = !1; break;
                }n = !0;
            }
        } if (n) {
            return "1" + d.flattenMap(e);
        } var r = d.convertToTrie(e); var i = d.optimizeTrie(r, !0); var o = d.jsUrl(i); var a = d.flattenArray(e); if (typeof a !== "string" || a.length === 0) {
            return "";
        } r = encodeURIComponent(o), i = encodeURIComponent(a); return r.length < i.length ? o : "0" + a;
    }; r.flattenArray = function(e) {
        var t = []; if (typeof e !== "object") {
            return "";
        } for (r in e) {
            if (e.hasOwnProperty(r)) {
                var n = (e[r] + "").replace("~", "%7E"); var r = r.replace("~", "%7E"); t.push(r + "~" + n);
            }
        } return t = t.join("~");
    }; r.flattenMap = function(e) {
        var t; var n = []; if (typeof e !== "object") {
            return "";
        } for (t in e) {
            if (e.hasOwnProperty(t)) {
                var r = parseInt(t, 10); var i = d.toBase36(r); if (!(r > 1331)) {
                    i.length > 1 && (i = "-" + ((i = d.toBase36(r - 36)).length === 1 ? "0" : "") + i); n.push(i + e[t]);
                }
            }
        }n.sort(); return n = n.join("~");
    }; r.jsUrl = function(n) {
        function r(e) {
            return /[^\w-.]/.test(e) ? e = e.replace(/[^\w-.]/g, function(e) {
                return e === "$" ? "!" : (e = e.charCodeAt(0)) < 256 ? "*" + ("00" + e.toString(16)).slice(-2) : "**" + ("0000" + e.toString(16)).slice(-4);
            }) : e;
        } switch (typeof n) {
        case "number": return isFinite(n) ? "~" + n : "~null"; case "string": return "~'" + r(n); case "boolean": return "~" + n; case "object": return n ? Array.isArray(n) ? "~(" + (n.map(function(e) {
            return d.jsUrl(e) || "~null";
        }).join("") || "~") + ")" : "~(" + Object.keys(n).map(function(e) {
            var t = d.jsUrl(n[e]); return t && r(e) + t;
        }).filter(function(e) {
            return e;
        }).sort()
            .join("~") + ")" : "~null"; default: return undefined;
        }
    }; void 0 !== e && (e.UserTimingCompression = r);
}(typeof window !== "undefined" ? window : undefined)); !(function() {
    if (!BOOMR.plugins.UserTiming) {
        var s = {
            complete: !1,
            initialized: !1,
            supported: !1,
            options: { from: 0, window: BOOMR.window },
            getUserTiming: function() {
                var e = this.findUserTimingForFrame(s.options.window); s.options.from && (e = e.filter(function(e) {
                    return e.startTime + e.duration >= s.options.from;
                })); var t = window.UserTimingCompression || BOOMR.window.UserTimingCompression; if (void 0 === t) {
                    if (e.length === 0) {
                        return null;
                    } for (var n = {}, r = 0, i = e.length; r < i; r++) {
                        var o = e[r]; n[o.entryType] = n[o.entryType] || {}; o.entryType === "mark" ? n[o.entryType][o.name] = o.startTime : o.entryType === "measure" && (n[o.entryType][o.name] = o.duration);
                    } return JSON.stringify(n);
                } var a = t.compressUserTiming(e); return t.compressForUri(a);
            },
            addEntriesToBeacon: function(e) {
                var t = BOOMR.hrNow(); if (!(this.complete || e && typeof e.early !== "undefined")) {
                    (e = this.getUserTiming()) && BOOMR.addVar("usertiming", e, !0); this.options.from = t; this.complete = !0;
                }
            },
            findUserTimingForFrame: function(e) {
                var t; if (!e) {
                    return [];
                } try {
                    e.location && e.location.href; if (!("performance" in e && e.performance && e.performance.getEntriesByType)) {
                        return t;
                    } t = (t = e.performance.getEntriesByType("mark")).concat(e.performance.getEntriesByType("measure"));
                }
                catch (n) {
                    return t;
                } return t;
            },
            clearMetrics: function(e) {
                this.complete = !1;
            },
            subscribe: function() {
                BOOMR.subscribe("before_beacon", this.addEntriesToBeacon, null, this); BOOMR.subscribe("beacon", this.clearMetrics, null, this);
            },
            pageReady: function() {
                this.checkSupport() && this.subscribe();
            },
            checkSupport: function() {
                if (this.supported) {
                    return !0;
                } var e = BOOMR.getPerformance(); if (e && typeof e.getEntriesByType === "function") {
                    var t = e.getEntriesByType("mark"); var e = e.getEntriesByType("measure"); if (BOOMR.utils.isArray(t) && BOOMR.utils.isArray(e)) {
                        BOOMR.info("Client supports UserTiming API", "usertiming"); return this.supported = !0;
                    }
                } return !1;
            }
        }; BOOMR.plugins.UserTiming = {
            init: function(e) {
                if (s.initialized) {
                    return this;
                } s.checkSupport() ? s.subscribe() : BOOMR.subscribe("page_ready", s.pageReady, null, s); s.initialized = !0; return this;
            },
            is_complete: function() {
                return !0;
            },
            is_supported: function() {
                return s.initialized && s.supported;
            }
        };
    }
}()); !(function() {
    function r(e, t, n) {
        var r = e.shift(); if (typeof r === "string") {
            var i = r.split("."); var o = BOOMR; var a = BOOMR; i[0] === "BOOMR" && i.shift(); for (;i.length && o && (typeof o === "object" || typeof o === "function");) {
                var s = i.shift(); var o = o[s]; i.length && (a = a[s]);
            } if (!i.length && typeof o === "function") {
                e = o.apply(a, e); typeof t === "function" && t.call(n, e);
            }
        }
    } function e(e) {
        for (var t = 0; t < e.length; t++) {
            var n = e[t]; n && (BOOMR.utils.isArray(n) ? r(n) : typeof n === "object" && BOOMR.utils.isArray(n.arguments) && r(n.arguments, n.callback, n.thisArg));
        }
    } var t = BOOMR.window.BOOMR_mq; BOOMR.utils.isArray(t) && e(t); BOOMR.window.BOOMR_mq = {
        push: function() {
            e(arguments);
        }
    };
}()); !(function() {
    if (!BOOMR.plugins.Early) {
        var n = {
            initialized: !1,
            autorun: !0,
            earlyBeaconSent: !1,
            singlePageApp: !1,
            onConfigFired: !1,
            onSpaInit: function() {
                this.earlyBeaconSent = !1;
            },
            clearMetrics: function() {
                BOOMR.removeVar("early");
            },
            sendEarlyBeacon: function(e, t) {
                var n = 0; var r = BOOMR.getPerformance(); var i = BOOMR.window && BOOMR.window.document; if (i) {
                    t === "onconfig" && (this.onConfigFired = !0); r && r.navigation && (n = r.navigation.type); if (!(this.earlyBeaconSent || BOOMR.visibilityState() === "prerender" || n === 1 || n === 2 || !this.singlePageApp && (!this.autorun || !this.onConfigFired && t === "prerender_to_visible" || i.readyState === "loading" || BOOMR.hasBrowserOnloadFired()) || this.singlePageApp && !BOOMR.utils.inArray(t, BOOMR.constants.BEACON_TYPE_SPAS))) {
                        this.earlyBeaconSent = !0; BOOMR.addVar("early", "1"); if (e && BOOMR.utils.inArray(e.initiator, BOOMR.constants.BEACON_TYPE_SPAS)) {
                            BOOMR.addVar("http.initiator", e.initiator); BOOMR.addVar("rt.start", "manual");
                        }BOOMR.fireEvent("before_early_beacon", e); BOOMR.sendBeacon();
                    }
                }
            }
        }; BOOMR.plugins.Early = {
            init: function(e) {
                if (e.primary || n.initialized) {
                    return this;
                } typeof e.autorun !== "undefined" && (n.autorun = e.autorun); n.singlePageApp = BOOMR.plugins.SPA && BOOMR.plugins.SPA.isSinglePageApp(e); BOOMR.registerEvent("before_early_beacon"); BOOMR.subscribe("config", n.sendEarlyBeacon, "onconfig", n, !0); BOOMR.subscribe("dom_loaded", n.sendEarlyBeacon, "dom_loaded", n, !0); BOOMR.subscribe("spa_init", n.onSpaInit, null, n); BOOMR.subscribe("prerender_to_visible", n.sendEarlyBeacon, "prerender_to_visible", n, !0); BOOMR.subscribe("beacon", n.clearMetrics, null, n); BOOMR.subscribe("before_beacon", function(e) {
                    typeof e["rt.quit"] !== "undefined" && n.clearMetrics();
                }, null, n); n.initialized = !0; return this;
            },
            is_complete: function() {
                return !0;
            },
            is_supported: function() {
                return n.initialized;
            },
            sendEarlyBeacon: function(e, t) {
                n.sendEarlyBeacon(e, t);
            }
        };
    }
}()); !(function() {
    if (!BOOMR.plugins.EventTiming) {
        var n = { click: 0, dblclick: 1, mousedown: 2, mouseup: 3, mousemove: 4, touchstart: 5, touchend: 6, touchmove: 7, keydown: 8, keyup: 9, keypress: 10, wheel: 11, pointerdown: 12, pointerup: 13, pointermove: 14, compositionstart: 17, compositionupdate: 18, compositionend: 19, contextmenu: 20 }; var r = {
            initialized: !1,
            supported: null,
            observerEvent: null,
            observerFirstInput: null,
            entries: [],
            firstInputDelay: null,
            timeToFirstInteraction: null,
            onBeforeBeacon: function() {
                if (r.entries && r.entries.length) {
                    for (var e = [], t = 0; t < r.entries.length; t++) {
                        e.push({ n: n[r.entries[t].name] || r.entries[t].name, s: Math.round(r.entries[t].startTime).toString(36), d: Math.round(r.entries[t].duration).toString(36), p: Math.round(r.entries[t].processingEnd - r.entries[t].processingStart).toString(36), c: r.entries[t].cancelable ? 1 : 0, fi: r.entries[t].entryType === "first-input" ? 1 : undefined });
                    }BOOMR.addVar("et.e", BOOMR.utils.serializeForUrl(e), !0);
                }r.entries = []; if (r.firstInputDelay !== null) {
                    BOOMR.addVar("et.fid", Math.ceil(r.firstInputDelay), !0); r.firstInputDelay = null;
                }
            },
            onEventTiming: function(e) {
                r.entries = r.entries.concat(e.getEntries());
            },
            onFirstInput: function(e) {
                e = e.getEntries(); r.entries = r.entries.concat(e); r.firstInputDelay = e[0].processingStart - e[0].startTime; r.timeToFirstInteraction = e[0].startTime;
            }
        }; BOOMR.plugins.EventTiming = {
            init: function() {
                this.is_supported() || (r.initialized = !0); if (!r.initialized) {
                    BOOMR.subscribe("before_beacon", r.onBeforeBeacon, null, r); try {
                        var e = BOOMR.window; r.observerEvent = new e.PerformanceObserver(r.onEventTiming); r.observerEvent.observe({ type: ["event"], buffered: !0 }); r.observerFirstInput = new e.PerformanceObserver(r.onFirstInput); r.observerFirstInput.observe({ type: ["first-input"], buffered: !0 });
                    }
                    catch (t) {
                        r.supported = !1;
                    }r.initialized = !0;
                } return this;
            },
            is_complete: function() {
                return !0;
            },
            is_enabled: function() {
                return r.initialized && this.is_supported();
            },
            is_supported: function() {
                if (r.supported !== null) {
                    return r.supported;
                } var e = BOOMR.window; var t = BOOMR.getPerformance(); r.supported = t && typeof e.PerformanceEventTiming !== "undefined" && typeof e.PerformanceObserver === "function"; r.supported && BOOMR.info("This user agent supports EventTiming", "et"); return r.supported;
            },
            stop: function() {
                if (r.observerEvent) {
                    r.observerEvent.disconnect(); r.observerEvent = null;
                } if (r.observerFirstInput) {
                    r.observerFirstInput.disconnect(); r.observerFirstInput = null;
                }
            },
            metrics: {
                count: function() {
                    return r.entries.length;
                },
                averageDuration: function() {
                    if (r.entries.length === 0) {
                        return 0;
                    } for (var e = 0, t = 0; t < r.entries.length; t++) {
                        e += r.entries[t].duration;
                    } return e / r.entries.length;
                },
                firstInputDelay: function() {
                    return r.firstInputDelay;
                },
                timeToFirstInteraction: function() {
                    return r.timeToFirstInteraction;
                }
            }
        };
    }
}()); BOOMR.t_end = (new Date()).getTime();
