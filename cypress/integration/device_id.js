/* eslint-disable cypress/no-unnecessary-waiting */
/* eslint-disable require-jsdoc */
var Countly = require("../../lib/countly");
var hp = require("../support/helper");

function initMain(deviceId, offline, searchQuery) {
    Countly.init({
        app_key: "YOUR_APP_KEY",
        url: "https://try.count.ly",
        device_id: deviceId,
        tests: true,
        debug: true,
        getSearchQuery: function() {
            return searchQuery;
        },
        offline_mode: offline
    });
}
function validateSdkGeneratedId(providedDeviceId) {
    expect(providedDeviceId).to.exist;
    expect(providedDeviceId.length).to.eq(36);
    expect(Countly._internals.isUUID(providedDeviceId)).to.be.ok;
}
function validateInternalDeviceIdType(expectedType) {
    expect(expectedType).to.eq(Countly._internals.getInternalDeviceIdType());
}
// device id // device id type exposed // device id internal !!!!!!!!!!!

/**
 *device ID type:
    *0 - device ID was set by the developer during init
    *1 - device ID was auto generated by Countly
    *2 - device ID was temporarily given by Countly
    *3 - device ID was provided from location.search
 */
var DeviceIdTypeInternalEnumsTest = {
    DEVELOPER_SUPPLIED: 0,
    SDK_GENERATED: 1,
    TEMPORARY_ID: 2,
    URL_PROVIDED: 3,
};
describe("Device Id tests during first init", ()=>{
    // sdk is initialized w/o custom device id, w/o offline mode, w/o utm device id

    // we provide no device id information sdk should generate the id
    it("SDK is initialized without custom device id, without offline mode, without utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain(undefined, false, undefined);
            expect(Countly.get_device_id_type()).to.eq(Countly.DeviceIdType.SDK_GENERATED);
            validateSdkGeneratedId(Countly.get_device_id());
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.SDK_GENERATED);
        });
    });
    // we provide device id information sdk should use it
    it("SDK is initialized with custom device id, without offline mode, without utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain("gerwutztreimer", false, undefined);
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
            expect(Countly.get_device_id()).to.eq("gerwutztreimer");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.DEVELOPER_SUPPLIED);
        });
    });
    // we provide no device id information sdk should generate the id
    it("SDK is initialized without custom device id, with offline mode, without utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain(undefined, true, undefined);
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.TEMPORARY_ID);
            expect(Countly.get_device_id()).to.eq("[CLY]_temp_id");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.TEMPORARY_ID);
        });
    });
    it("SDK is initialized without custom device id, without offline mode, with utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain(undefined, false, "?cly_device_id=abab");
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
            expect(Countly.get_device_id()).to.eq("abab");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.URL_PROVIDED);
        });
    });
    it("SDK is initialized with custom device id, with offline mode, without utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain("customID", true, undefined);
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.TEMPORARY_ID);
            expect(Countly.get_device_id()).to.eq("[CLY]_temp_id");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.TEMPORARY_ID);
        });
    });
    it("SDK is initialized with custom device id, without offline mode, with utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain("customID2", false, "?cly_device_id=someID");
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
            expect(Countly.get_device_id()).to.eq("someID");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.URL_PROVIDED);
        });
    });
    it("SDK is initialized with custom device id, with offline mode, with utm device id", ()=>{
        hp.haltAndClearStorage(() => {
            initMain("customID3", true, "?cly_device_id=someID2");
            expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
            expect(Countly.get_device_id()).to.eq("someID2");
            validateInternalDeviceIdType(DeviceIdTypeInternalEnumsTest.URL_PROVIDED);
        });
    });
});

// describe("Device ID type tests ", () => {
//     // 1
//     it("Basic init device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, false);
//             expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.SDK_GENERATED);
//             expect(Countly.get_device_id()).to.equal(1);
//         });
//     });

//     // 2
//     it("Basic init with device ID, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", false);
//             expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
//         });
//     });

//     // 3
//     it("Basic init then enable_offline_mode, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, false);
//             Countly.enable_offline_mode();
//             // tempId = 2
//             expect(Countly.get_device_id_type()).to.equal(Countly.DeviceIdType.DEVELOPER_SUPPLIED);
//         });
//     });

//     // 4
//     it("Basic init with device ID then enable_offline_mode, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", false);
//             Countly.enable_offline_mode();
//             // tempId = 2
//             expect(Countly.get_device_id_type()).to.equal(2);
//         });
//     });


//     // 5
//     it("Basic init with offline_mode true, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, true);
//             // tempId = 2
//             expect(Countly.get_device_id_type()).to.equal(2);
//         });
//     });

//     // 6
//     it("Basic init with device ID and offline_mode true, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", true);
//             // tempId = 2
//             expect(Countly.get_device_id_type()).to.equal(2);
//         });
//     });

//     // 7
//     it("Basic init then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, false);
//             Countly.change_id("device_id");
//             // userSet = 0
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });

//     // 8
//     it("Basic init with device ID then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", false);
//             Countly.change_id("device_id");
//             // userSet = 0
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });

//     // 9
//     it("Basic init then change_id then enable_offline_mode, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, false);
//             Countly.change_id("device_id");
//             Countly.enable_offline_mode();
//             // tempID = 2
//             expect(Countly.get_device_id_type()).to.equal(2);
//         });
//     });

//     // 10
//     it("Basic init with device ID then change_id then enable_offline_mode, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", false);
//             Countly.change_id("device_id");
//             Countly.enable_offline_mode();
//             // tempID = 2
//             expect(Countly.get_device_id_type()).to.equal(2);
//         });
//     });

//     // 11
//     it("Basic init then enable_offline_mode then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, false);
//             Countly.enable_offline_mode();
//             Countly.change_id("device_id");
//             // user set = 0 (given during the change_id call)
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });

//     // 12
//     it("Basic init with device ID then enable_offline_mode then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", false);
//             Countly.enable_offline_mode();
//             Countly.change_id("device_id");
//             // user set = 0
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });

//     // 13
//     it("Basic init with offline_mode true then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain(undefined, true);
//             Countly.change_id("device_id");
//             // user set = 0 (given during the change_id call)
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });

//     // 14
//     it("Basic init with device ID and offline_mode true then change_id, device ID type check", () => {
//         hp.haltAndClearStorage(() => {
//             initMain("a", true);
//             Countly.change_id("device_id");
//             // user set = 0
//             expect(Countly.get_device_id_type()).to.equal(0);
//         });
//     });
// });
