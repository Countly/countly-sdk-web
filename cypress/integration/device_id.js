/* eslint-disable cypress/no-unnecessary-waiting */
/* eslint-disable require-jsdoc */
var Countly = require("../../lib/countly");
var hp = require("../support/helper");

function initMain(ob) {
    Countly.init(ob);
}
function idType() {
    return Countly.check_device_id_type();
}

/**
device ID types:
0 - device ID was set by the developer during init
1 - device ID was auto generated by Countly
2 - device ID was temporarily given by Countly
3 - device ID was provided from location.search

=Currently these tests tries to cover the following cases=
- Correct device ID type assessment for:
1. Basic init
2. Basic init with device ID
3. Basic init then enable_offline_mode
4. Basic init with device ID then enable_offline_mode
5. Basic init and offline_mode true
6. Basic init with device ID and offline_mode true
7. Basic init then change device ID (merge: false)
8. Basic init with device ID then change device ID  (merge: false)
9. Basic init then change device ID then enable_offline_mode (merge: false)
10. Basic init with device ID then change device ID then enable_offline_mode (merge: false)

TODO 11 to 14 Currently fails, will pass after bug fix
11. Basic init then enable_offline_mode then change device ID (merge: false) 
12. Basic init with device ID then enable_offline_mode then change device ID (merge: false)
13. Basic init and offline_mode true then change device ID (merge: false)
14. Basic init with device ID and offline_mode true then change device ID (merge: false)


*/

describe("Device ID type tests ", () => {
    it("Basic init device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests"]));
            // autoGenerated = 1
            expect(idType()).to.equal(1);
        });
    });
    it("Basic init with device ID, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "id"]));
            // userSet = 0
            expect(idType()).to.equal(0);
        });
    });
    it("Basic init then enable_offline_mode, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests"]));
            Countly.enable_offline_mode();
            // tempId = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with device ID then enable_offline_mode, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "id"]));
            Countly.enable_offline_mode();
            // tempId = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with offline_mode true, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "offline"]));
            // tempId = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with device ID and offline_mode true, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "offline", "id"]));
            // tempId = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests"]));
            Countly.change_id("device_id");
            // userSet = 0
            expect(idType()).to.equal(0);
        });
    });
    it("Basic init with device ID then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "id"]));
            Countly.change_id("device_id");
            // userSet = 0
            expect(idType()).to.equal(0);
        });
    });
    it("Basic init then change_id then enable_offline_mode, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests"]));
            Countly.change_id("device_id");
            Countly.enable_offline_mode();
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with device ID then change_id then enable_offline_mode, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "id"]));
            Countly.change_id("device_id");
            Countly.enable_offline_mode();
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init then enable_offline_mode then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests"]));
            Countly.enable_offline_mode();
            Countly.change_id("device_id");
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with device ID then enable_offline_mode then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "id"]));
            Countly.enable_offline_mode();
            Countly.change_id("device_id");
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with offline_mode true then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "offline"]));
            Countly.change_id("device_id");
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
    it("Basic init with device ID and offline_mode true then change_id, device ID type check", () => {
        hp.haltAndClearStorage(() => {
            initMain(hp.giveInitObj(["tests", "offline", "id"]));
            Countly.change_id("device_id");
            // tempID = 2
            expect(idType()).to.equal(2);
        });
    });
});
